(function() {var type_impls = {
"embassy_stm32":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DacChannel%3C'd,+T,+1,+DMA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#354\">source</a><a href=\"#impl-DacChannel%3C'd,+T,+1,+DMA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d, T: <a class=\"trait\" href=\"embassy_stm32/dac/trait.Instance.html\" title=\"trait embassy_stm32::dac::Instance\">Instance</a>, DMA&gt; <a class=\"struct\" href=\"embassy_stm32/dac/struct.DacChannel.html\" title=\"struct embassy_stm32::dac::DacChannel\">DacChannel</a>&lt;'d, T, 1, DMA&gt;<div class=\"where\">where\n    DMA: <a class=\"trait\" href=\"embassy_stm32/dac/trait.DacDma1.html\" title=\"trait embassy_stm32::dac::DacDma1\">DacDma1</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#354\">source</a><h4 class=\"code-header\">pub async fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, data: <a class=\"enum\" href=\"embassy_stm32/dac/enum.ValueArray.html\" title=\"enum embassy_stm32::dac::ValueArray\">ValueArray</a>&lt;'_&gt;, circular: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Write <code>data</code> to this channel via DMA.</p>\n<p>To prevent delays or glitches when outputing a periodic waveform, the <code>circular</code>\nflag can be set. This configures a circular DMA transfer that continually outputs\n<code>data</code>. Note that for performance reasons in circular mode the transfer-complete\ninterrupt is disabled.</p>\n</div></details></div></details>",0,"embassy_stm32::dac::DacCh1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DacChannel%3C'd,+T,+2,+DMA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#355\">source</a><a href=\"#impl-DacChannel%3C'd,+T,+2,+DMA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d, T: <a class=\"trait\" href=\"embassy_stm32/dac/trait.Instance.html\" title=\"trait embassy_stm32::dac::Instance\">Instance</a>, DMA&gt; <a class=\"struct\" href=\"embassy_stm32/dac/struct.DacChannel.html\" title=\"struct embassy_stm32::dac::DacChannel\">DacChannel</a>&lt;'d, T, 2, DMA&gt;<div class=\"where\">where\n    DMA: <a class=\"trait\" href=\"embassy_stm32/dac/trait.DacDma2.html\" title=\"trait embassy_stm32::dac::DacDma2\">DacDma2</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#355\">source</a><h4 class=\"code-header\">pub async fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, data: <a class=\"enum\" href=\"embassy_stm32/dac/enum.ValueArray.html\" title=\"enum embassy_stm32::dac::ValueArray\">ValueArray</a>&lt;'_&gt;, circular: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Write <code>data</code> to this channel via DMA.</p>\n<p>To prevent delays or glitches when outputing a periodic waveform, the <code>circular</code>\nflag can be set. This configures a circular DMA transfer that continually outputs\n<code>data</code>. Note that for performance reasons in circular mode the transfer-complete\ninterrupt is disabled.</p>\n</div></details></div></details>",0,"embassy_stm32::dac::DacCh2"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DacChannel%3C'd,+T,+N,+DMA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#114-280\">source</a><a href=\"#impl-DacChannel%3C'd,+T,+N,+DMA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d, T: <a class=\"trait\" href=\"embassy_stm32/dac/trait.Instance.html\" title=\"trait embassy_stm32::dac::Instance\">Instance</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, DMA&gt; <a class=\"struct\" href=\"embassy_stm32/dac/struct.DacChannel.html\" title=\"struct embassy_stm32::dac::DacChannel\">DacChannel</a>&lt;'d, T, N, DMA&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#127-143\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.new\" class=\"fn\">new</a>(\n    _peri: impl <a class=\"trait\" href=\"embassy_stm32/trait.Peripheral.html\" title=\"trait embassy_stm32::Peripheral\">Peripheral</a>&lt;P = T&gt; + 'd,\n    dma: impl <a class=\"trait\" href=\"embassy_stm32/trait.Peripheral.html\" title=\"trait embassy_stm32::Peripheral\">Peripheral</a>&lt;P = DMA&gt; + 'd,\n    pin: impl <a class=\"trait\" href=\"embassy_stm32/trait.Peripheral.html\" title=\"trait embassy_stm32::Peripheral\">Peripheral</a>&lt;P = impl <a class=\"trait\" href=\"embassy_stm32/dac/trait.DacPin.html\" title=\"trait embassy_stm32::dac::DacPin\">DacPin</a>&lt;T, N&gt; + <a class=\"trait\" href=\"embassy_stm32/gpio/low_level/trait.Pin.html\" title=\"trait embassy_stm32::gpio::low_level::Pin\">Pin</a>&gt; + 'd\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>DacChannel</code> instance, consuming the underlying DAC peripheral.</p>\n<p>If you’re not using DMA, pass [<code>dma::NoDma</code>] for the <code>dma</code> argument.</p>\n<p>The channel is enabled on creation and begins to drive the output pin.\nNote that some methods, such as <code>set_trigger()</code> and <code>set_mode()</code>, will\ndisable the channel; you must re-enable it with <code>enable()</code>.</p>\n<p>By default, triggering is disabled, but it can be enabled using\n<a href=\"embassy_stm32/dac/struct.DacChannel.html#method.set_trigger\" title=\"method embassy_stm32::dac::DacChannel::set_trigger\"><code>DacChannel::set_trigger()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_internal\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#158-170\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.new_internal\" class=\"fn\">new_internal</a>(\n    _peri: impl <a class=\"trait\" href=\"embassy_stm32/trait.Peripheral.html\" title=\"trait embassy_stm32::Peripheral\">Peripheral</a>&lt;P = T&gt; + 'd,\n    dma: impl <a class=\"trait\" href=\"embassy_stm32/trait.Peripheral.html\" title=\"trait embassy_stm32::Peripheral\">Peripheral</a>&lt;P = DMA&gt; + 'd\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>DacChannel</code> instance where the external output pin is not used,\nso the DAC can only be used to generate internal signals.\nThe GPIO pin is therefore available to be used for other functions.</p>\n<p>The channel is set to <a href=\"embassy_stm32/dac/enum.Mode.html#variant.NormalInternalUnbuffered\" title=\"variant embassy_stm32::dac::Mode::NormalInternalUnbuffered\"><code>Mode::NormalInternalUnbuffered</code></a> and enabled on creation.\nNote that some methods, such as <code>set_trigger()</code> and <code>set_mode()</code>, will disable the\nchannel; you must re-enable it with <code>enable()</code>.</p>\n<p>If you’re not using DMA, pass [<code>dma::NoDma</code>] for the <code>dma</code> argument.</p>\n<p>By default, triggering is disabled, but it can be enabled using\n<a href=\"embassy_stm32/dac/struct.DacChannel.html#method.set_trigger\" title=\"method embassy_stm32::dac::DacChannel::set_trigger\"><code>DacChannel::set_trigger()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_enable\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#173-179\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.set_enable\" class=\"fn\">set_enable</a>(&amp;mut self, on: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Enable or disable this channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#182-184\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.enable\" class=\"fn\">enable</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Enable this channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disable\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#187-189\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.disable\" class=\"fn\">disable</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Disable this channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_trigger\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#194-201\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.set_trigger\" class=\"fn\">set_trigger</a>(&amp;mut self, source: <a class=\"enum\" href=\"embassy_stm32/dac/enum.TriggerSel.html\" title=\"enum embassy_stm32::dac::TriggerSel\">TriggerSel</a>)</h4></section></summary><div class=\"docblock\"><p>Set the trigger source for this channel.</p>\n<p>This method disables the channel, so you may need to re-enable afterwards.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_triggering\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#204-210\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.set_triggering\" class=\"fn\">set_triggering</a>(&amp;mut self, on: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Enable or disable triggering for this channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trigger\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#213-217\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.trigger\" class=\"fn\">trigger</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Software trigger this channel.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_mode\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#223-232\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.set_mode\" class=\"fn\">set_mode</a>(&amp;mut self, mode: <a class=\"enum\" href=\"embassy_stm32/dac/enum.Mode.html\" title=\"enum embassy_stm32::dac::Mode\">Mode</a>)</h4></section></summary><div class=\"docblock\"><p>Set mode of this channel.</p>\n<p>This method disables the channel, so you may need to re-enable afterwards.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#238-244\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.set\" class=\"fn\">set</a>(&amp;mut self, value: <a class=\"enum\" href=\"embassy_stm32/dac/enum.Value.html\" title=\"enum embassy_stm32::dac::Value\">Value</a>)</h4></section></summary><div class=\"docblock\"><p>Write a new value to this channel.</p>\n<p>If triggering is not enabled, the new value is immediately output; otherwise,\nit will be output after the next trigger.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#247-249\">source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_stm32/dac/struct.DacChannel.html#tymethod.read\" class=\"fn\">read</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Read the current output value of the DAC.</p>\n</div></details></div></details>",0,"embassy_stm32::dac::DacCh1","embassy_stm32::dac::DacCh2"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-DacChannel%3C'd,+T,+N,+DMA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#357-361\">source</a><a href=\"#impl-Drop-for-DacChannel%3C'd,+T,+N,+DMA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d, T: <a class=\"trait\" href=\"embassy_stm32/dac/trait.Instance.html\" title=\"trait embassy_stm32::dac::Instance\">Instance</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, DMA&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"embassy_stm32/dac/struct.DacChannel.html\" title=\"struct embassy_stm32::dac::DacChannel\">DacChannel</a>&lt;'d, T, N, DMA&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embassy_stm32/dac/mod.rs.html#358-360\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","embassy_stm32::dac::DacCh1","embassy_stm32::dac::DacCh2"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()