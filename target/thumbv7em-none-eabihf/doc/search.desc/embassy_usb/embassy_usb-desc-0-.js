searchState.loadedDescShard("embassy_usb", 0, "embassy-usb\nThe USB device has received an address from the host.\n<code>UsbDevice</code> builder.\nThe bConfiguration value for the not configured state.\nThe bConfiguration value for the single configuration …\nConfiguration used when creating <code>UsbDevice</code>.\nThe USB device has been configured and is fully functional.\nThe USB device has just been enabled or reset.\nThe USB device is disabled.\nFunction builder.\nHandler for device events and control requests.\nInterface alternate setting builder.\nInterface builder.\nThe USB device is not suspended, or remote wakeup was not …\nError returned by <code>UsbDevice::remote_wakeup</code>.\nThe USB device has no power.\nThe underlying driver doesn’t support remote wakeup.\nA report of the used size of the runtime allocated buffers\nMain struct for the USB device stack.\nThe global state of the USB device.\nCalled when the host has set the address of the device to …\nAdd an alternate setting to the interface and write its …\nGet the alternate setting number.\nAdd a custom Binary Object Store (BOS) descriptor to this …\nNumber of bos descriptor bytes used\nReturns a report of the consumed buffers\nCreates the <code>UsbDevice</code> instance with the configuration in …\nImplementations of well-known USB classes.\nConfigures the device as a composite device with interface …\nNumber of config descriptor bytes used\nCalled when the host has enabled or disabled the …\nUSB control data types.\nReturns the size of the control request data buffer. Can …\nSize of the control buffer\nCalled when a control request is received with direction …\nCalled when a control request is received with direction …\nUtilities for writing USB descriptors.\nAdd a custom descriptor to this alternate setting.\nDevice class code assigned by USB.org. Set to <code>0xff</code> for …\nDevice protocol code. Depends on class and sub-class.\nDevice release version in BCD.\nDevice sub-class code. Depends on class.\nDisables the USB peripheral.\nCalled when the USB device has been enabled or disabled.\nAllocate a BULK IN endpoint and write its descriptor.\nAllocate a BULK OUT endpoint and write its descriptor.\nAllocate a INTERRUPT IN endpoint and write its descriptor.\nAllocate a INTERRUPT OUT endpoint and write its descriptor.\nAllocate a ISOCHRONOUS IN endpoint and write its …\nAllocate a ISOCHRONOUS OUT endpoint and write its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd an USB function.\nCalled when a GET_DESCRIPTOR STRING control request is …\nAdd a Handler.\nAdd an interface to the function.\nGet the interface number.\nGet the interface number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManufacturer name string descriptor.\nMaximum packet size in bytes for the control endpoint 0.\nMaximum current drawn from the USB bus by the device, in …\nMicrosoft OS Descriptors\nAdd an MS OS 2.0 Descriptor Set.\nNumber of msos descriptor bytes used\nAdd an MS OS 2.0 Device Level Feature Descriptor.\nAdd an MS OS 2.0 Function Level Feature Descriptor.\nGets the underlying <code>MsOsDescriptorWriter</code> to allow adding …\nCreates a builder for constructing a new <code>UsbDevice</code>.\nCreate default configuration with the provided vid and pid …\nProduct name string descriptor.\nInitiates a device remote wakeup on the USB bus.\nCalled when remote wakeup feature is enabled or disabled.\nCalled after a USB reset after the bus reset sequence is …\nRuns the <code>UsbDevice</code> forever.\nRuns the <code>UsbDevice</code> until the bus is suspended.\nWhether the device has its own power source.\nSerial number string descriptor.\nCalled when a “set alternate setting” control request …\nAllocates a new string index.\nAllocates a new string index.\nWhether the device supports remotely waking up the host is …\nCalled when the bus has entered or exited the suspend …\nUSB types.\nWaits for a resume condition on the USB bus.\nCDC-ACM class implementation, aka Serial over USB.\nCDC-NCM class implementation, aka Ethernet over USB.\nUSB HID (Human Interface Device) class implementation.\nMIDI class implementation.\nWebUSB API capability implementation.\nPacket level implementation of a CDC-ACM serial port.\nCDC ACM Control status change monitor\nParity bit is 1 if the amount of <code>1</code> bits in the data byte …\nLine coding parameters\nParity bit is always 1\nNo parity bit.\nParity bit is 1 if the amount of <code>1</code> bits in the data byte …\n1 stop bit\n1.5 stop bits\nParity for LineCoding\nCDC ACM class packet receiver.\nCDC ACM class packet sender.\nParity bit is always 0\nInternal state for CDC-ACM\nNumber of stop bits for LineCoding\n2 stop bits\nThis should be used as <code>device_class</code> when building the …\nReturn a future for when the control settings change\nGets the number of data bits for UART communication.\nGets the data rate in bits per second for UART …\nGets the DTR (data terminal ready) state\nGets the DTR (data terminal ready) state\nGets the DTR (data terminal ready) state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the current line coding. The line coding contains …\nGets the current line coding. The line coding contains …\nGets the current line coding. The line coding contains …\nGets the maximum packet size in bytes.\nGets the maximum packet size in bytes.\nGets the maximum packet size in bytes.\nCreate a new <code>State</code>.\nCreates a new CdcAcmClass with the provided UsbBus and …\nGets the parity type for UART communication.\nReads a single packet from the OUT endpoint.\nReads a single packet from the OUT endpoint. Must be …\nGets the RTS (request to send) state\nGets the RTS (request to send) state\nGets the RTS (request to send) state\nSplit the class into a sender and receiver.\nSplit the class into sender, receiver and control\nGets the number of stop bits for UART communication.\nWaits for the USB host to enable this interface\nWaits for the USB host to enable this interface\nWaits for the USB host to enable this interface\nWrites a single packet into the IN endpoint.\nWrites a single packet into the IN endpoint.\nCDC-NCM class\nCDC NCM class packet receiver.\nCDC NCM class packet sender.\nInternal state for the CDC-NCM class.\nThis should be used as <code>device_class</code> when building the …\n<code>embassy-net</code> driver for the CDC-NCM class.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain a driver for using the CDC-NCM class with …\nCreate a new <code>State</code>.\nCreate a new CDC NCM class.\nWrite a network packet.\nSplit the class into a sender and receiver.\nWaits for the USB host to enable this interface\nWrite a packet.\nType alias for the embassy-net driver for CDC-NCM.\nBackground runner for the CDC-NCM class.\nInternal state for the embassy-net integration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>State</code>.\nRun the CDC-NCM class.\nThe given buffer was too small to read the received report.\nConfiguration for the HID class.\nThe endpoint is disabled.\nFeature report\nUSB HID reader.\nUSB HID reader/writer.\nUSB HID writer.\nIN report\nOUT report\nError when reading a HID report.\nReport ID\nHandler for HID-related control requests.\nInternal state for USB HID.\nThe report was only partially read. See <code>HidReader::read</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the idle rate for <code>id</code>.\nReads the value of report <code>id</code> into <code>buf</code> returning the size.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax packet size for both the IN and OUT endpoints.\nCreate a new <code>State</code>.\nCreates a new <code>HidReaderWriter</code>.\nCreates a new HidWriter.\nConfigures how frequently the host should poll for …\nReads an output report from the Interrupt Out pipe.\nReads an output report from the Interrupt Out pipe.\nWaits for both IN and OUT endpoints to be enabled.\nWaits for the interrupt in endpoint to be enabled.\nWaits for the interrupt out endpoint to be enabled.\nHID report descriptor.\nHandler for control requests.\nDelivers output reports from the Interrupt Out pipe to …\nSet the idle rate for <code>id</code> to <code>dur</code>.\nSets the value of report <code>id</code> to <code>data</code>.\nSplits into separate readers/writers for input and output …\nWrites <code>report</code> to its interrupt endpoint.\nWrites <code>report</code> to its interrupt endpoint.\nWrites an input report by serializing the given report …\nWrites an input report by serializing the given report …\nPacket level implementation of a USB MIDI device.\nMidi class packet receiver.\nMidi class packet sender.\nThis should be used as <code>device_class</code> when building the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the maximum packet size in bytes.\nGets the maximum packet size in bytes.\nGets the maximum packet size in bytes.\nCreates a new <code>MidiClass</code> with the provided UsbBus, number …\nReads a single packet from the OUT endpoint.\nReads a single packet.\nSplit the class into a sender and receiver.\nWaits for the USB host to enable this interface\nWaits for the USB host to enable this interface\nWaits for the USB host to enable this interface\nWrites a single packet into the IN endpoint.\nWrites a single packet.\nConfiguration for WebUSB.\nInternal state for WebUSB\nURL descriptor for WebUSB landing page.\nWebUSB capability implementation.\nBuilder for the WebUSB capability implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nURL to navigate to when the device is connected.\nMaximum packet size in bytes for the data endpoints.\nCreate a new WebUSB URL descriptor.\nCreate a new <code>State</code>.\nVendor code for the WebUSB request.\nThe request was accepted.\nThe request was accepted. The buffer contains the response …\nStandard USB control request Clear Feature\nRequest is intended for a USB class.\nRequest is intended for the entire device.\nRequest is intended for an endpoint. Generally, the <code>index</code> …\nStandard USB feature Device Remote Wakeup for Set/Clear …\nStandard USB feature Endpoint Halt for Set/Clear Feature\nStandard USB control request Get Configuration\nStandard USB control request Get Descriptor\nStandard USB control request Get Interface\nStandard USB control request Get Status\nResponse for a CONTROL IN request.\nRequest is intended for an interface. Generally, the <code>index</code> …\nNone of the above.\nResponse for a CONTROL OUT request.\nControl request recipient.\nThe request was rejected.\nThe request was rejected.\nA control request read from a SETUP packet.\nControl request type.\nReserved.\nReserved.\nStandard USB control request Set Address\nStandard USB control request Set Configuration\nStandard USB control request Set Descriptor\nStandard USB control request Set Feature\nStandard USB control request Set Interface\nStandard USB control request Synch Frame\nRequest is a USB standard request. Usually handled by …\nRequest is vendor-specific.\nGets the descriptor type and index from the value field of …\nDirection of the request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest index. The meaning of the value depends on the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the DATA stage. For control OUT transfers this …\nParses a USB control request from a byte array.\nRecipient of the request.\nRequest code. The meaning of the value depends on the …\nType of the request.\nRequest value. The meaning of the value depends on the …\nA writer for Binary Object Store descriptor.\nWrites capability descriptor to a BOS\nStandard capability descriptor types\nStandard descriptor types\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nString descriptor language IDs.\nEnglish (US)\nA registry property containing binary data.\nA registry property containing binary data.\nTable 18. Microsoft OS 2.0 CCGP device descriptor.\nTable 13. Microsoft OS 2.0 compatible ID descriptor.\nTable 11. Configuration subset header.\nTable 10. Microsoft OS 2.0 descriptor set header.\nTable 5. Descriptor set information structure.\nTable 9. Microsoft OS 2.0 descriptor wDescriptorType …\nA marker trait for feature descriptors that are valid at …\nA registry property containing a big-endian 32-bit integer.\nA registry property containing a big-endian 32-bit integer.\nA registry property containing a little-endian 32-bit …\nA registry property containing a little-endian 32-bit …\nA registry property containing a string that expands …\nA registry property containing a string that expands …\nCCGP device descriptor feature descriptor\nCompatible device ID feature descriptor\nMinimum USB resume time feature descriptor\nVendor revision feature descriptor\nRegistry property feature descriptor\nVendor revision feature descriptor\nA marker trait for feature descriptors that are valid at …\nTable 12. Function subset header.\nA registry property containing a string that contains a …\nA registry property containing a string that contains a …\nTable 16. Microsoft OS 2.0 minimum USB recovery time …\nTable 17. Microsoft OS 2.0 model ID descriptor.\nA serialized Microsoft OS 2.0 Descriptor set.\nWrites a Microsoft OS 2.0 Descriptor set into a buffer.\nTable 4. Microsoft OS 2.0 platform capability descriptor …\nData values that can be encoded into a registry property …\nTable 15. wPropertyDataType values for the Microsoft OS …\nA registry property containing multiple strings.\nA registry property containing multiple strings.\nTable 14. Microsoft OS 2.0 registry property descriptor\nMS OS descriptor set header\nConfiguration subset header\nFunction subset header\nA registry property containing a string.\nA registry property containing a string.\nTable 19. Microsoft OS 2.0 vendor revision descriptor.\nAdd a configuration subset.\nGets the raw bytes of the MS OS descriptor\nAdd a device level feature descriptor.\nEnds the current function subset (if any)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a function subset.\nAdd a function level feature descriptor.\nWrite the MS OS descriptor set header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no MS OS descriptor data is available\nReturns <code>true</code> if the MS OS descriptor header has not yet …\nReturns <code>true</code> if a configuration subset header has been …\nReturns <code>true</code> if a function subset header has been started …\nGets the <code>PropertyDataType</code> for this property value\nReturns the length of the descriptor field\nCreates a MS OS descriptor set header.\nCreates a configuration subset header\nCreates a function subset header\nCreates a compatible ID feature descriptor\nA registry property.\nTimes are in milliseconds.\nCreates a new model ID descriptor\nCreates a new CCGP device descriptor\nCreates a new vendor revision descriptor\nGets the size (in bytes) of this property value when …\nGets the vendor code used by the host to retrieve the MS …\nMicrosoft Windows version codes\nEncodes the data for this property value and writes it to …\nWindows 10\nWindows 8.1 (aka <code>NTDDI_WINBLUE</code>)\nA handle for a USB interface that contains its number.\nA handle for a USB string descriptor that contains its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")