searchState.loadedDescShard("embassy_net_driver", 0, "embassy-net-driver\nVerify checksum when receiving and compute checksum when …\nA description of device capabilities.\nA description of checksum behavior for a particular …\nA description of checksum behavior for every supported …\nThe link is down.\nMain <code>embassy-net</code> driver API.\nEthernet medium, with a A six-octet Ethernet address.\nRepresentation of an hardware address, such as an Ethernet …\n6LoWPAN over IEEE802.15.4, with an eight-octet address.\nIndicates that a Driver is IP-native, and has no hardware …\nThe link state of a network device.\nIgnore checksum completely.\nVerify checksum when receiving.\nA token to receive a single network packet.\nA token to receive a single network packet.\nCompute checksum before sending.\nA token to transmit a single network packet.\nA token to transmit a single network packet.\nThe link is up.\nGet a description of device capabilities.\nChecksum behavior.\nConsumes the token to receive a single network packet.\nConsumes the token to send a single network packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the device’s hardware address.\nChecksum behavior for ICMPv4.\nChecksum behavior for ICMPv6.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecksum behavior for IPv4.\nGet the link state.\nMaximum burst size, in terms of MTU.\nMaximum transmission unit.\nConstruct a token pair consisting of one receive token and …\nChecksum behavior for TCP.\nConstruct a transmit token.\nChecksum behavior for UDP.")