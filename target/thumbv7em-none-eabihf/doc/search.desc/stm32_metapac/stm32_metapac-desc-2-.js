searchState.loadedDescShard("stm32_metapac", 2, "VBAT level monitoring versus high threshold\nVBAT level monitoring versus low threshold\nVBAT charging enable\nVBAT charging resistor selection\nVoltage scaling selection according to performance These …\nVOS Ready bit for VCORE voltage scaling output selection. …\nClear Wakeup pin flag for WKUP. These bits are always read …\nEnable Wakeup Pin WKUPn+1 Each bit is set and cleared by …\nWakeup pin WKUPF flag. This bit is set by hardware and …\nWakeup pin polarity bit for WKUPn-7 These bits define the …\nWakeup pin pull configuration\nNo pull-up.\nPull-down.\nPull-up.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReset and clock control\nRCC AHB1 Clock Register\nRCC AHB1 Sleep Clock Register\nRCC AHB1 Peripheral Reset Register\nRCC AHB2 Clock Register\nRCC AHB2 Sleep Clock Register\nRCC AHB2 Peripheral Reset Register\nRCC AHB3 Clock Register\nRCC AHB3 Sleep Clock Register\nRCC AHB3 Reset Register\nRCC AHB4 Clock Register\nRCC AHB4 Sleep Clock Register\nRCC AHB4 Peripheral Reset Register\nRCC APB1 Clock Register\nRCC APB1 High Sleep Clock Register\nRCC APB1 Peripheral Reset Register\nRCC APB1 Clock Register\nRCC APB1 Low Sleep Clock Register\nRCC APB1 Peripheral Reset Register\nRCC APB2 Clock Register\nRCC APB2 Sleep Clock Register\nRCC APB2 Peripheral Reset Register\nRCC APB3 Clock Register\nRCC APB3 Sleep Clock Register\nRCC APB3 Peripheral Reset Register\nRCC APB4 Clock Register\nRCC APB4 Sleep Clock Register\nRCC APB4 Peripheral Reset Register\nRCC Backup Domain Control Register\nRCC Clock Configuration Register\nRCC Clock Source Interrupt Clear Register\nRCC Clock Source Interrupt Enable Register\nRCC Clock Source Interrupt Flag Register\nclock control register\nRCC Clock Recovery RC Register\nRCC CSI configuration register\nRCC Clock Control and Status Register\nRCC Domain 1 Kernel Clock Configuration Register\nRCC Domain 1 Clock Configuration Register\nRCC Domain 2 Kernel Clock Configuration Register\nRCC Domain 2 Kernel Clock Configuration Register\nRCC Domain 2 Clock Configuration Register\nRCC D3 Autonomous mode Register\nRCC Domain 3 Kernel Clock Configuration Register\nRCC Domain 3 Clock Configuration Register\nReturns the argument unchanged.\nGlobal Control Register\nRCC HSI configuration register\nCalls <code>U::from(self)</code>.\nRCC PLLs Configuration Register\nRCC PLLs Clock Source Selection Register\nRCC PLL1 Dividers Configuration Register\nRCC PLL1 Fractional Divider Register\nRCC Reset Status Register\nRCC AHB1 Clock Register\nRCC AHB1 Sleep Clock Register\nRCC AHB1 Peripheral Reset Register\nRCC AHB2 Clock Register\nRCC AHB2 Sleep Clock Register\nRCC AHB2 Peripheral Reset Register\nRCC AHB3 Clock Register\nRCC AHB3 Sleep Clock Register\nRCC AHB3 Reset Register\nRCC AHB4 Clock Register\nRCC AHB4 Sleep Clock Register\nRCC AHB4 Peripheral Reset Register\nRCC APB1 Clock Register\nRCC APB1 High Sleep Clock Register\nRCC APB1 Peripheral Reset Register\nRCC APB1 Clock Register\nRCC APB1 Low Sleep Clock Register\nRCC APB1 Peripheral Reset Register\nRCC APB2 Clock Register\nRCC APB2 Sleep Clock Register\nRCC APB2 Peripheral Reset Register\nRCC APB3 Clock Register\nRCC APB3 Sleep Clock Register\nRCC APB3 Peripheral Reset Register\nRCC APB4 Clock Register\nRCC APB4 Sleep Clock Register\nRCC APB4 Peripheral Reset Register\nRCC Backup Domain Control Register\nRCC Clock Configuration Register\nRCC Clock Source Interrupt Clear Register\nRCC Clock Source Interrupt Enable Register\nRCC Clock Source Interrupt Flag Register\nclock control register\nRCC Clock Recovery RC Register\nRCC CSI configuration register\nRCC Clock Control and Status Register\nRCC Domain 1 Kernel Clock Configuration Register\nRCC Domain 1 Clock Configuration Register\nRCC Domain 2 Kernel Clock Configuration Register\nRCC Domain 2 Kernel Clock Configuration Register\nRCC Domain 2 Clock Configuration Register\nRCC D3 Autonomous mode Register\nRCC Domain 3 Kernel Clock Configuration Register\nRCC Domain 3 Clock Configuration Register\nGlobal Control Register\nRCC HSI configuration register\nRCC PLLs Configuration Register\nRCC PLLs Clock Source Selection Register\nRCC PLL1 Dividers Configuration Register\nRCC PLL Fractional Divider Register\nRCC Reset Status Register\nADC1/2 Peripheral Clocks Enable\nADC1/2 Peripheral Clocks Enable During CSleep Mode\nADC1&amp;2 block reset\nADC3 Autonomous mode enable\nADC3 Peripheral Clocks Enable\nADC3 Peripheral Clocks Enable During CSleep Mode\nADC3 block reset\nSAR ADC kernel clock source selection\nART Clock Enable\nART Clock Enable During CSleep Mode\nART block reset\nAXISRAM block enable\nAXISRAM Block Clock Enable During CSleep mode\nBDMA1 clock enable\nBDMA1 Clock Enable During CSleep Mode\nBDMA1 block reset\nBDMA2 and DMAMUX Autonomous mode enable\nBDMA2 and DMAMUX2 Clock Enable\nBDMA2 Clock Enable During CSleep Mode\nBDMA2 block reset\nBDMA and DMAMUX Autonomous mode enable\nBDMA and DMAMUX2 Clock Enable\nBDMA Clock Enable During CSleep Mode\nBDMA block reset\nVSwitch domain software reset\nBackup RAM Autonomous mode enable\nBackup RAM Clock Enable\nBackup RAM Clock Enable During CSleep Mode\nBOR reset flag\nHDMI-CEC peripheral clock enable\nHDMI-CEC Peripheral Clocks Enable During CSleep Mode\nHDMI-CEC block reset\nHDMI-CEC kernel clock source selection\nCOMP12 Autonomous mode enable\nCOMP1/2 peripheral clock enable\nCOMP1/2 peripheral clock enable during CSleep mode\nCOMP12 Blocks Reset\nCORDIC enable\nCORDIC enable during CSleep Mode\nCORDIC reset\nCPU reset\nCPU reset flag\nCRC Autonomous mode enable\nCRC peripheral clock enable\nCRC peripheral clock enable during CSleep mode\nCRC block reset\nClock Recovery System peripheral clock enable\nClock Recovery System peripheral clock enable during …\nClock Recovery System reset\nCRYP peripheral clock enable\nCRYP peripheral clock enable during CSleep mode\nCRYPography block reset\nCSI clock calibration\nCSI clock enable in Stop mode\nCSI clock enable\nCSI clock ready flag\nCSI ready Interrupt Flag\nCSI ready Interrupt Enable\nCSI clock trimming\nD1 domain clocks ready flag\nD1 domain Core prescaler\nD1DTCM1 Block Clock Enable During CSleep mode\nD1 domain APB3 prescaler\nD1 domain power switch reset flag\nD2 domain clocks ready flag\nD2 domain APB1 prescaler\nD2 domain APB2 prescaler\nD2 domain power switch reset flag\nD3 domain APB4 prescaler\nDAC1 (containing two converters) peripheral clock enable\nDAC1 (containing two converters) peripheral clock enable …\nDAC1 (containing two converters) reset\nDAC2 (containing one converter) Autonomous mode enable\nDAC2 (containing one converter) peripheral clock enable\nDAC2 (containing one converter) peripheral clock enable …\nDAC2 (containing one converter) reset\nDCMI peripheral clock\nDCMI peripheral clock enable during csleep mode\nDCMI block reset\nDFSDM1 Peripheral Clocks Enable\nDFSDM1 Peripheral Clocks Enable During CSleep Mode\nDFSDM1 block reset\nDFSDM1 kernel Clk clock source selection\nDFSDM2 kernel clock source selection\nPrescaler for PLL1\nPLL1 DIVP divider output enable\nPLL1 DIVQ divider output enable\nPLL1 DIVR divider output enable\nDMA1 Clock Enable\nDMA1 Clock Enable During CSleep Mode\nDMA1 block reset\nDMA2D Peripheral Clock Enable\nDMA2D Clock Enable During CSleep Mode\nDMA2D block reset\nDMA2 Clock Enable\nDMA2 Clock Enable During CSleep Mode\nDMA2 block reset\nDSI Peripheral clocks enable\nDSI Peripheral Clock Enable During CSleep Mode\nDSI block reset\nD1 DTCM1 block enable\nD1 DTCM2 block enable\nD1 DTCM2 Block Clock Enable During CSleep mode\nDigital temperature sensor Autonomous mode enable\nDigital temperature sensor block enable\nDigital temperature sensor block enable during CSleep Mode\nDigital temperature sensor block reset\nEthernet MAC bus interface Clock Enable\nEthernet MAC bus interface Clock Enable During CSleep Mode\nETH block reset\nEthernet Reception Clock Enable\nEthernet Reception Clock Enable During CSleep Mode\nEthernet Transmission Clock Enable\nEthernet Transmission Clock Enable During CSleep Mode\nFDCAN Peripheral Clocks Enable\nFDCAN Peripheral Clocks Enable During CSleep Mode\nFDCAN block reset\nFDCAN kernel clock source selection\nFLASH Clock Enable During CSleep Mode\nFMAC enable\nFMAC enable during CSleep Mode\nFMAC reset\nFMC Peripheral Clocks Enable\nFMC Peripheral Clocks Enable During CSleep Mode\nFMC block reset\nFMC kernel clock source selection\nFractional part of the multiplication factor for PLL VCO\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\nHASH peripheral clock enable\nHASH peripheral clock enable during CSleep mode\nHash block reset\nD1 domain AHB prescaler\nHRTIM peripheral clock enable\nHRTIM peripheral clock enable during CSleep mode\nHRTIM block reset\nHigh Resolution Timer clock prescaler selection\nCSI ready Interrupt Clear\nHSE clock bypass\nHSE clock security system Interrupt Clear\nHSE clock security system Interrupt Flag\nHSE Clock Security System enable\nHSEM peripheral clock enable\nHSEM block reset\nHSE clock enable\nHSE clock ready flag\nHSE ready Interrupt Clear\nHSE ready Interrupt Flag\nHSE ready Interrupt Enable\nInternal RC 48 MHz clock calibration\nRC48 clock enable\nRC48 clock ready flag\nRC48 ready Interrupt Clear\nRC48 ready Interrupt Flag\nRC48 ready Interrupt Enable\nHSI clock calibration\nHSI clock divider\nHSI divider flag\nHigh Speed Internal clock enable in Stop mode\nInternal high-speed clock enable\nHSI clock ready flag\nHSI ready Interrupt Clear\nHSI ready Interrupt Flag\nHSI ready Interrupt Enable\nHSI clock trimming\nI2C1,2,3 kernel clock source selection\nI2C1 Peripheral Clocks Enable\nI2C1 Peripheral Clocks Enable During CSleep Mode\nI2C1 block reset\nI2C2 Peripheral Clocks Enable\nI2C2 Peripheral Clocks Enable During CSleep Mode\nI2C2 block reset\nI2C3 Peripheral Clocks Enable\nI2C3 Peripheral Clocks Enable During CSleep Mode\nI2C3 block reset\nI2C4 Autonomous mode enable\nI2C4 Peripheral Clocks Enable\nI2C4 Peripheral Clocks Enable During CSleep Mode\nI2C4 block reset\nI2C4 kernel clock source selection\nI2C5 Peripheral Clocks Enable\nI2C5 block enable during CSleep Mode\nI2C5 block reset\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOCTOSPI IO manager enable\nOCTOSPI IO manager enable during CSleep Mode\nOCTOSPI IO manager reset\nD1 ITCM block enable\nD1ITCM Block Clock Enable During CSleep mode\nIndependent Watchdog reset flag\nJPGDEC Peripheral Clock Enable\nJPGDEC Clock Enable During CSleep Mode\nJPGDEC block reset\nLPTIM1 Peripheral Clocks Enable\nLPTIM1 Peripheral Clocks Enable During CSleep Mode\nTIM block reset\nLPTIM1 kernel clock source selection\nLPTIM2 Autonomous mode enable\nLPTIM2 Peripheral Clocks Enable\nLPTIM2 Peripheral Clocks Enable During CSleep Mode\nLPTIM2 block reset\nLPTIM2 kernel clock source selection\nLPTIM3,4,5 kernel clock source selection\nLPTIM3 Autonomous mode enable\nLPTIM3 Peripheral Clocks Enable\nLPTIM3 Peripheral Clocks Enable During CSleep Mode\nLPTIM3 block reset\nLPTIM4 Autonomous mode enable\nLPTIM4 Peripheral Clocks Enable\nLPTIM4 Peripheral Clocks Enable During CSleep Mode\nLPTIM4 block reset\nLPTIM5 Autonomous mode enable\nLPTIM5 Peripheral Clocks Enable\nLPTIM5 Peripheral Clocks Enable During CSleep Mode\nLPTIM5 block reset\nLPUART1 Autonomous mode enable\nLPUART1 Peripheral Clocks Enable\nLPUART1 Peripheral Clocks Enable During CSleep Mode\nLPUART1 block reset\nLPUART1 kernel clock source selection\nReset due to illegal D1 DStandby or CPU CStop flag\nLSE oscillator bypass\nLSE clock security system Interrupt Clear\nLSE clock security system failure detection\nLSE clock security system Interrupt Flag\nLSE clock security system Interrupt Enable\nLSE clock security system enable\nLSE oscillator driving capability\nLSE oscillator enabled\nLSE oscillator ready\nLSE ready Interrupt Clear\nLSE ready Interrupt Flag\nLSE ready Interrupt Enable\nLSI oscillator enable\nLSI oscillator ready\nLSI ready Interrupt Clear\nLSI ready Interrupt Flag\nLSI ready Interrupt Enable\nLTDC peripheral clock enable\nLTDC peripheral clock enable during CSleep mode\nLTDC block reset\nMCO1 prescaler\nMicro-controller clock output 1\nMCO2 prescaler\nMicro-controller clock output 2\nMDIOS peripheral clock enable\nMDIOS peripheral clock enable during CSleep mode\nMDIOS block reset\nMDMA Peripheral Clock Enable\nMDMA Clock Enable During CSleep Mode\nMDMA block reset\nOCTOSPI1 and OCTOSPI1 Delay Clock Enable\nOCTOSPI1 and OCTOSPI1 Delay Clock Enable During CSleep Mode\nOCTOSPI1 and OCTOSPI1 delay block reset\nOCTOSPI2 and OCTOSPI2 delay block enable\nOCTOSPI2 and OCTOSPI2 delay block enable during CSleep Mode\nOCTOSPI2 and OCTOSPI2 delay block reset\nOCTOSPI kernel clock source selection\nOPAMP peripheral clock enable\nOPAMP peripheral clock enable during CSleep mode\nOPAMP block reset\nOTFDEC1 enable\nOTFDEC1 enable during CSleep Mode\nOTFDEC1 reset\nOTFDEC2 enable\nOTFDEC2 enable during CSleep Mode\nOTFDEC2 reset\nper_ck clock source selection\nPin reset flag (NRST)\nPLL1 fractional latch enable\nMultiplication factor for PLL1 VCO\nPLL1 enable\nPLL DIVP division factor\nPLL DIVQ division factor\nPLL DIVR division factor\nPLL1 clock ready flag\nPLL1 ready Interrupt Clear\nPLL1 ready Interrupt Flag\nPLL1 ready Interrupt Enable\nPLL1 input frequency range\nDIVMx and PLLs clock source selection\nPLL1 VCO selection\nPOR/PDR reset flag\nRemove reset flag\nRNG peripheral clocks enable\nRNG peripheral clock enable during CSleep mode\nRandom Number Generator block reset\nRNG kernel clock source selection\nRTC Autonomous mode enable\nRTC APB Clock Enable\nRTC APB Clock Enable During CSleep Mode\nRTC clock enable\nHSE division factor for RTC clock\nRTC clock source selection\nSAI1 Peripheral Clocks Enable\nSAI1 Peripheral Clocks Enable During CSleep Mode\nSAI1 block reset\nSAI1 and DFSDM1 kernel Aclk clock source selection\nSAI2 kernel clock source A source selection\nSAI2 kernel clock source B source selection\nSAI2 Peripheral Clocks Enable\nSAI2 Peripheral Clocks Enable During CSleep Mode\nSAI2 block reset\nSAI3 Peripheral Clocks Enable\nSAI3 Peripheral Clocks Enable During CSleep Mode\nSAI3 block reset\nSAI4 Autonomous mode enable\nSAI4 Peripheral Clocks Enable\nSAI4 Peripheral Clocks Enable During CSleep Mode\nSAI4 block reset\nSDMMC1 and SDMMC1 Delay Clock Enable\nSDMMC1 and SDMMC1 Delay Clock Enable During CSleep Mode\nSDMMC1 and SDMMC1 delay block reset\nSDMMC2 and SDMMC2 delay clock enable\nSDMMC2 and SDMMC2 Delay Clock Enable During CSleep Mode\nSDMMC2 and SDMMC2 Delay block reset\nSDMMC kernel clock source selection\nADC1/2 Peripheral Clocks Enable\nADC1/2 Peripheral Clocks Enable During CSleep Mode\nADC1&amp;2 block reset\nADC3 Autonomous mode enable\nADC3 Peripheral Clocks Enable\nADC3 Peripheral Clocks Enable During CSleep Mode\nADC3 block reset\nSAR ADC kernel clock source selection\nART Clock Enable\nART Clock Enable During CSleep Mode\nART block reset\nAXISRAM block enable\nAXISRAM Block Clock Enable During CSleep mode\nBDMA1 clock enable\nBDMA1 Clock Enable During CSleep Mode\nBDMA1 block reset\nBDMA2 and DMAMUX Autonomous mode enable\nBDMA2 and DMAMUX2 Clock Enable\nBDMA2 Clock Enable During CSleep Mode\nBDMA2 block reset\nBDMA and DMAMUX Autonomous mode enable\nBDMA and DMAMUX2 Clock Enable\nBDMA Clock Enable During CSleep Mode\nBDMA block reset\nVSwitch domain software reset\nBackup RAM Autonomous mode enable\nBackup RAM Clock Enable\nBackup RAM Clock Enable During CSleep Mode\nBOR reset flag\nHDMI-CEC peripheral clock enable\nHDMI-CEC Peripheral Clocks Enable During CSleep Mode\nHDMI-CEC block reset\nHDMI-CEC kernel clock source selection\nCOMP12 Autonomous mode enable\nCOMP1/2 peripheral clock enable\nCOMP1/2 peripheral clock enable during CSleep mode\nCOMP12 Blocks Reset\nCORDIC enable\nCORDIC enable during CSleep Mode\nCORDIC reset\nCPU reset\nCPU reset flag\nCRC Autonomous mode enable\nCRC peripheral clock enable\nCRC peripheral clock enable during CSleep mode\nCRC block reset\nClock Recovery System peripheral clock enable\nClock Recovery System peripheral clock enable during …\nClock Recovery System reset\nCRYP peripheral clock enable\nCRYP peripheral clock enable during CSleep mode\nCRYPography block reset\nCSI clock calibration\nCSI clock enable in Stop mode\nCSI clock enable\nCSI clock ready flag\nCSI ready Interrupt Flag\nCSI ready Interrupt Enable\nCSI clock trimming\nD1 domain clocks ready flag\nD1 domain Core prescaler\nD1DTCM1 Block Clock Enable During CSleep mode\nD1 domain APB3 prescaler\nD1 domain power switch reset flag\nD2 domain clocks ready flag\nD2 domain APB1 prescaler\nD2 domain APB2 prescaler\nD2 domain power switch reset flag\nD3 domain APB4 prescaler\nDAC1 (containing two converters) peripheral clock enable\nDAC1 (containing two converters) peripheral clock enable …\nDAC1 (containing two converters) reset\nDAC2 (containing one converter) Autonomous mode enable\nDAC2 (containing one converter) peripheral clock enable\nDAC2 (containing one converter) peripheral clock enable …\nDAC2 (containing one converter) reset\nDCMI peripheral clock\nDCMI peripheral clock enable during csleep mode\nDCMI block reset\nDFSDM1 Peripheral Clocks Enable\nDFSDM1 Peripheral Clocks Enable During CSleep Mode\nDFSDM1 block reset\nDFSDM1 kernel Clk clock source selection\nDFSDM2 kernel clock source selection\nPrescaler for PLL1\nPLL1 DIVP divider output enable\nPLL1 DIVQ divider output enable\nPLL1 DIVR divider output enable\nDMA1 Clock Enable\nDMA1 Clock Enable During CSleep Mode\nDMA1 block reset\nDMA2D Peripheral Clock Enable\nDMA2D Clock Enable During CSleep Mode\nDMA2D block reset\nDMA2 Clock Enable\nDMA2 Clock Enable During CSleep Mode\nDMA2 block reset\nDSI Peripheral clocks enable\nDSI Peripheral Clock Enable During CSleep Mode\nDSI block reset\nD1 DTCM1 block enable\nD1 DTCM2 block enable\nD1 DTCM2 Block Clock Enable During CSleep mode\nDigital temperature sensor Autonomous mode enable\nDigital temperature sensor block enable\nDigital temperature sensor block enable during CSleep Mode\nDigital temperature sensor block reset\nEthernet MAC bus interface Clock Enable\nEthernet MAC bus interface Clock Enable During CSleep Mode\nETH block reset\nEthernet Reception Clock Enable\nEthernet Reception Clock Enable During CSleep Mode\nEthernet Transmission Clock Enable\nEthernet Transmission Clock Enable During CSleep Mode\nFDCAN Peripheral Clocks Enable\nFDCAN Peripheral Clocks Enable During CSleep Mode\nFDCAN block reset\nFDCAN kernel clock source selection\nFLASH Clock Enable During CSleep Mode\nFMAC enable\nFMAC enable during CSleep Mode\nFMAC reset\nFMC Peripheral Clocks Enable\nFMC Peripheral Clocks Enable During CSleep Mode\nFMC block reset\nFMC kernel clock source selection\nFractional part of the multiplication factor for PLL VCO\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\n0GPIO peripheral clock enable\nGPIO peripheral clock enable during CSleep mode\nGPIO block reset\nHASH peripheral clock enable\nHASH peripheral clock enable during CSleep mode\nHash block reset\nD1 domain AHB prescaler\nHRTIM peripheral clock enable\nHRTIM peripheral clock enable during CSleep mode\nHRTIM block reset\nHigh Resolution Timer clock prescaler selection\nCSI ready Interrupt Clear\nHSE clock bypass\nHSE clock security system Interrupt Clear\nHSE clock security system Interrupt Flag\nHSE Clock Security System enable\nHSEM peripheral clock enable\nHSEM block reset\nHSE clock enable\nHSE clock ready flag\nHSE ready Interrupt Clear\nHSE ready Interrupt Flag\nHSE ready Interrupt Enable\nInternal RC 48 MHz clock calibration\nRC48 clock enable\nRC48 clock ready flag\nRC48 ready Interrupt Clear\nRC48 ready Interrupt Flag\nRC48 ready Interrupt Enable\nHSI clock calibration\nHSI clock divider\nHSI divider flag\nHigh Speed Internal clock enable in Stop mode\nInternal high-speed clock enable\nHSI clock ready flag\nHSI ready Interrupt Clear\nHSI ready Interrupt Flag\nHSI ready Interrupt Enable\nHSI clock trimming\nI2C1,2,3 kernel clock source selection\nI2C1 Peripheral Clocks Enable\nI2C1 Peripheral Clocks Enable During CSleep Mode\nI2C1 block reset\nI2C2 Peripheral Clocks Enable\nI2C2 Peripheral Clocks Enable During CSleep Mode\nI2C2 block reset\nI2C3 Peripheral Clocks Enable\nI2C3 Peripheral Clocks Enable During CSleep Mode\nI2C3 block reset\nI2C4 Autonomous mode enable\nI2C4 Peripheral Clocks Enable\nI2C4 Peripheral Clocks Enable During CSleep Mode\nI2C4 block reset\nI2C4 kernel clock source selection\nI2C5 Peripheral Clocks Enable\nI2C5 block enable during CSleep Mode\nI2C5 block reset\nOCTOSPI IO manager enable\nOCTOSPI IO manager enable during CSleep Mode\nOCTOSPI IO manager reset\nD1 ITCM block enable\nD1ITCM Block Clock Enable During CSleep mode\nIndependent Watchdog reset flag\nJPGDEC Peripheral Clock Enable\nJPGDEC Clock Enable During CSleep Mode\nJPGDEC block reset\nLPTIM1 Peripheral Clocks Enable\nLPTIM1 Peripheral Clocks Enable During CSleep Mode\nTIM block reset\nLPTIM1 kernel clock source selection\nLPTIM2 Autonomous mode enable\nLPTIM2 Peripheral Clocks Enable\nLPTIM2 Peripheral Clocks Enable During CSleep Mode\nLPTIM2 block reset\nLPTIM2 kernel clock source selection\nLPTIM3,4,5 kernel clock source selection\nLPTIM3 Autonomous mode enable\nLPTIM3 Peripheral Clocks Enable\nLPTIM3 Peripheral Clocks Enable During CSleep Mode\nLPTIM3 block reset\nLPTIM4 Autonomous mode enable\nLPTIM4 Peripheral Clocks Enable\nLPTIM4 Peripheral Clocks Enable During CSleep Mode\nLPTIM4 block reset\nLPTIM5 Autonomous mode enable\nLPTIM5 Peripheral Clocks Enable\nLPTIM5 Peripheral Clocks Enable During CSleep Mode\nLPTIM5 block reset\nLPUART1 Autonomous mode enable\nLPUART1 Peripheral Clocks Enable\nLPUART1 Peripheral Clocks Enable During CSleep Mode\nLPUART1 block reset\nLPUART1 kernel clock source selection\nReset due to illegal D1 DStandby or CPU CStop flag\nLSE oscillator bypass\nLSE clock security system Interrupt Clear\nLSE clock security system failure detection\nLSE clock security system Interrupt Flag\nLSE clock security system Interrupt Enable\nLSE clock security system enable\nLSE oscillator driving capability\nLSE oscillator enabled\nLSE oscillator ready\nLSE ready Interrupt Clear\nLSE ready Interrupt Flag\nLSE ready Interrupt Enable\nLSI oscillator enable\nLSI oscillator ready\nLSI ready Interrupt Clear\nLSI ready Interrupt Flag\nLSI ready Interrupt Enable\nLTDC peripheral clock enable\nLTDC peripheral clock enable during CSleep mode\nLTDC block reset\nMCO1 prescaler\nMicro-controller clock output 1\nMCO2 prescaler\nMicro-controller clock output 2\nMDIOS peripheral clock enable\nMDIOS peripheral clock enable during CSleep mode\nMDIOS block reset\nMDMA Peripheral Clock Enable\nMDMA Clock Enable During CSleep Mode\nMDMA block reset\nOCTOSPI1 and OCTOSPI1 Delay Clock Enable\nOCTOSPI1 and OCTOSPI1 Delay Clock Enable During CSleep Mode\nOCTOSPI1 and OCTOSPI1 delay block reset\nOCTOSPI2 and OCTOSPI2 delay block enable\nOCTOSPI2 and OCTOSPI2 delay block enable during CSleep Mode\nOCTOSPI2 and OCTOSPI2 delay block reset\nOCTOSPI kernel clock source selection\nOPAMP peripheral clock enable\nOPAMP peripheral clock enable during CSleep mode\nOPAMP block reset\nOTFDEC1 enable\nOTFDEC1 enable during CSleep Mode\nOTFDEC1 reset\nOTFDEC2 enable\nOTFDEC2 enable during CSleep Mode\nOTFDEC2 reset\nper_ck clock source selection\nPin reset flag (NRST)\nPLL1 fractional latch enable\nMultiplication factor for PLL1 VCO\nPLL1 enable\nPLL DIVP division factor\nPLL DIVQ division factor\nPLL DIVR division factor\nPLL1 clock ready flag\nPLL1 ready Interrupt Clear\nPLL1 ready Interrupt Flag\nPLL1 ready Interrupt Enable\nPLL1 input frequency range\nDIVMx and PLLs clock source selection\nPLL1 VCO selection\nPOR/PDR reset flag\nRemove reset flag\nRNG peripheral clocks enable\nRNG peripheral clock enable during CSleep mode\nRandom Number Generator block reset\nRNG kernel clock source selection\nRTC Autonomous mode enable\nRTC APB Clock Enable\nRTC APB Clock Enable During CSleep Mode\nRTC clock enable\nHSE division factor for RTC clock\nRTC clock source selection\nSAI1 Peripheral Clocks Enable\nSAI1 Peripheral Clocks Enable During CSleep Mode\nSAI1 block reset\nSAI1 and DFSDM1 kernel Aclk clock source selection\nSAI2 kernel clock source A source selection\nSAI2 kernel clock source B source selection\nSAI2 Peripheral Clocks Enable\nSAI2 Peripheral Clocks Enable During CSleep Mode\nSAI2 block reset\nSAI3 Peripheral Clocks Enable\nSAI3 Peripheral Clocks Enable During CSleep Mode\nSAI3 block reset\nSAI4 Autonomous mode enable\nSAI4 Peripheral Clocks Enable\nSAI4 Peripheral Clocks Enable During CSleep Mode\nSAI4 block reset\nSDMMC1 and SDMMC1 Delay Clock Enable\nSDMMC1 and SDMMC1 Delay Clock Enable During CSleep Mode\nSDMMC1 and SDMMC1 delay block reset\nSDMMC2 and SDMMC2 delay clock enable\nSDMMC2 and SDMMC2 Delay Clock Enable During CSleep Mode\nSDMMC2 and SDMMC2 Delay block reset\nSDMMC kernel clock source selection\nSystem reset from CPU reset flag\nSPDIFRX Peripheral Clocks Enable\nSPDIFRX Peripheral Clocks Enable During CSleep Mode\nSPDIFRX block reset\nSPDIFRX kernel clock source selection\nSPI/I2S1,2 and 3 kernel clock source selection\nSPI1 Peripheral Clocks Enable\nSPI1 Peripheral Clocks Enable During CSleep Mode\nSPI1 block reset\nSPI2 Peripheral Clocks Enable\nSPI2 Peripheral Clocks Enable During CSleep Mode\nSPI2 block reset\nSPI3 Peripheral Clocks Enable\nSPI3 Peripheral Clocks Enable During CSleep Mode\nSPI3 block reset\nSPI4 and 5 kernel clock source selection\nSPI4 Peripheral Clocks Enable\nSPI4 Peripheral Clocks Enable During CSleep Mode\nSPI4 block reset\nSPI5 Peripheral Clocks Enable\nSPI5 Peripheral Clocks Enable During CSleep Mode\nSPI5 block reset\nSPI6 Autonomous mode enable\nSPI6 Peripheral Clocks Enable\nSPI6 Peripheral Clocks Enable During CSleep Mode\nSPI6 block reset\nSPI6 kernel clock source selection\nSRAM1 block enable\nSRAM1 Clock Enable During CSleep Mode\nSRAM2 block enable\nSRAM2 Clock Enable During CSleep Mode\nSRAM3 block enable\nSRAM3 Clock Enable During CSleep Mode\nSRAM4 Autonomous mode enable\nSRAM4 Clock Enable During CSleep Mode\nKernel clock selection after a wake up from system Stop\nSystem clock selection after a wake up from system Stop\nSystem clock switch\nSWPMI Peripheral Clocks Enable\nSWPMI Peripheral Clocks Enable During CSleep Mode\nSWPMI block reset\nSWPMI kernel clock source selection\nSystem clock switch status\nSYSCFG peripheral clock enable\nSYSCFG peripheral clock enable during CSleep mode\nSYSCFG block reset\nTIM peripheral clock enable\nTIM12 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM13 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM14 peripheral clock enable during CSleep mode\nTIM block reset\nTIM15 peripheral clock enable\nTIM15 peripheral clock enable during CSleep mode\nTIM15 block reset\nTIM16 peripheral clock enable\nTIM16 peripheral clock enable during CSleep mode\nTIM16 block reset\nTIM17 peripheral clock enable\nTIM17 peripheral clock enable during CSleep mode\nTIM17 block reset\nTIM1 peripheral clock enable\nTIM1 peripheral clock enable during CSleep mode\nTIM1 block reset\nTIM23 block enable\nTIM23 block enable during CSleep Mode\nTIM23 block reset\nTIM24 block enable\nTIM24 block enable during CSleep Mode\nTIM24 block reset\nTIM peripheral clock enable\nTIM2 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM3 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM4 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM5 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM6 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM7 peripheral clock enable during CSleep mode\nTIM block reset\nTIM8 peripheral clock enable\nTIM8 peripheral clock enable during CSleep mode\nTIM8 block reset\nTimers clocks prescaler selection\nUART4 Peripheral Clocks Enable\nUART4 Peripheral Clocks Enable During CSleep Mode\nUART4 block reset\nUART5 Peripheral Clocks Enable\nUART5 Peripheral Clocks Enable During CSleep Mode\nUART5 block reset\nUART7 Peripheral Clocks Enable\nUART7 Peripheral Clocks Enable During CSleep Mode\nUART7 block reset\nUART8 Peripheral Clocks Enable\nUART8 Peripheral Clocks Enable During CSleep Mode\nUART8 block reset\nUART9 Peripheral Clocks Enable\nUART9 block reset\nUSART10 Peripheral Clocks Enable\nUSART10 block reset\nUSART1, 6, 9 and 10 kernel clock source selection\nUSART1 Peripheral Clocks Enable\nUSART1 Peripheral Clocks Enable During CSleep Mode\nUSART1 block reset\nUSART2/3, UART4,5, 7/8 (APB1) kernel clock source selection\nUSART2 Peripheral Clocks Enable\nUSART2 Peripheral Clocks Enable During CSleep Mode\nUSART2 block reset\nUSART3 Peripheral Clocks Enable\nUSART3 Peripheral Clocks Enable During CSleep Mode\nUSART3 block reset\nUSART6 Peripheral Clocks Enable\nUSART6 Peripheral Clocks Enable During CSleep Mode\nUSART6 block reset\nUSB_OTG_FS ULPI clock enable\nUSB_PHY2 clocks enable during CSleep mode\nUSB_OTG_FS Peripheral Clocks Enable\nUSB_OTG_FS peripheral clock enable during CSleep mode\nUSB_OTG_FS block reset\nUSB_OTG_HS ULPI clock enable\nUSB_PHY1 clock enable during CSleep mode\nUSB_OTG_HS Peripheral Clocks Enable\nUSB_OTG_HS peripheral clock enable during CSleep mode\nUSB_OTG_HS block reset\nUSBOTG 1 and 2 kernel clock source selection\nVREF Autonomous mode enable\nVREF peripheral clock enable\nVREF peripheral clock enable during CSleep mode\nVREF block reset\nWWDG1 reset scope control\nWWDG1 Clock Enable\nWWDG1 Clock Enable During CSleep Mode\nWindow Watchdog reset flag\nWWDG2 peripheral clock enable\nWWDG2 peripheral Clocks Enable During CSleep Mode\nSystem reset from CPU reset flag\nSPDIFRX Peripheral Clocks Enable\nSPDIFRX Peripheral Clocks Enable During CSleep Mode\nSPDIFRX block reset\nSPDIFRX kernel clock source selection\nSPI/I2S1,2 and 3 kernel clock source selection\nSPI1 Peripheral Clocks Enable\nSPI1 Peripheral Clocks Enable During CSleep Mode\nSPI1 block reset\nSPI2 Peripheral Clocks Enable\nSPI2 Peripheral Clocks Enable During CSleep Mode\nSPI2 block reset\nSPI3 Peripheral Clocks Enable\nSPI3 Peripheral Clocks Enable During CSleep Mode\nSPI3 block reset\nSPI4 and 5 kernel clock source selection\nSPI4 Peripheral Clocks Enable\nSPI4 Peripheral Clocks Enable During CSleep Mode\nSPI4 block reset\nSPI5 Peripheral Clocks Enable\nSPI5 Peripheral Clocks Enable During CSleep Mode\nSPI5 block reset\nSPI6 Autonomous mode enable\nSPI6 Peripheral Clocks Enable\nSPI6 Peripheral Clocks Enable During CSleep Mode\nSPI6 block reset\nSPI6 kernel clock source selection\nSRAM1 block enable\nSRAM1 Clock Enable During CSleep Mode\nSRAM2 block enable\nSRAM2 Clock Enable During CSleep Mode\nSRAM3 block enable\nSRAM3 Clock Enable During CSleep Mode\nSRAM4 Autonomous mode enable\nSRAM4 Clock Enable During CSleep Mode\nKernel clock selection after a wake up from system Stop\nSystem clock selection after a wake up from system Stop\nSystem clock switch\nSWPMI Peripheral Clocks Enable\nSWPMI Peripheral Clocks Enable During CSleep Mode\nSWPMI block reset\nSWPMI kernel clock source selection\nSystem clock switch status\nSYSCFG peripheral clock enable\nSYSCFG peripheral clock enable during CSleep mode\nSYSCFG block reset\nTIM peripheral clock enable\nTIM12 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM13 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM14 peripheral clock enable during CSleep mode\nTIM block reset\nTIM15 peripheral clock enable\nTIM15 peripheral clock enable during CSleep mode\nTIM15 block reset\nTIM16 peripheral clock enable\nTIM16 peripheral clock enable during CSleep mode\nTIM16 block reset\nTIM17 peripheral clock enable\nTIM17 peripheral clock enable during CSleep mode\nTIM17 block reset\nTIM1 peripheral clock enable\nTIM1 peripheral clock enable during CSleep mode\nTIM1 block reset\nTIM23 block enable\nTIM23 block enable during CSleep Mode\nTIM23 block reset\nTIM24 block enable\nTIM24 block enable during CSleep Mode\nTIM24 block reset\nTIM peripheral clock enable\nTIM2 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM3 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM4 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM5 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM6 peripheral clock enable during CSleep mode\nTIM block reset\nTIM peripheral clock enable\nTIM7 peripheral clock enable during CSleep mode\nTIM block reset\nTIM8 peripheral clock enable\nTIM8 peripheral clock enable during CSleep mode\nTIM8 block reset\nTimers clocks prescaler selection\nUART4 Peripheral Clocks Enable\nUART4 Peripheral Clocks Enable During CSleep Mode\nUART4 block reset\nUART5 Peripheral Clocks Enable\nUART5 Peripheral Clocks Enable During CSleep Mode\nUART5 block reset\nUART7 Peripheral Clocks Enable\nUART7 Peripheral Clocks Enable During CSleep Mode\nUART7 block reset\nUART8 Peripheral Clocks Enable\nUART8 Peripheral Clocks Enable During CSleep Mode\nUART8 block reset\nUART9 Peripheral Clocks Enable\nUART9 block reset\nUSART10 Peripheral Clocks Enable\nUSART10 block reset\nUSART1, 6, 9 and 10 kernel clock source selection\nUSART1 Peripheral Clocks Enable\nUSART1 Peripheral Clocks Enable During CSleep Mode\nUSART1 block reset\nUSART2/3, UART4,5, 7/8 (APB1) kernel clock source selection\nUSART2 Peripheral Clocks Enable\nUSART2 Peripheral Clocks Enable During CSleep Mode\nUSART2 block reset\nUSART3 Peripheral Clocks Enable\nUSART3 Peripheral Clocks Enable During CSleep Mode\nUSART3 block reset\nUSART6 Peripheral Clocks Enable\nUSART6 Peripheral Clocks Enable During CSleep Mode\nUSART6 block reset\nUSB_OTG_FS ULPI clock enable\nUSB_PHY2 clocks enable during CSleep mode\nUSB_OTG_FS Peripheral Clocks Enable\nUSB_OTG_FS peripheral clock enable during CSleep mode\nUSB_OTG_FS block reset\nUSB_OTG_HS ULPI clock enable\nUSB_PHY1 clock enable during CSleep mode\nUSB_OTG_HS Peripheral Clocks Enable\nUSB_OTG_HS peripheral clock enable during CSleep mode\nUSB_OTG_HS block reset\nUSBOTG 1 and 2 kernel clock source selection\nVREF Autonomous mode enable\nVREF peripheral clock enable\nVREF peripheral clock enable during CSleep mode\nVREF block reset\nWWDG1 reset scope control\nWWDG1 Clock Enable\nWWDG1 Clock Enable During CSleep Mode\nWindow Watchdog reset flag\nWWDG2 peripheral clock enable\nWWDG2 peripheral Clocks Enable During CSleep Mode\ncsi_ker selected as peripheral clock\ncsi_ker selected as peripheral clock\ncsi_ker selected as peripheral clock\ncsi_ker selected as peripheral clock\nCSI selected for micro-controller clock output\nCSI selected as peripheral clock\nCSI selected as PLL clock\ncsi_ker selected as peripheral clock\ncsi_ker selected as peripheral clock\nCSI selected as wake up clock from system Stop\nCSI selected as system clock\ncsi_ker selected as peripheral clock\ncsi_ker selected as peripheral clock\nThe HRTIM prescaler clock source is the CPU clock (c_ck)\nTimer kernel clock equal to 2x pclk by default\nTimer kernel clock equal to 4x pclk by default\nNo clock sent to DIVMx dividers and PLLs\nNo clock\nDisable the kernel clock\nsys_ck not divided\nNo division\nDivide by 1\nrcc_hclk not divided\nDivide by 10\nDivide by 11\nDivide by 12\nsys_ck divided by 128\nDivide by 13\nDivide by 14\nDivide by 15\nsys_ck divided by 16\nrcc_hclk divided by 16\nsys_ck divided by 2\nDivision by 2\nDivide by 2\nrcc_hclk divided by 2\nsys_ck divided by 256\nDivide by 3\nsys_ck divided by 4\nDivision by 4\nDivide by 4\nrcc_hclk divided by 4\nDivide by 5\nsys_ck divided by 512\nDivide by 6\nsys_ck divided by 64\nDivide by 7\nsys_ck divided by 8\nDivision by 8\nDivide by 8\nrcc_hclk divided by 8\nDivide by 9\nrcc_hclk3 selected as peripheral clock\nHigh driving capability\nHSE selected as peripheral clock\nHSE selected for micro-controller clock output\nHSE selected for micro-controller clock output\nHSE selected as peripheral clock\nHSE selected as PLL clock\nHSE oscillator clock divided by a prescaler used as RTC …\nHSE selected as peripheral clock\nHSE selected as peripheral clock\nHSE selected as system clock\nhsi_ker selected as peripheral clock\nhsi_ker selected as peripheral clock\nhsi_ker selected as peripheral clock\nHSI selected for micro-controller clock output\nHSI selected as peripheral clock\nHSI selected as PLL clock\nhsi_ker selected as peripheral clock\nhsi_ker selected as peripheral clock\nhsi_ker selected as peripheral clock\nHSI selected as wake up clock from system Stop\nHSI selected as system clock\nhsi_ker selected as peripheral clock\nhsi_ker selected as peripheral clock\nhsi_ker selected as peripheral clock\nHSI48 selected for micro-controller clock output\nHSI48 selected as peripheral clock\nHSI48 selected as peripheral clock\ni2s_ckin selected as peripheral clock\nI2S_CKIN selected as peripheral clock\nLow driving capability\nLSE selected as peripheral clock\nLSE selected as peripheral clock\nLSE selected as peripheral clock\nLSE selected as peripheral clock\nLSE selected for micro-controller clock output\nLSE selected as peripheral clock\nLSE oscillator clock used as RTC clock\nLSE selected as peripheral clock\nLSE selected as peripheral clock\nLSI selected as peripheral clock\nLSI selected as peripheral clock\nLSI selected as peripheral clock\nLSI selected for micro-controller clock output\nLSI selected as peripheral clock\nLSI oscillator clock used as RTC clock\nMedium high driving capability\nMedium low driving capability\nVCO frequency range 150 to 420 MHz\nrcc_pclk1 selected as peripheral clock\nrcc_pclk1 selected as peripheral clock\npclk selected as peripheral clock\nrcc_pclk1 selected as peripheral clock\nrcc_pclk2 selected as peripheral clock\nAPB2 clock selected as peripheral clock\nrcc_pclk2 selected as peripheral clock\nrcc_pclk4 selected as peripheral clock\nrcc_pclk4 selected as peripheral clock\nrcc_pclk_d4 selected as peripheral clock\nrcc_pclk4 selected as peripheral clock\nPER selected as peripheral clock\nPER selected as peripheral clock\nPER selected as peripheral clock\nPER selected as peripheral clock\nPER selected as peripheral clock\nPER selected as peripheral clock\npll1_p selected for micro-controller clock output\nPLL1 selected as system clock\npll1_q selected as peripheral clock\npll1_q selected as peripheral clock\npll1_q selected for micro-controller clock output\npll1_q selected as peripheral clock\npll1_q selected as peripheral clock\npll1_q selected as peripheral clock\npll1_q selected as peripheral clock\npll1_q selected as peripheral clock\npll1_q selected as peripheral clock\npll2_p selected as peripheral clock\npll2_p selected as peripheral clock\npll2_p selected as peripheral clock\npll2_p selected for micro-controller clock output\npll2_p selected as peripheral clock\npll2_p selected as peripheral clock\npll2_q selected as peripheral clock\npll2_q selected as peripheral clock\npll2_q selected as peripheral clock\npll2_q selected as peripheral clock\npll2_q selected as peripheral clock\npll2_q selected as peripheral clock\npll2_r selected as peripheral clock\npll2_r selected as peripheral clock\npll2_r selected as peripheral clock\npll3_p selected as peripheral clock\npll3_p selected as peripheral clock\npll3_q selected as peripheral clock\npll3_q selected as peripheral clock\npll3_q selected as peripheral clock\npll3_q selected as peripheral clock\npll3_q selected as peripheral clock\npll3_q selected as peripheral clock\npll3_r selected as peripheral clock\npll3_r selected as peripheral clock\npll3_r selected as peripheral clock\npll3_r selected as peripheral clock\npll3_r selected as peripheral clock\npll3_r selected as peripheral clock\nFrequency is between 1 and 2 MHz\nFrequency is between 2 and 4 MHz\nFrequency is between 4 and 8 MHz\nFrequency is between 8 and 16 MHz\nSystem clock selected as peripheral clock\nSystem clock selected for micro-controller clock output\nThe HRTIM prescaler clock source is the same as other …\nVCO frequency range 192 to 836 MHz\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRandom number generator\ncontrol register\ndata register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nstatus register\ncontrol register\nstatus register\nClock error current status\nClock error detection\nClock error interrupt status\nData ready\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterrupt enable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRandom number generator enable\nSeed error current status\nSeed error interrupt status\nClock error current status\nClock error detection\nClock error interrupt status\nData ready\nInterrupt enable\nRandom number generator enable\nSeed error current status\nSeed error interrupt status\nReal-time clock\nAlarm register\nAlarm sub second register\nBackup register\nCalibration register\nControl register\nDate register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialization and status register\nOption register\nPrescaler register\nShift control register\nSub second register\nTamper configuration register\nTime register\nTimestamp date register\nTimestamp sub second register\nTimestamp time register\nWrite protection register\nWakeup timer register\nAlarm register\nAlarm sub second register\nBackup register\nCalibration register\nControl register\nDate register\nInitialization and status register\nOption register\nPrescaler register\nShift control register\nSub second register\nTamper configuration register\nTime register\nTimestamp date register\nTimestamp sub second register\nTimestamp time register\nWrite protection register\nWakeup timer register\nAdd 1 hour (summer time change)\nAdd one second\nAlarm enable\nAlarm flag\nAlarm interrupt enable\nAlarm write enabled\nBKP\nBackup\nBypass the shadow registers\nCalibration minus\nIncrease frequency of RTC by 488.5 ppm\nUse a 16-second calibration cycle period\nUse an 8-second calibration cycle period\nCalibration output enable\nCalibration output selection\nDate tens in BCD format\nDate tens in BCD format\nDate tens in BCD format\nDate units or day in BCD format\nDate units in BCD format\nDate units in BCD format\nHour format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHour tens in BCD format\nHour tens in BCD format\nHour tens in BCD format\nHour units in BCD format\nHour units in BCD format\nHour units in BCD format\nEnter Initialization mode\nInitialization flag\nInitialization status flag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTimestamp on internal event enable\nInternal time-stamp flag\nWrite protection key\nMask the most-significant bits starting at this bit\nMinute tens in BCD format\nMinute tens in BCD format\nMinute tens in BCD format\nMinute units in BCD format\nMinute units in BCD format\nMinute units in BCD format\nAlarm seconds mask\nAlarm minutes mask\nAlarm hours mask\nAlarm date mask\nMonth tens in BCD format\nMonth tens in BCD format\nMonth units in BCD format\nMonth units in BCD format\nOutput selection\nAM/PM notation\nAM/PM notation\nAM/PM notation\nOutput polarity\nAsynchronous prescaler factor\nSynchronous prescaler factor\nRecalibration pending flag\nReference clock detection enable (50 or 60 Hz)\nRegisters synchronization flag\nRTC_ALARM output type on PC13\nRTC_OUT remap\nAdd 1 hour (summer time change)\nAdd one second\nAlarm enable\nAlarm flag\nAlarm interrupt enable\nAlarm write enabled\nBKP\nBackup\nBypass the shadow registers\nCalibration minus\nIncrease frequency of RTC by 488.5 ppm\nUse a 16-second calibration cycle period\nUse an 8-second calibration cycle period\nCalibration output enable\nCalibration output selection\nDate tens in BCD format\nDate tens in BCD format\nDate tens in BCD format\nDate units or day in BCD format\nDate units in BCD format\nDate units in BCD format\nHour format\nHour tens in BCD format\nHour tens in BCD format\nHour tens in BCD format\nHour units in BCD format\nHour units in BCD format\nHour units in BCD format\nEnter Initialization mode\nInitialization flag\nInitialization status flag\nTimestamp on internal event enable\nInternal time-stamp flag\nWrite protection key\nMask the most-significant bits starting at this bit\nMinute tens in BCD format\nMinute tens in BCD format\nMinute tens in BCD format\nMinute units in BCD format\nMinute units in BCD format\nMinute units in BCD format\nAlarm seconds mask\nAlarm minutes mask\nAlarm hours mask\nAlarm date mask\nMonth tens in BCD format\nMonth tens in BCD format\nMonth units in BCD format\nMonth units in BCD format\nOutput selection\nAM/PM notation\nAM/PM notation\nAM/PM notation\nOutput polarity\nAsynchronous prescaler factor\nSynchronous prescaler factor\nRecalibration pending flag\nReference clock detection enable (50 or 60 Hz)\nRegisters synchronization flag\nRTC_ALARM output type on PC13\nRTC_OUT remap\nShift operation pending\nSub seconds value\nSub second value\nSub second value\nSecond tens in BCD format\nSecond tens in BCD format\nSecond tens in BCD format\nSecond units in BCD format\nSecond units in BCD format\nSecond units in BCD format\nSubtract 1 hour (winter time change)\nSubtract a fraction of a second\nTamper detection enable\nTamper detection flag\nTamper filter count\nTamper sampling frequency\nTamper interrupt enable\nTamper precharge duration\nTamper pull-up disable\nActive level for tamper\nActivate timestamp on tamper detection event\nTamper interrupt enable\nTamper mask flag\nTamper no erase\nTimestamp enable\nTimestamp event active edge\nTimestamp flag\nTimestamp interrupt enable\nTimestamp overflow flag\nWeek day selection\nWeek day units\nWeek day units\nWakeup clock selection\nWakeup auto-reload value bits\nWakeup timer enable\nWakeup timer flag\nWakeup timer interrupt enable\nWakeup timer write enabled\nYear tens in BCD format\nYear units in BCD format\nShift operation pending\nSub seconds value\nSub second value\nSub second value\nSecond tens in BCD format\nSecond tens in BCD format\nSecond tens in BCD format\nSecond units in BCD format\nSecond units in BCD format\nSecond units in BCD format\nSubtract 1 hour (winter time change)\nSubtract a fraction of a second\nTamper detection enable\nTamper detection flag\nTamper filter count\nTamper sampling frequency\nTamper interrupt enable\nTamper precharge duration\nTamper pull-up disable\nActive level for tamper\nActivate timestamp on tamper detection event\nTamper interrupt enable\nTamper mask flag\nTamper no erase\nTimestamp enable\nTimestamp event active edge\nTimestamp flag\nTimestamp interrupt enable\nTimestamp overflow flag\nWeek day selection\nWeek day units\nWeek day units\nWakeup clock selection\nWakeup auto-reload value bits\nWakeup timer enable\nWakeup timer flag\nWakeup timer interrupt enable\nWakeup timer write enabled\nYear tens in BCD format\nYear units in BCD format\nAlarm A output enabled\nAlarm B output enabled\nAM or 24-hour format\nAM or 24-hour format\nAM/PM hour format\nCalibration output is 1 Hz (with default prescaler setting)\nCalibration output is 512 Hz (with default prescaler …\nck_spre (usually 1 Hz) clock is selected\nck_spre (usually 1 Hz) clock is selected and 2^16 is added …\n1 RTCCLK cycle\n2 RTCCLK cycles\n4 RTCCLK cycles\n8 RTCCLK cycles\nDU[3:0] represents the date units\nOutput disabled\nDisable precharge of RTC_TAMPx pins\nRTCCLK / 1024 (32 Hz when RTCCLK = 32768 Hz)\nRTC/16 clock is selected\nRTCCLK / 16384 (2 Hz when RTCCLK = 32768 Hz)\nRTC/2 clock is selected\nRTCCLK / 2048 (16 Hz when RTCCLK = 32768 Hz)\nRTCCLK / 256 (128 Hz when RTCCLK = 32768 Hz)\nRTCCLK / 32768 (1 Hz when RTCCLK = 32768 Hz)\nRTC/4 clock is selected\nRTCCLK / 4096 (8 Hz when RTCCLK = 32768 Hz)\nRTCCLK / 512 (64 Hz when RTCCLK = 32768 Hz)\nRTC/8 clock is selected\nRTCCLK / 8192 (4 Hz when RTCCLK = 32768 Hz)\nWhen CALW8 is set to ‘1’, the 8-second calibration …\nPrecharge RTC_TAMPx pins before sampling (enable internal …\nIf TAMPFLT = 00: RTC_TAMPx input staying high triggers a …\nRTC_TS input falling edge generates a time-stamp event\nThe pin is high when ALRAF/ALRBF/WUTF is asserted …\nTamper event is activated on edge of RTC_TAMPx input …\nOne RTCCLK pulse is effectively inserted every 2^11 pulses …\nThe pin is low when ALRAF/ALRBF/WUTF is asserted …\nNo RTCCLK pulses are added\nDate/day don’t care in Alarm comparison\nThe RECALPF status flag is automatically set to 1 when …\nPM\nPM\nIf TAMPFLT = 00: RTC_TAMPx input rising edge triggers a …\nRTC_TS input rising edge generates a time-stamp event\nTamper event is activated after 2 consecutive samples at …\nTamper event is activated after 4 consecutive samples at …\nTamper event is activated after 8 consecutive samples at …\nWhen CALW16 is set to ‘1’, the 16-second calibration …\nAlarm set if the date/day match\n24 hour/day format\nWakeup output enabled\nDU[3:0] represents the week day. DT[1:0] is don’t care\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCluster CH%s, containing ?CR1, ?CR2, ?FRCR, ?SLOTR, ?IM, …\nSerial audio interface\nCluster CH%s, containing ?CR1, ?CR2, ?FRCR, ?SLOTR, ?IM, …\nClear flag register\nConfiguration register 1\nConfiguration register 2\nData register\nThis register has no meaning in AC97 and SPDIF audio …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal configuration register\nInterrupt mask register 2\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPDM control register\nPDM delay register\nThis register has no meaning in AC97 and SPDIF audio …\nStatus register\nClear flag register\nConfiguration register 1\nConfiguration register 2\nData register\nThis register has no meaning in AC97 and SPDIF audio …\nGlobal configuration register\nInterrupt mask register 2\nPDM control register\nPDM delay register\nThis register has no meaning in AC97 and SPDIF audio …\nStatus register\nAnticipated frame synchronization detection. This bit is …\nAnticipated frame synchronization detection interrupt …\nClear anticipated frame synchronization detection flag. …\nClear Codec not ready flag. This bit is write only. …\nClock enable of bitstream clock number 1\nClock strobing edge. This bit is set and cleared by …\nClear late frame synchronization detection flag. This bit …\nMute detection flag. This bit is write only. Programming …\nCodec not ready. This bit is read only. This bit is used …\nCodec not ready interrupt enable (AC97). This bit is set …\nCompanding mode. These bits are set and cleared by …\nClear overrun / underrun. This bit is write only. …\nComplement bit. This bit is set and cleared by software. …\nClear wrong clock configuration flag. This bit is write …\nData A write to this register loads the FIFO provided the …\nDelay line adjust for first microphone of pair 1\nDelay line adjust for second microphone of pair 1\nDMA enable. This bit is set and cleared by software. Note: …\nData size. These bits are set and cleared by software. …\nFirst bit offset These bits are set and cleared by …\nFIFO flush. This bit is set by software. It is always read …\nFIFO level threshold. This bit is read only. The FIFO …\nFIFO request. This bit is read only. The request depends …\nFIFO request interrupt enable. This bit is set and cleared …\nFrame length. These bits are set and cleared by software. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrame synchronization active level length. These bits are …\nFrame synchronization definition. This bit is set and …\nFrame synchronization offset. This bit is set and cleared …\nFrame synchronization polarity. This bit is set and …\nFIFO threshold. This bit is set and cleared by software.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLate frame synchronization detection. This bit is read …\nLate frame synchronization detection interrupt enable. …\nLeast significant bit first. This bit is set and cleared …\nMaster clock divider. These bits are set and cleared by …\nMaster clock generation enable\nNumber of microphones\nSAIx audio block mode immediately\nMono mode. This bit is set and cleared by software. It is …\nMute. This bit is set and cleared by software. It is …\nMute counter. These bits are set and cleared by software. …\nMute detection. This bit is read only. This flag is set if …\nMute detection interrupt enable. This bit is set and …\nMute value. This bit is set and cleared by software.It …\nNumber of slots in an audio frame. These bits are set and …\nNo fixed divider between MCLK and FS\nOversampling ratio for master clock\nOutput drive. This bit is set and cleared by software. …\nOverrun / underrun. This bit is read only. The overrun and …\nOverrun/underrun interrupt enable. This bit is set and …\nPDM enable\nProtocol configuration. These bits are set and cleared by …\nAudio block enable where x is A or B. This bit is set by …\nAnticipated frame synchronization detection. This bit is …\nAnticipated frame synchronization detection interrupt …\nClear anticipated frame synchronization detection flag. …\nClear Codec not ready flag. This bit is write only. …\nClock enable of bitstream clock number 1\nClock strobing edge. This bit is set and cleared by …\nClear late frame synchronization detection flag. This bit …\nMute detection flag. This bit is write only. Programming …\nCodec not ready. This bit is read only. This bit is used …\nCodec not ready interrupt enable (AC97). This bit is set …\nCompanding mode. These bits are set and cleared by …\nClear overrun / underrun. This bit is write only. …\nComplement bit. This bit is set and cleared by software. …\nClear wrong clock configuration flag. This bit is write …\nData A write to this register loads the FIFO provided the …\nDelay line adjust for first microphone of pair 1\nDelay line adjust for second microphone of pair 1\nDMA enable. This bit is set and cleared by software. Note: …\nData size. These bits are set and cleared by software. …\nFirst bit offset These bits are set and cleared by …\nFIFO flush. This bit is set by software. It is always read …\nFIFO level threshold. This bit is read only. The FIFO …\nFIFO request. This bit is read only. The request depends …\nFIFO request interrupt enable. This bit is set and cleared …\nFrame length. These bits are set and cleared by software. …\nFrame synchronization active level length. These bits are …\nFrame synchronization definition. This bit is set and …\nFrame synchronization offset. This bit is set and cleared …\nFrame synchronization polarity. This bit is set and …\nFIFO threshold. This bit is set and cleared by software.\nLate frame synchronization detection. This bit is read …\nLate frame synchronization detection interrupt enable. …\nLeast significant bit first. This bit is set and cleared …\nMaster clock divider. These bits are set and cleared by …\nMaster clock generation enable\nNumber of microphones\nSAIx audio block mode immediately\nMono mode. This bit is set and cleared by software. It is …\nMute. This bit is set and cleared by software. It is …\nMute counter. These bits are set and cleared by software. …\nMute detection. This bit is read only. This flag is set if …\nMute detection interrupt enable. This bit is set and …\nMute value. This bit is set and cleared by software.It …\nNumber of slots in an audio frame. These bits are set and …\nNo fixed divider between MCLK and FS\nOversampling ratio for master clock\nOutput drive. This bit is set and cleared by software. …\nOverrun / underrun. This bit is read only. The overrun and …\nOverrun/underrun interrupt enable. This bit is set and …\nPDM enable\nProtocol configuration. These bits are set and cleared by …\nAudio block enable where x is A or B. This bit is set by …\nSlot enable. These bits are set and cleared by software. …\nSlot size This bits is set and cleared by software. The …\nSynchronization enable. These bits are set and cleared by …\nSynchronization inputs\nSynchronization outputs These bits are set and cleared by …\nTristate management on data line. This bit is set and …\nWrong clock configuration flag. This bit is read only. …\nWrong clock configuration interrupt enable. This bit is …\nSlot enable. These bits are set and cleared by software. …\nSlot size This bits is set and cleared by software. The …\nSynchronization enable. These bits are set and cleared by …\nSynchronization inputs\nSynchronization outputs These bits are set and cleared by …\nTristate management on data line. This bit is set and …\nWrong clock configuration flag. This bit is read only. …\nWrong clock configuration interrupt enable. This bit is …\nAC’97 protocol\nActive slot\nA-Law algorithm\naudio sub-block in asynchronous mode\nFS is asserted one bit before the first bit of the slot 0\n10 bits\n16 bits\n16-bit\n20 bits\n24 bits\n32 bits\n32-bit\n8 bits\nClock configuration is correct\nThe slot size is equivalent to the data size (specified in …\nFIFO empty\nFIFO empty\naudio sub-block is synchronous with an external SAI …\nData strobing edge is falling edge of SCK\nFS is active low (falling edge)\nFree protocol. Free protocol allows to use the powerful …\nFIFO full\nFIFO full\nAudio block output driven immediately after the setting of …\nInactive slot\naudio sub-block is synchronous with the other internal …\nData are transferred with LSB first\nMCLK output is enabled. Forces the ratio between FS and …\nMaster receiver\nMaster transmitter\nMono mode\nData are transferred with MSB first\nμ-Law algorithm\nNo companding algorithm\nMCLK output enable set by the MCKEN bit (where present, …\nExternal AC’97 Codec is not ready\n1’s complement representation\nFS is asserted on the first bit of the slot 0\nAudio block output driven when SAIEN is set\nFIFO &lt;= 1⁄4 but not empty\n1⁄4 FIFO\n1⁄4 &lt; FIFO &lt;= 1⁄2\n1⁄2 FIFO\n1⁄2 &lt; FIFO &lt;= 3⁄4\n3⁄4 FIFO\n3⁄4 &lt; FIFO but not full\nExternal AC’97 Codec is ready\nData strobing edge is rising edge of SCK\nFS is active high (rising edge)\nLast values are sent during the mute mode\nBit value 0 is sent during the mute mode\nSlave receiver\nSlave transmitter\nSPDIF protocol\nStereo mode\n2’s complement representation\nClock configuration does not respect the rule concerning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSDMMC\nThe SDMMC_ACKTIMER register contains the acknowledgment …\nThe SDMMC_ARGR register contains a 32-bit command …\nThe SDMMC_CLKCR register controls the SDMMC_CK output …\nThe SDMMC_CMDR register contains the command index and …\nThe SDMMC_DCNTR register loads the value from the data …\nThe SDMMC_DCTRL register control the data path state …\nThe SDMMC_DLENR register contains the number of data bytes …\nThe SDMMC_DTIMER register contains the data timeout …\nThe receive and transmit FIFOs can be only read or written …\nReturns the argument unchanged.\nThe SDMMC_ICR register is a write-only register. Writing a …\nSDMMC IP identification register\nThe SDMMC_IDMABASE0R register contains the memory buffer …\nThe SDMMC_IDMABASE1R register contains the double buffer …\nThe SDMMC_IDMABSIZER register contains the buffers size …\nThe receive and transmit FIFOs can be read or written as …\nCalls <code>U::from(self)</code>.\nThe interrupt mask register determines which status flags …\nSDMMC power control register\nSDMMC command response register\nThe SDMMC_RESP1/2/3/4R registers contain the status of a …\nThe SDMMC_STAR register is a read-only register. It …\nSDMMC IP version register\nThe SDMMC_ACKTIMER register contains the acknowledgment …\nThe SDMMC_ARGR register contains a 32-bit command …\nThe SDMMC_CLKCR register controls the SDMMC_CK output …\nThe SDMMC_CMDR register contains the command index and …\nThe SDMMC_DCNTR register loads the value from the data …\nThe SDMMC_DCTRL register control the data path state …\nThe SDMMC_DLENR register contains the number of data bytes …\nThe SDMMC_DTIMER register contains the data timeout …\nThe receive and transmit FIFOs can be only read or written …\nThe SDMMC_ICR register is a write-only register. Writing a …\nSDMMC IP identification register\nThe SDMMC_IDMABASE0R register contains the memory buffer …\nThe SDMMC_IDMABASE1R register contains the double buffer …\nThe SDMMC_IDMABSIZER register contains the buffers size …\nThe receive and transmit FIFOs can be read or written as …\nThe interrupt mask register determines which status flags …\nSDMMC power control register\nSDMMC command response register\nThe SDMMC_RESP1/2/3/4R registers contain the status of a …\nThe SDMMC_STAR register is a read-only register. It …\nSDMMC IP version register\nBoot acknowledgment received (boot acknowledgment check …\nACKFAIL flag clear bit Set by software to clear the …\nAcknowledgment Fail interrupt enable Set and cleared by …\nBoot acknowledgment timeout period This bit can only be …\nBoot acknowledgment timeout. Interrupt flag is cleared by …\nACKTIMEOUT flag clear bit Set by software to clear the …\nAcknowledgment timeout interrupt enable Set and cleared by …\nEnable the reception of the boot acknowledgment. This bit …\nEnable boot mode procedure.\nSelect the boot mode procedure to be used. This bit can …\nBus speed mode selection between DS, HS, SDR12, SDR25 and …\nInverted value of SDMMC_D0 line (Busy), sampled at the end …\nend of SDMMC_D0 Busy following a CMD response detected. …\nBUSYD0END flag clear bit Set by software to clear the …\nBUSYD0END interrupt enable Set and cleared by software to …\nsee Table 432\nCommand response received (CRC check failed). Interrupt …\nCCRCFAIL flag clear bit Set by software to clear the …\nCommand CRC fail interrupt enable Set and cleared by …\nSDMMC_CK stopped in Voltage switch procedure. Interrupt …\nCKSTOP flag clear bit Set by software to clear the CKSTOP …\nVoltage Switch clock stopped interrupt enable Set and …\nClock divide factor This bit can only be written when the …\nCommand argument. These bits can only be written by …\nCommand index. This bit can only be written by firmware …\nCommand response received (CRC check passed, or no CRC). …\nCMDREND flag clear bit Set by software to clear the …\nCommand response received interrupt enable Set and cleared …\nCommand sent (no response required). Interrupt flag is …\nCMDSENT flag clear bit Set by software to clear the …\nCommand sent interrupt enable Set and cleared by software …\nThe CPSM treats the command as a Stop Transmission command …\nThe CPSM treats the command as a Suspend or Resume command …\nThe CPSM treats the command as a data transfer command, …\nCommand path state machine active, i.e. not in Idle state. …\nCommand path state machine (CPSM) Enable bit This bit is …\nCommand response timeout. Interrupt flag is cleared by …\nCTIMEOUT flag clear bit Set by software to clear the …\nCommand timeout interrupt enable Set and cleared by …\nData transfer aborted by CMD12. Interrupt flag is cleared …\nDABORT flag clear bit Set by software to clear the DABORT …\nData transfer aborted interrupt enable Set and cleared by …\nData count value When read, the number of remaining data …\nData transfer ended correctly. (data counter, DATACOUNT is …\nDATAEND flag clear bit Set by software to clear the …\nData end interrupt enable Set and cleared by software to …\nData length value This register can only be written by …\nData and R1b busy timeout period This bit can only be …\nData block sent/received. (CRC check passed) and DPSM …\nDBCKEND flag clear bit Set by software to clear the …\nData block end interrupt enable Set and cleared by …\nData block size This bit can only be written by firmware …\nData block sent/received (CRC check failed). Interrupt …\nDCRCFAIL flag clear bit Set by software to clear the …\nData CRC fail interrupt enable Set and cleared by software …\nData rate signaling selection This bit can only be written …\nData transfer Hold. Interrupt flag is cleared by writing …\nDHOLD flag clear bit Set by software to clear the DHOLD …\nData hold interrupt enable Set and cleared by software to …\nData and command direction signals polarity selection. …\nData path state machine active, i.e. not in Idle state. …\nData transfer direction selection This bit can only be …\nData transfer enable bit This bit can only be written by …\nHold new data block transmission and reception in the …\nData timeout. Interrupt flag is cleared by writing …\nDTIMEOUT flag clear bit Set by software to clear the …\nData timeout interrupt enable Set and cleared by software …\nData transfer mode selection. This bit can only be written …\nReceive and transmit FIFO data This register can only be …\nFIFO reset, will flush any remaining data. This bit can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHardware flow control enable This bit can only be written …\nDouble buffer mode active buffer indication This bit can …\nBuffer 0 memory base address bits [31:2], shall be word …\nBuffer 1 memory base address, shall be word aligned (bit …\nBuffer mode selection. This bit can only be written by …\nNumber of transfers per buffer. This 8-bit value shall be …\nIDMA buffer transfer complete. interrupt flag is cleared …\nIDMA buffer transfer complete clear bit Set by software to …\nIDMA buffer transfer complete interrupt enable Set and …\nIDMA enable This bit can only be written by firmware when …\nIDMA transfer error. Interrupt flag is cleared by writing …\nIDMA transfer error clear bit Set by software to clear the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSDMMC IP identification.\nIP major revision number.\nIP minor revision number.\nSDMMC_CK dephasing selection bit for data and Command. …\nSDMMC state control bits. These bits can only be written …\nPower saving configuration bit This bit can only be …\nResponse command index\nRead wait mode. This bit can only be written by firmware …\nRead wait start. If this bit is set, read wait operation …\nRead wait stop This bit is written by firmware and auto …\nReceive FIFO empty This is a hardware status flag only, …\nReceive FIFO full This bit is cleared when one FIFO …\nRx FIFO full interrupt enable Set and cleared by software …\nReceive FIFO half full There are at least half the number …\nRx FIFO half full interrupt enable Set and cleared by …\nReceived FIFO overrun error or IDMA write transfer error. …\nRXOVERR flag clear bit Set by software to clear the …\nRx FIFO overrun error interrupt enable Set and cleared by …\nSD I/O interrupt enable functions This bit can only be …\nSDIO interrupt received. Interrupt flag is cleared by …\nSDIOIT flag clear bit Set by software to clear the SDIOIT …\nSDIO mode interrupt received interrupt enable Set and …\nReceive clock selection. These bits can only be written …\nBoot acknowledgment received (boot acknowledgment check …\nACKFAIL flag clear bit Set by software to clear the …\nAcknowledgment Fail interrupt enable Set and cleared by …\nBoot acknowledgment timeout period This bit can only be …\nBoot acknowledgment timeout. Interrupt flag is cleared by …\nACKTIMEOUT flag clear bit Set by software to clear the …\nAcknowledgment timeout interrupt enable Set and cleared by …\nEnable the reception of the boot acknowledgment. This bit …\nEnable boot mode procedure.\nSelect the boot mode procedure to be used. This bit can …\nBus speed mode selection between DS, HS, SDR12, SDR25 and …\nInverted value of SDMMC_D0 line (Busy), sampled at the end …\nend of SDMMC_D0 Busy following a CMD response detected. …\nBUSYD0END flag clear bit Set by software to clear the …\nBUSYD0END interrupt enable Set and cleared by software to …\nsee Table 432\nCommand response received (CRC check failed). Interrupt …\nCCRCFAIL flag clear bit Set by software to clear the …\nCommand CRC fail interrupt enable Set and cleared by …\nSDMMC_CK stopped in Voltage switch procedure. Interrupt …\nCKSTOP flag clear bit Set by software to clear the CKSTOP …\nVoltage Switch clock stopped interrupt enable Set and …\nClock divide factor This bit can only be written when the …\nCommand argument. These bits can only be written by …\nCommand index. This bit can only be written by firmware …\nCommand response received (CRC check passed, or no CRC). …\nCMDREND flag clear bit Set by software to clear the …\nCommand response received interrupt enable Set and cleared …\nCommand sent (no response required). Interrupt flag is …\nCMDSENT flag clear bit Set by software to clear the …\nCommand sent interrupt enable Set and cleared by software …\nThe CPSM treats the command as a Stop Transmission command …\nThe CPSM treats the command as a Suspend or Resume command …\nThe CPSM treats the command as a data transfer command, …\nCommand path state machine active, i.e. not in Idle state. …\nCommand path state machine (CPSM) Enable bit This bit is …\nCommand response timeout. Interrupt flag is cleared by …\nCTIMEOUT flag clear bit Set by software to clear the …\nCommand timeout interrupt enable Set and cleared by …\nData transfer aborted by CMD12. Interrupt flag is cleared …\nDABORT flag clear bit Set by software to clear the DABORT …\nData transfer aborted interrupt enable Set and cleared by …\nData count value When read, the number of remaining data …\nData transfer ended correctly. (data counter, DATACOUNT is …\nDATAEND flag clear bit Set by software to clear the …\nData end interrupt enable Set and cleared by software to …\nData length value This register can only be written by …\nData and R1b busy timeout period This bit can only be …\nData block sent/received. (CRC check passed) and DPSM …\nDBCKEND flag clear bit Set by software to clear the …\nData block end interrupt enable Set and cleared by …\nData block size This bit can only be written by firmware …\nData block sent/received (CRC check failed). Interrupt …\nDCRCFAIL flag clear bit Set by software to clear the …\nData CRC fail interrupt enable Set and cleared by software …\nData rate signaling selection This bit can only be written …\nData transfer Hold. Interrupt flag is cleared by writing …\nDHOLD flag clear bit Set by software to clear the DHOLD …\nData hold interrupt enable Set and cleared by software to …\nData and command direction signals polarity selection. …\nData path state machine active, i.e. not in Idle state. …\nData transfer direction selection This bit can only be …\nData transfer enable bit This bit can only be written by …\nHold new data block transmission and reception in the …\nData timeout. Interrupt flag is cleared by writing …\nDTIMEOUT flag clear bit Set by software to clear the …\nData timeout interrupt enable Set and cleared by software …\nData transfer mode selection. This bit can only be written …\nReceive and transmit FIFO data This register can only be …\nFIFO reset, will flush any remaining data. This bit can …\nHardware flow control enable This bit can only be written …\nDouble buffer mode active buffer indication This bit can …\nBuffer 0 memory base address bits [31:2], shall be word …\nBuffer 1 memory base address, shall be word aligned (bit …\nBuffer mode selection. This bit can only be written by …\nNumber of transfers per buffer. This 8-bit value shall be …\nIDMA buffer transfer complete. interrupt flag is cleared …\nIDMA buffer transfer complete clear bit Set by software to …\nIDMA buffer transfer complete interrupt enable Set and …\nIDMA enable This bit can only be written by firmware when …\nIDMA transfer error. Interrupt flag is cleared by writing …\nIDMA transfer error clear bit Set by software to clear the …\nSDMMC IP identification.\nIP major revision number.\nIP minor revision number.\nSDMMC_CK dephasing selection bit for data and Command. …\nSDMMC state control bits. These bits can only be written …\nPower saving configuration bit This bit can only be …\nResponse command index\nRead wait mode. This bit can only be written by firmware …\nRead wait start. If this bit is set, read wait operation …\nRead wait stop This bit is written by firmware and auto …\nReceive FIFO empty This is a hardware status flag only, …\nReceive FIFO full This bit is cleared when one FIFO …\nRx FIFO full interrupt enable Set and cleared by software …\nReceive FIFO half full There are at least half the number …\nRx FIFO half full interrupt enable Set and cleared by …\nReceived FIFO overrun error or IDMA write transfer error. …\nRXOVERR flag clear bit Set by software to clear the …\nRx FIFO overrun error interrupt enable Set and cleared by …\nSD I/O interrupt enable functions This bit can only be …\nSDIO interrupt received. Interrupt flag is cleared by …\nSDIOIT flag clear bit Set by software to clear the SDIOIT …\nSDIO mode interrupt received interrupt enable Set and …\nReceive clock selection. These bits can only be written …\nTransmit FIFO empty This bit is cleared when one FIFO …\nTx FIFO empty interrupt enable Set and cleared by software …\nTransmit FIFO full This is a hardware status flag only, …\nTransmit FIFO half empty At least half the number of words …\nTx FIFO half empty interrupt enable Set and cleared by …\nTransmit FIFO underrun error or IDMA read transfer error. …\nTXUNDERR flag clear bit Set by software to clear TXUNDERR …\nTx FIFO underrun error interrupt enable Set and cleared by …\nVoltage switch critical timing section completion. …\nVSWEND flag clear bit Set by software to clear the VSWEND …\nVoltage switch critical timing section completion …\nVoltage switch sequence start. This bit is used to start …\nVoltage switch procedure enable. This bit can only be …\nCPSM waits for interrupt request. If this bit is set, the …\nCPSM Waits for end of data transfer (CmdPend internal …\nWait for response bits. This bit can only be written by …\nWide bus mode enable bit This bit can only be written when …\nTransmit FIFO empty This bit is cleared when one FIFO …\nTx FIFO empty interrupt enable Set and cleared by software …\nTransmit FIFO full This is a hardware status flag only, …\nTransmit FIFO half empty At least half the number of words …\nTx FIFO half empty interrupt enable Set and cleared by …\nTransmit FIFO underrun error or IDMA read transfer error. …\nTXUNDERR flag clear bit Set by software to clear TXUNDERR …\nTx FIFO underrun error interrupt enable Set and cleared by …\nVoltage switch critical timing section completion. …\nVSWEND flag clear bit Set by software to clear the VSWEND …\nVoltage switch critical timing section completion …\nVoltage switch sequence start. This bit is used to start …\nVoltage switch procedure enable. This bit can only be …\nCPSM waits for interrupt request. If this bit is set, the …\nCPSM Waits for end of data transfer (CmdPend internal …\nWait for response bits. This bit can only be written by …\nWide bus mode enable bit This bit can only be written when …\nSerial peripheral interface\nconfiguration register 1\nconfiguration register 2\ncontrol register 1\ncontrol register 2\nPolynomial Register\nReturns the argument unchanged.\nI2S Configuration Register\nInterrupt Enable Register\nInterrupt/Status Flags Clear Register\nCalls <code>U::from(self)</code>.\nReceiver CRC Register\nReceive Data Register - half-word sized\nReceive Data Register\nReceive Data Register - byte sized\nStatus Register\nTransmitter CRC Register\nTransmit Data Register - half-word sized\nTransmit Data Register\nTransmit Data Register - byte sized\nUnderrun Data Register\nconfiguration register 1\nconfiguration register 2\ncontrol register 1\ncontrol register 2\nPolynomial Register\nI2S Configuration Register\nInterrupt Enable Register\nInterrupt/Status Flags Clear Register\nReceiver CRC Register\nStatus Register\nTransmitter CRC Register\nUnderrun Data Register\nAlternate function always control GPIOs\nChannel length (number of bits per audio channel)\nSerial audio clock polarity\nSPI Communication Mode\nClock phase\nClock polarity\nFull size (33-bit or 17-bit) CRC polynomial is used\nCRC Error\nCRC Error flag clear\nCRC Interrupt enable\nHardware CRC computation enable\nCRC polynomial register\nLength of CRC frame to be transacted and compared\nMaster transfer start\nMaster SUSPend request\nNumber of data frames remaining in current TSIZE session\nData format\nData length to be transferred\nNumber of bits in at single SPI data frame\nDuplex Packet\nDXP interrupt enabled\nEnd Of Transfer\nEnd Of Transfer flag clear\nEOT, SUSP and TXC interrupt enable\nFixed channel length in slave\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthreshold level\nRx/Tx direction at Half-duplex mode\nI2S configuration mode\nI2S linear prescaler\nI2S mode selection\nI2S standard selection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocking the AF configuration of associated IOs\nSwap functionality of MISO and MOSI pins\nData frame format\nMaster automatic SUSP in Receive mode\nSPI Master\nMaster baud rate\nMaster clock output enable\nMaster Inter-Data Idleness\nMode Fault\nMode Fault flag clear\nMode Fault interrupt enable\nMaster SS Idleness\nOdd factor for the prescaler\nOverrun\nOverrun flag clear\nOVR interrupt enable\nPCM frame synchronization\nCRC calculation initialization pattern control for receiver\nCRC register for receiver\nRx DMA stream enable\nRx-Packet available\nRXP Interrupt Enable\nRxFIFO Packing LeVeL\nRxFIFO Word Not Empty\nAlternate function always control GPIOs\nChannel length (number of bits per audio channel)\nSerial audio clock polarity\nSPI Communication Mode\nClock phase\nClock polarity\nFull size (33-bit or 17-bit) CRC polynomial is used\nCRC Error\nCRC Error flag clear\nCRC Interrupt enable\nHardware CRC computation enable\nCRC polynomial register\nLength of CRC frame to be transacted and compared\nMaster transfer start\nMaster SUSPend request\nNumber of data frames remaining in current TSIZE session\nData format\nData length to be transferred\nNumber of bits in at single SPI data frame\nDuplex Packet\nDXP interrupt enabled\nEnd Of Transfer\nEnd Of Transfer flag clear\nEOT, SUSP and TXC interrupt enable\nFixed channel length in slave\nthreshold level\nRx/Tx direction at Half-duplex mode\nI2S configuration mode\nI2S linear prescaler\nI2S mode selection\nI2S standard selection\nLocking the AF configuration of associated IOs\nSwap functionality of MISO and MOSI pins\nData frame format\nMaster automatic SUSP in Receive mode\nSPI Master\nMaster baud rate\nMaster clock output enable\nMaster Inter-Data Idleness\nMode Fault\nMode Fault flag clear\nMode Fault interrupt enable\nMaster SS Idleness\nOdd factor for the prescaler\nOverrun\nOverrun flag clear\nOVR interrupt enable\nPCM frame synchronization\nCRC calculation initialization pattern control for receiver\nCRC register for receiver\nRx DMA stream enable\nRx-Packet available\nRXP Interrupt Enable\nRxFIFO Packing LeVeL\nRxFIFO Word Not Empty\nSerial Protocol\nSerial Peripheral Enable\nInternal SS signal input level\nSS input/output polarity\nSoftware management of SS signal input\nSS output enable\nSS output management in master mode\nSUSPend\nSUSPend flag clear\nCRC calculation initialization pattern control for …\nTI frame format error\nTI frame format error flag clear\nTIFRE interrupt enable\nNumber of data transfer extension to be reload into TSIZE …\nAdditional number of SPI data to be transacted was reload\nTSERFC flag clear\nAdditional number of transactions reload interrupt enable\nNumber of data at current transfer\nTxFIFO transmission complete\nCRC register for transmitter\nTx DMA stream enable\nTx-Packet space available\nTXP interrupt enable\nTransmission Transfer Filled\nTransmission Transfer Filled flag clear\nTXTFIE interrupt enable\nUnderrun at slave transmission mode\nUnderrun flag clear\nBehavior of slave transmitter at underrun condition\nDetection of underrun condition at slave transmitter\nData at slave underrun condition\nUDR interrupt enable\nWord select inversion\nSerial Protocol\nSerial Peripheral Enable\nInternal SS signal input level\nSS input/output polarity\nSoftware management of SS signal input\nSS output enable\nSS output management in master mode\nSUSPend\nSUSPend flag clear\nCRC calculation initialization pattern control for …\nTI frame format error\nTI frame format error flag clear\nTIFRE interrupt enable\nNumber of data transfer extension to be reload into TSIZE …\nAdditional number of SPI data to be transacted was reload\nTSERFC flag clear\nAdditional number of transactions reload interrupt enable\nNumber of data at current transfer\nTxFIFO transmission complete\nCRC register for transmitter\nTx DMA stream enable\nTx-Packet space available\nTXP interrupt enable\nTransmission Transfer Filled\nTransmission Transfer Filled flag clear\nTXTFIE interrupt enable\nUnderrun at slave transmission mode\nUnderrun flag clear\nBehavior of slave transmitter at underrun condition\nDetection of underrun condition at slave transmitter\nData at slave underrun condition\nUDR interrupt enable\nWord select inversion\nHigh level is active for SS signal\nLow level is active for SS signal\nAll ones RX CRC initialization pattern\nAll ones TX CRC initialization pattern\nAll zeros RX CRC initialization pattern\nAll zeros TX CRC initialization pattern\nSS is asserted until data transfer complete\nAt least 32-bit data frame received\n16 bits per channel\n16-bit data length\n24-bit data length\n32 bits per channel\n32-bit data length\nSlave sends a constant underrun pattern\nf_spi_ker_ck / 128\nf_spi_ker_ck / 16\nf_spi_ker_ck / 2\nf_spi_ker_ck / 256\nf_spi_ker_ck / 32\nf_spi_ker_ck / 4\nf_spi_ker_ck / 64\nf_spi_ker_ck / 8\n8 frames\n11 frames\nUnderrun is detected at end of last data frame\nReal divider value is I2SDIV*2\n15 frames\nThe first clock transition is the first data capture edge\n5 frames\nThe channel length in slave mode is supposed to be 16 or …\n4 frames\n14 frames\nFull duplex\nHalf duplex\nCK idle level is High. Signals are sampled on falling and …\nSCK to 1 when idle\nCK idle Level is Low. Signals are sampled on rising and …\nSCK to 0 when idle\nThe data inside RXDR and TXDR are left aligned\nLess than 32-bit data frame received\nLong PCM frame synchronization\nLSB/right justified standard\nData is transmitted/received with the LSB first\nMaster configuration\nMaster, full duplex\nMaster, receive\nMaster, transmit\nMotorola SPI protocol\nMSB/left justified standard\nData is transmitted/received with the MSB first\n9 frames\nData frames interleaved with SS not asserted during MIDI\nThe channel length in slave mode is different from 16 or …\nReal divider value is I2SDIV*2 + 1\n1 frame\nOne frame beyond packing ratio available\nPCM standard\nI2S Philips standard\nSimplex receiver only\nReceiver in half duplex mode\nSlave repeats last received data frame from master\nSlave repeats last transmitted data frame\nThe data inside RXDR and TXDR are right aligned\nThe second clock transition is the first data capture edge\n7 frames\nShort PCM frame synchronization\n6 frames\n16 frames\nSlave configuration\nSlave, full duplex\nSlave, receive\nSlave, transmit\nUnderrun is detected at begin of data frame\nUnderrun is detected at begin of active SS signal\n10 frames\n13 frames\n3 frames\nThree frame beyond packing ratio available\nTI SPI protocol\nSimplex transmitter only\nTransmitter in half duplex mode\n12 frames\n2 frames\nTwo frame beyond packing ratio available\nZero frames beyond packing ratio available\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSystem configuration controller\nSYSCFG compensation cell code register\ncompensation cell control/status register\nSYSCFG compensation cell value register\nexternal interrupt configuration register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSYSCFG package register\nperipheral mode configuration register\nSYSCFG user register 0\nSYSCFG user register 10\nSYSCFG user register 11\nSYSCFG user register 12\nSYSCFG user register 13\nSYSCFG user register 14\nSYSCFG user register 15\nSYSCFG user register 16\nSYSCFG user register 17\nSYSCFG user register 18\nSYSCFG user register 2\nSYSCFG user register 3\nSYSCFG user register 4\nSYSCFG user register 5\nSYSCFG user register 6\nSYSCFG user register 7\nSYSCFG user register 8\nSYSCFG user register 9\nSYSCFG compensation cell code register\ncompensation cell control/status register\nSYSCFG compensation cell value register\nexternal interrupt configuration register 2\nSYSCFG package register\nperipheral mode configuration register\nSYSCFG user register 0\nSYSCFG user register 10\nSYSCFG user register 11\nSYSCFG user register 12\nSYSCFG user register 13\nSYSCFG user register 14\nSYSCFG user register 15\nSYSCFG user register 16\nSYSCFG user register 17\nSYSCFG user register 18\nSYSCFG user register 2\nSYSCFG user register 3\nSYSCFG user register 4\nSYSCFG user register 5\nSYSCFG user register 6\nSYSCFG user register 7\nSYSCFG user register 8\nSYSCFG user register 9\nBank Swap\nBooster Enable\nAnalog switch supply voltage selection\nBoot Address 0\nBoot Address 1\nBOR_LVL Brownout Reset Threshold Level\nCPU maximum frequency boost enable\nCode selection\nD1 Standby reset\nD1 Stop Reset\nenable\nEthernet PHY interface selection.\nEXTI x configuration (x = 4 to 7)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFreeze independent watchdog in Standby mode\nFreeze independent watchdog in Stop mode\nHigh-speed at low-voltage\nI2C1 Fm+\nI2C2 Fm+\nI2C3 Fm+\nI2C4 Fm+\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O high speed / low voltage\nIndependent Watchdog 1 mode\nMass Erase Protected Area Disabled for bank 1\nMass erase protected area disabled for bank 2\nMass erase secured area disabled for bank 1\nMass erase secured area disabled for bank 2\nNMOS compensation code\nNMOS compensation value\nPA0 Switch Open\nPA1 Switch Open\nProtected area start address for bank 1\nProtected area start address for bank 2\nProtected area end address for bank 1\nProtected area end address for bank 2\nPB(6) Fm+\nPB(7) Fast Mode Plus\nPB(8) Fast Mode Plus\nPB(9) Fm+\nPC2 Switch Open\nPC3 Switch Open\nPMOS compensation code\nPMOS compensation value\nPackage\nPrivate key programmed\nReadout protection\nCompensation cell ready flag\nSecured area start address for bank 1\nSecured area start address for bank 2\nSecured area end address for bank 1\nSecured area end address for bank 2\nSecured DTCM RAM Size\nSecure mode\nBank Swap\nBooster Enable\nAnalog switch supply voltage selection\nBoot Address 0\nBoot Address 1\nBOR_LVL Brownout Reset Threshold Level\nCPU maximum frequency boost enable\nCode selection\nD1 Standby reset\nD1 Stop Reset\nenable\nEthernet PHY interface selection.\nEXTI x configuration (x = 4 to 7)\nFreeze independent watchdog in Standby mode\nFreeze independent watchdog in Stop mode\nHigh-speed at low-voltage\nI2C1 Fm+\nI2C2 Fm+\nI2C3 Fm+\nI2C4 Fm+\nI/O high speed / low voltage\nIndependent Watchdog 1 mode\nMass Erase Protected Area Disabled for bank 1\nMass erase protected area disabled for bank 2\nMass erase secured area disabled for bank 1\nMass erase secured area disabled for bank 2\nNMOS compensation code\nNMOS compensation value\nPA0 Switch Open\nPA1 Switch Open\nProtected area start address for bank 1\nProtected area start address for bank 2\nProtected area end address for bank 1\nProtected area end address for bank 2\nPB(6) Fm+\nPB(7) Fast Mode Plus\nPB(8) Fast Mode Plus\nPB(9) Fm+\nPC2 Switch Open\nPC3 Switch Open\nPMOS compensation code\nPMOS compensation value\nPackage\nPrivate key programmed\nReadout protection\nCompensation cell ready flag\nSecured area start address for bank 1\nSecured area start address for bank 2\nSecured area end address for bank 1\nSecured area end address for bank 2\nSecured DTCM RAM Size\nSecure mode\nITCM-RAM / AXI-SRAM size\nWrite protection for flash bank 1\nWrite protection for flash bank 2\nITCM-RAM / AXI-SRAM size\nWrite protection for flash bank 1\nWrite protection for flash bank 2\n128 Kbyte ITCM-RAM / 256 Kbyte AXI-SRAM\n192 Kbyte ITCM-RAM / 192 Kbyte AXI-SRAM\n256 Kbyte ITCM-RAM / 128 Kbyte AXI-SRAM\n64 Kbyte ITCM-RAM / 320 Kbyte AXI-SRAM\nGMII or MII\nRMII\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1-channel timers\n1-channel with one complementary output timers\n2-channel timers\n2-channel with one complementary output timers\nAdvanced Control timers\nBasic timers\nVirtual Basic timers without CR2 register for common part …\nVirtual timer for common part of TIM_BASIC and TIM_1CH\nGeneral purpose 16-bit timers\nGeneral purpose 32-bit timers\nalternate function register 1\nalternate function register 1\nalternate function register 1\nalternate function register 1\nalternate function register 1\nalternate function register 2\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nauto-reload register\nbreak and dead-time register\nbreak and dead-time register\nbreak and dead-time register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare mode register 3\ncapture/compare mode register 1 (input mode)\ncapture/compare mode register 1 (input mode)\ncapture/compare mode register 1 (input mode)\ncapture/compare mode register 1 (input mode)\ncapture/compare mode register 1-2 (input mode)\ncapture/compare mode register 1-2 (input mode)\ncapture/compare mode register 1-2 (input mode)\ncapture/compare mode register 1 (output mode)\ncapture/compare mode register 1 (output mode)\ncapture/compare mode register 1 (output mode)\ncapture/compare mode register 1 (output mode)\ncapture/compare mode register 1-2 (output mode)\ncapture/compare mode register 1-2 (output mode)\ncapture/compare mode register 1-2 (output mode)\ncapture/compare register x (x=1)\ncapture/compare register x (x=1)\ncapture/compare register x (x=1-2)\ncapture/compare register x (x=1-2)\ncapture/compare register x (x=1-4)\ncapture/compare register x (x=1-4)\ncapture/compare register x (x=1-4)\ncapture/compare register 5\ncapture/compare register 6\ncounter\ncounter\ncounter\ncounter\ncounter\ncounter\ncounter\ncounter\ncounter\ncounter\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\nDMA control register\nDMA control register\nDMA control register\nDMA control register\nDMA control register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA address for full transfer\nDMA address for full transfer\nDMA address for full transfer\nDMA address for full transfer\nDMA address for full transfer\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOption register 1 Note: Check Reference Manual to parse …\nOption register 1 Note: Check Reference Manual to parse …\nOption register 1 Note: Check Reference Manual to parse …\nOption register 1 Note: Check Reference Manual to parse …\nOption register 1 Note: Check Reference Manual to parse …\nOption register 1 Note: Check Reference Manual to parse …\nOption register 1 Note: Check Reference Manual to parse …\nprescaler\nprescaler\nprescaler\nprescaler\nprescaler\nprescaler\nprescaler\nprescaler\nprescaler\nprescaler\nrepetition counter register\nrepetition counter register\nrepetition counter register\nslave mode control register\nslave mode control register\nslave mode control register\nslave mode control register\nslave mode control register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\ninput selection register\ninput selection register\ninput selection register\ninput selection register\ninput selection register\ninput selection register\ninput selection register\nalternate function register 1\nalternate function register 1\nalternate function register 1\nalternate function register 2\nauto-reload register\nbreak and dead-time register\nbreak and dead-time register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare enable register\ncapture/compare mode register 3\ncapture/compare mode register x (x=1) (input mode)\ncapture/compare mode register x (x=1) (input mode)\ncapture/compare mode register x (x=1) (output mode)\ncapture/compare mode register x (x=1) (output mode)\ncapture/compare mode register x (x=1-2) (output mode)\ncapture/compare register x (x=1-4,6)\ncapture/compare register 5\ncounter\ncontrol register 1\ncontrol register 1\ncontrol register 1\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\ncontrol register 2\nDMA control register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA/Interrupt enable register\nDMA address for full transfer\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nevent generation register\nrepetition counter register\nrepetition counter register\nslave mode control register\nslave mode control register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\nstatus register\ninput selection register\ninput selection register\ninput selection register\nAutomatic output enable\nAutomatic output enable\nAuto-reload preload enable\nAuto-reload preload enable\nAuto-reload preload enable\nAuto-reload value\nBreak x (x=1) generation\nBreak x (x=1) generation\nBreak x (x=1-2) generation\nBreak interrupt enable\nBreak interrupt enable\nBreak interrupt enable\nBreak x (x=1) interrupt flag\nBreak x (x=1) interrupt flag\nBreak x (x=1,2) interrupt flag\nTIM_BRK2_CMPx (x=1-8) enable\nTIM_BRK2_CMPx (x=1-4) input polarity\nBRK2 DFSDM1_BREAK1 enable\nTIMx_BKIN2 input enable\nTIMx_BK2IN input polarity\nTIM_BRK_CMPx (x=1-2) enable\nTIM_BRK_CMPx (x=1-2) enable\nTIM_BRK_CMPx (x=1-2) input polarity\nTIM_BRK_CMPx (x=1-2) input polarity\nBRK DFSDM1_BREAKx enable (x=0 if TIM15, x=1 if TIM16, x=2 …\nBRK DFSDM1_BREAKx enable (x=0 if TIM15, x=1 if TIM16, x=2 …\nBreak x (x=1) enable\nBreak x (x=1,2) enable\nBreak x (x=1) filter\nBreak x (x=1,2) filter\nTIMx_BKIN input enable\nTIMx_BKIN input enable\nTIMx_BKIN input polarity\nTIMx_BKIN input polarity\nBreak x (x=1) polarity\nBreak x (x=1,2) polarity\nCapture/Compare x (x=1) DMA request enable\nCapture/Compare x (x=1) DMA request enable\nCapture/Compare x (x=1-4) DMA request enable\nCapture/Compare x (x=1-4) DMA request enable\nCapture/compare DMA selection\nCapture/compare DMA selection\nCapture/compare DMA selection\nCapture/compare DMA selection\nCapture/Compare x (x=1) output enable\nCapture/Compare x (x=1) output enable\nCapture/Compare x (x=1-2) output enable\nCapture/Compare x (x=1-2) output enable\nCapture/Compare x (x=1-6) output enable\nCapture/Compare x (x=1-4) output enable\nCapture/compare x (x=1) generation\nCapture/compare x (x=1) generation\nCapture/compare x (x=1-2) generation\nCapture/compare x (x=1,2) generation\nCapture/compare x (x=1-4) generation\nCapture/compare x (x=1-4) generation\nCapture/Compare x (x=1) interrupt enable\nCapture/Compare x (x=1) interrupt enable\nCapture/Compare x (x=1-2) interrupt enable\nCapture/Compare x (x=1) interrupt enable\nCapture/Compare x (x=1-4) interrupt enable\nCapture/Compare x (x=1-4) interrupt enable\nCapture/compare x (x=1) interrupt flag\nCapture/compare x (x=1) interrupt flag\nCapture/compare x (x=1-2) interrupt flag\nCapture/compare x (x=1,2) interrupt flag\nCapture/compare x (x=1-4) interrupt flag\nCapture/compare x (x=1-4) interrupt flag\nCapture/compare 5 interrupt flag\nCapture/compare 6 interrupt flag\nCapture/Compare x (x=1) complementary output enable\nCapture/Compare x (x=1) complementary output enable\nCapture/Compare x (x=1-3) complementary output enable\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-4) output Polarity\nCapture/Compare x (x=1-4) output Polarity\nCapture/Compare x (x=1) overcapture flag\nCapture/Compare x (x=1) overcapture flag\nCapture/Compare x (x=1-2) overcapture flag\nCapture/Compare x (x=1,2) overcapture flag\nCapture/Compare x (x=1-4) overcapture flag\nCapture/Compare x (x=1-4) overcapture flag\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-6) output Polarity\nCapture/Compare x (x=1-4) output Polarity\nCapture/compare preloaded control\nCapture/compare preloaded control\nCapture/compare preloaded control\ncapture/compare x (x=1-4,6) value\ncapture/compare x (x=1-4,6) value\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/compare control update selection\nCapture/compare control update selection\nCapture/compare control update selection\nCounter enable\nCounter enable\nCounter enable\nClock division\nClock division\nCenter-aligned mode selection\ncounter value\nCOM DMA request enable\nCOM DMA request enable\nCapture/Compare control update generation\nCapture/Compare control update generation\nCapture/Compare control update generation\nCOM interrupt enable\nCOM interrupt enable\nCOM interrupt enable\nCOM interrupt flag\nCOM interrupt flag\nCOM interrupt flag\nDMA base address\nDMA burst length\nDirection\nDMA register for burst accesses\nDead-time generator setup\nDead-time generator setup\nExternal clock mode 2 enable\nExternal trigger filter\nExternal trigger polarity\nExternal trigger prescaler\netr_in source selection\netr_in source selection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGroup channel 5 and channel x (x=1-3)\nInput capture y filter\nInput capture y filter\nInput capture y prescaler\nInput capture y prescaler\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock configuration\nLock configuration\nMaster mode selection\nMaster mode selection\nMaster mode selection\nMaster mode selection\nMaster mode selection\nMaster mode selection 2\nMain output enable\nMain output enable\nMaster/Slave mode\nMaster/Slave mode\nOutput compare x (x=5,6) clear enable\nOutput compare y clear enable\nOutput compare x (x=5,6) fast enable\nOutput compare y fast enable\nOutput compare y fast enable\nOutput compare y fast enable\nOutput compare x (x=5,6) mode\nOutput compare y mode\nOutput compare y mode\nOutput compare y mode\nOutput compare x (x=5,6) preload enable\nOutput compare y preload enable\nOutput compare y preload enable\nOutput compare y preload enable\nOutput Idle state x (x=1)\nOutput Idle state x (x=1,2)\nOutput Idle state x (x=1-6)\nOutput Idle state x (x=1)\nOutput Idle state x (x=1)\nOutput Idle state x N x (x=1-4)\nOne-pulse mode enbaled\nOne-pulse mode enbaled\nOne-pulse mode enbaled\nOff-state selection for Idle mode\nOff-state selection for Idle mode\nOff-state selection for Run mode\nOff-state selection for Run mode\nRepetition counter value\nRepetition counter value\nSystem break interrupt flag\nAutomatic output enable\nAutomatic output enable\nAuto-reload preload enable\nAuto-reload preload enable\nAuto-reload preload enable\nAuto-reload value\nBreak x (x=1) generation\nBreak x (x=1) generation\nBreak x (x=1-2) generation\nBreak interrupt enable\nBreak interrupt enable\nBreak interrupt enable\nBreak x (x=1) interrupt flag\nBreak x (x=1) interrupt flag\nBreak x (x=1,2) interrupt flag\nTIM_BRK2_CMPx (x=1-8) enable\nTIM_BRK2_CMPx (x=1-4) input polarity\nBRK2 DFSDM1_BREAK1 enable\nTIMx_BKIN2 input enable\nTIMx_BK2IN input polarity\nTIM_BRK_CMPx (x=1-2) enable\nTIM_BRK_CMPx (x=1-2) enable\nTIM_BRK_CMPx (x=1-2) input polarity\nTIM_BRK_CMPx (x=1-2) input polarity\nBRK DFSDM1_BREAKx enable (x=0 if TIM15, x=1 if TIM16, x=2 …\nBRK DFSDM1_BREAKx enable (x=0 if TIM15, x=1 if TIM16, x=2 …\nBreak x (x=1) enable\nBreak x (x=1,2) enable\nBreak x (x=1) filter\nBreak x (x=1,2) filter\nTIMx_BKIN input enable\nTIMx_BKIN input enable\nTIMx_BKIN input polarity\nTIMx_BKIN input polarity\nBreak x (x=1) polarity\nBreak x (x=1,2) polarity\nCapture/Compare x (x=1) DMA request enable\nCapture/Compare x (x=1) DMA request enable\nCapture/Compare x (x=1-4) DMA request enable\nCapture/Compare x (x=1-4) DMA request enable\nCapture/compare DMA selection\nCapture/compare DMA selection\nCapture/compare DMA selection\nCapture/compare DMA selection\nCapture/Compare x (x=1) output enable\nCapture/Compare x (x=1) output enable\nCapture/Compare x (x=1-2) output enable\nCapture/Compare x (x=1-2) output enable\nCapture/Compare x (x=1-6) output enable\nCapture/Compare x (x=1-4) output enable\nCapture/compare x (x=1) generation\nCapture/compare x (x=1) generation\nCapture/compare x (x=1-2) generation\nCapture/compare x (x=1,2) generation\nCapture/compare x (x=1-4) generation\nCapture/compare x (x=1-4) generation\nCapture/Compare x (x=1) interrupt enable\nCapture/Compare x (x=1) interrupt enable\nCapture/Compare x (x=1-2) interrupt enable\nCapture/Compare x (x=1) interrupt enable\nCapture/Compare x (x=1-4) interrupt enable\nCapture/Compare x (x=1-4) interrupt enable\nCapture/compare x (x=1) interrupt flag\nCapture/compare x (x=1) interrupt flag\nCapture/compare x (x=1-2) interrupt flag\nCapture/compare x (x=1,2) interrupt flag\nCapture/compare x (x=1-4) interrupt flag\nCapture/compare x (x=1-4) interrupt flag\nCapture/compare 5 interrupt flag\nCapture/compare 6 interrupt flag\nCapture/Compare x (x=1) complementary output enable\nCapture/Compare x (x=1) complementary output enable\nCapture/Compare x (x=1-3) complementary output enable\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-4) output Polarity\nCapture/Compare x (x=1-4) output Polarity\nCapture/Compare x (x=1) overcapture flag\nCapture/Compare x (x=1) overcapture flag\nCapture/Compare x (x=1-2) overcapture flag\nCapture/Compare x (x=1,2) overcapture flag\nCapture/Compare x (x=1-4) overcapture flag\nCapture/Compare x (x=1-4) overcapture flag\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-2) output Polarity\nCapture/Compare x (x=1-6) output Polarity\nCapture/Compare x (x=1-4) output Polarity\nCapture/compare preloaded control\nCapture/compare preloaded control\nCapture/compare preloaded control\ncapture/compare x (x=1-4,6) value\ncapture/compare x (x=1-4,6) value\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/Compare y selection\nCapture/compare control update selection\nCapture/compare control update selection\nCapture/compare control update selection\nCounter enable\nCounter enable\nCounter enable\nClock division\nClock division\nCenter-aligned mode selection\ncounter value\nCOM DMA request enable\nCOM DMA request enable\nCapture/Compare control update generation\nCapture/Compare control update generation\nCapture/Compare control update generation\nCOM interrupt enable\nCOM interrupt enable\nCOM interrupt enable\nCOM interrupt flag\nCOM interrupt flag\nCOM interrupt flag\nDMA base address\nDMA burst length\nDirection\nDMA register for burst accesses\nDead-time generator setup\nDead-time generator setup\nExternal clock mode 2 enable\nExternal trigger filter\nExternal trigger polarity\nExternal trigger prescaler\netr_in source selection\netr_in source selection\nGroup channel 5 and channel x (x=1-3)\nInput capture y filter\nInput capture y filter\nInput capture y prescaler\nInput capture y prescaler\nLock configuration\nLock configuration\nMaster mode selection\nMaster mode selection\nMaster mode selection\nMaster mode selection\nMaster mode selection\nMaster mode selection 2\nMain output enable\nMain output enable\nMaster/Slave mode\nMaster/Slave mode\nOutput compare x (x=5,6) clear enable\nOutput compare y clear enable\nOutput compare x (x=5,6) fast enable\nOutput compare y fast enable\nOutput compare y fast enable\nOutput compare y fast enable\nOutput compare x (x=5,6) mode\nOutput compare y mode\nOutput compare y mode\nOutput compare y mode\nOutput compare x (x=5,6) preload enable\nOutput compare y preload enable\nOutput compare y preload enable\nOutput compare y preload enable\nOutput Idle state x (x=1)\nOutput Idle state x (x=1,2)\nOutput Idle state x (x=1-6)\nOutput Idle state x (x=1)\nOutput Idle state x (x=1)\nOutput Idle state x N x (x=1-4)\nOne-pulse mode enbaled\nOne-pulse mode enbaled\nOne-pulse mode enbaled\nOff-state selection for Idle mode\nOff-state selection for Idle mode\nOff-state selection for Run mode\nOff-state selection for Run mode\nRepetition counter value\nRepetition counter value\nSystem break interrupt flag\nSlave mode selection\nSlave mode selection\nTrigger DMA request enable\nTrigger DMA request enable\nTrigger DMA request enable\nTrigger generation\nTrigger generation\nTrigger generation\nTrigger generation\nTI1 selection\nTI1 selection\nTI1 selection\nTI1 selection\nTrigger interrupt enable\nTrigger interrupt enable\nTrigger interrupt enable\nTrigger interrupt enable\nTrigger interrupt flag\nTrigger interrupt flag\nTrigger interrupt flag\nTrigger interrupt flag\nSelects TIM_TIx (x=1) input\nSelects TIM_TIx (x=1-2) input\nSelects TIM_TIx (x=1-4) input\nTrigger selection\nTrigger selection\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate disable\nUpdate disable\nUpdate disable\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUIF copy\nUIF status bit remapping enable\nUIF status bit remapping enable\nUIF status bit remapping enable\nUpdate request source\nUpdate request source\nUpdate request source\nSlave mode selection\nSlave mode selection\nTrigger DMA request enable\nTrigger DMA request enable\nTrigger DMA request enable\nTrigger generation\nTrigger generation\nTrigger generation\nTrigger generation\nTI1 selection\nTI1 selection\nTI1 selection\nTI1 selection\nTrigger interrupt enable\nTrigger interrupt enable\nTrigger interrupt enable\nTrigger interrupt enable\nTrigger interrupt flag\nTrigger interrupt flag\nTrigger interrupt flag\nTrigger interrupt flag\nSelects TIM_TIx (x=1) input\nSelects TIM_TIx (x=1-2) input\nSelects TIM_TIx (x=1-4) input\nTrigger selection\nTrigger selection\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate DMA request enable\nUpdate disable\nUpdate disable\nUpdate disable\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate generation\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt enable\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUpdate interrupt flag\nUIF copy\nUIF status bit remapping enable\nUIF status bit remapping enable\nUIF status bit remapping enable\nUpdate request source\nUpdate request source\nUpdate request source\nBreak input tim_brk is active high\nBreak input tim_brk is active low\nSet channel to active level on match. OCyREF signal is …\nAny of counter overflow/underflow, setting UG, or update …\nThe counter counts up and down alternatively. Output …\nThe counter counts up and down alternatively. Output …\nThe counter counts up and down alternatively. Output …\nRising edge of the selected trigger input (tim_trgi) …\nOC1REF signal is used as trigger output\nOC1REF signal is used as TRGO2\nOC2REF signal is used as trigger output\nOC2REF signal is used as TRGO2\nOC3REF signal is used as trigger output\nOC3REF signal is used as TRGO2\nOC4REF signal is used as trigger output\nOC4REF signal is used as TRGO2\nOC5REF signal is used as TRGO2\nOC6REF signal is used as TRGO2\nThe trigger output send a positive pulse when the CC1IF …\nTRGO2 send a positive pulse when the CC1IF flag it to be …\nOC4REF rising or falling edges generate pulses on TRGO2\nOC4REF or OC6REF rising edges generate pulses on TRGO2\nOC4REF rising or OC6REF falling edges generate pulses on …\nOC5REF or OC6REF rising edges generate pulses on TRGO2\nOC5REF rising or OC6REF falling edges generate pulses on …\nOC6REF rising or falling edges generate pulses on TRGO2\nOnly counter overflow/underflow generates an update …\nNo bit is write protected\nWhen inactive, OC/OCN outputs are disabled\nWhen inactive, OC/OCN outputs are disabled\nSlave mode disabled - if CEN = ‘1’ then the prescaler …\nt_DTS = t_CK_INT\nPrescaler OFF\nt_DTS = 2 × t_CK_INT\nETRP frequency divided by 2\nt_DTS = 4 × t_CK_INT\nETRP frequency divided by 4\nETRP frequency divided by 8\nCounter used as downcounter\nThe counter counts up or down depending on the direction …\nThe counter enable signal, CNT_EN, is used as trigger …\nThe counter enable signal, CNT_EN, is used as TRGO2\nEncoder mode 1 - Counter counts up/down on TI2FP1 edge …\nEncoder mode 2 - Counter counts up/down on TI1FP2 edge …\nEncoder mode 3 - Counter counts up/down on both TI1FP1 and …\nExternal Trigger input\nExternal Clock Mode 1 - Rising edges of the selected …\nfSAMPLING=fCK_INT, N=2\nfSAMPLING=fCK_INT, N=4\nfSAMPLING=fCK_INT, N=8\nfSAMPLING=fDTS/16, N=5\nfSAMPLING=fDTS/16, N=6\nfSAMPLING=fDTS/16, N=8\nfSAMPLING=fDTS/2, N=6\nfSAMPLING=fDTS/2, N=8\nfSAMPLING=fDTS/32, N=5\nfSAMPLING=fDTS/32, N=6\nfSAMPLING=fDTS/32, N=8\nfSAMPLING=fDTS/4, N=6\nfSAMPLING=fDTS/4, N=8\nfSAMPLING=fDTS/8, N=6")