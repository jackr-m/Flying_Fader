searchState.loadedDescShard("stm32_metapac", 0, "18 - ADC\n154 - BDMA1\n129 - BDMA2_CHANNEL0\n130 - BDMA2_CHANNEL1\n131 - BDMA2_CHANNEL2\n132 - BDMA2_CHANNEL3\n133 - BDMA2_CHANNEL4\n134 - BDMA2_CHANNEL5\n135 - BDMA2_CHANNEL6\n136 - BDMA2_CHANNEL7\n94 - CEC\n144 - CRS\n127 - DAC2\n78 - DCMI_PSSI\n110 - DFSDM1_FLT0\n111 - DFSDM1_FLT1\n112 - DFSDM1_FLT2\n113 - DFSDM1_FLT3\n64 - DFSDM1_FLT4\n65 - DFSDM1_FLT5\n66 - DFSDM1_FLT6\n67 - DFSDM1_FLT7\n42 - DFSDM2\n11 - DMA1_STREAM0\n12 - DMA1_STREAM1\n13 - DMA1_STREAM2\n14 - DMA1_STREAM3\n15 - DMA1_STREAM4\n16 - DMA1_STREAM5\n17 - DMA1_STREAM6\n47 - DMA1_STREAM7\n90 - DMA2D\n56 - DMA2_STREAM0\n57 - DMA2_STREAM1\n58 - DMA2_STREAM2\n59 - DMA2_STREAM3\n60 - DMA2_STREAM4\n68 - DMA2_STREAM5\n69 - DMA2_STREAM6\n70 - DMA2_STREAM7\n102 - DMAMUX1_OVR\n128 - DMAMUX2_OVR\n147 - DTS\n145 - ECC\n6 - EXTI0\n7 - EXTI1\n40 - EXTI15_10\n8 - EXTI2\n9 - EXTI3\n10 - EXTI4\n23 - EXTI9_5\n19 - FDCAN1_IT0\n21 - FDCAN1_IT1\n20 - FDCAN2_IT0\n22 - FDCAN2_IT1\n63 - FDCAN_CAL\n4 - FLASH\n48 - FMC\n81 - FPU\n153 - GFXMMU\n125 - HSEM1\n32 - I2C1_ER\n31 - I2C1_EV\n34 - I2C2_ER\n33 - I2C2_EV\n73 - I2C3_ER\n72 - I2C3_EV\n96 - I2C4_ER\n95 - I2C4_EV\n121 - JPEG\n93 - LPTIM1\n138 - LPTIM2\n139 - LPTIM3\n142 - LPUART1\n88 - LTDC\n89 - LTDC_ER\n120 - MDIOS\n119 - MDIOS_WKUP\n122 - MDMA\n92 - OCTOSPI1\n150 - OCTOSPI2\n77 - OTG_HS\n75 - OTG_HS_EP1_IN\n74 - OTG_HS_EP1_OUT\n76 - OTG_HS_WKUP\n1 - PVD_PVM\n5 - RCC\n80 - RNG\n41 - RTC_ALARM\n2 - RTC_TAMP_STAMP_CSS_LSE\n3 - RTC_WKUP\n87 - SAI1\n91 - SAI2\n49 - SDMMC1\n124 - SDMMC2\n97 - SPDIF_RX\n35 - SPI1\n36 - SPI2\n51 - SPI3\n84 - SPI4\n85 - SPI5\n86 - SPI6\n115 - SWPMI1\n116 - TIM15\n117 - TIM16\n118 - TIM17\n24 - TIM1_BRK\n27 - TIM1_CC\n26 - TIM1_TRG_COM\n25 - TIM1_UP\n28 - TIM2\n29 - TIM3\n30 - TIM4\n50 - TIM5\n54 - TIM6_DAC\n55 - TIM7\n43 - TIM8_BRK_TIM12\n46 - TIM8_CC\n45 - TIM8_TRG_COM_TIM14\n44 - TIM8_UP_TIM13\n52 - UART4\n53 - UART5\n82 - UART7\n83 - UART8\n140 - UART9\n37 - USART1\n141 - USART10\n38 - USART2\n39 - USART3\n71 - USART6\n149 - WAKEUP_PIN\n0 - WWDG\n143 - WWDG_RST\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAnalog to Digital Converter\nanalog watchdog 2 configuration register\nanalog watchdog 3 configuration register\ncalibration factors register\nCalibration Factor register 2\nconfiguration register 1\nconfiguration register 2\ncontrol register\nchannel differential or single-ended mode selection …\ngroup regular conversion data register\nReturns the argument unchanged.\nanalog watchdog 2 threshold register\nwatchdog higher threshold register 2\nwatchdog higher threshold register 3\ninterrupt enable register\nCalls <code>U::from(self)</code>.\ninterrupt and status register\ngroup injected sequencer rank 1-4 register\ngroup injected sequencer register\nanalog watchdog 1 threshold register\nwatchdog lower threshold register 2\nwatchdog lower threshold register 3\noffset number 1-4 register\npre channel selection register\nsampling time register 1-2\ngroup regular sequencer ranks register 1\ngroup regular sequencer ranks register 2\ngroup regular sequencer ranks register 3\ngroup regular sequencer ranks register 4\nanalog watchdog 2 configuration register\nanalog watchdog 3 configuration register\ncalibration factors register\nCalibration Factor register 2\nconfiguration register 1\nconfiguration register 2\ncontrol register\nchannel differential or single-ended mode selection …\ngroup regular conversion data register\nanalog watchdog 2 threshold register\nwatchdog higher threshold register 2\nwatchdog higher threshold register 3\ninterrupt enable register\ninterrupt and status register\ngroup injected sequencer rank 1 register\ngroup injected sequencer register\nanalog watchdog 1 threshold register\nwatchdog lower threshold register 2\nwatchdog lower threshold register 3\noffset number x register\nchannel preselection register\nsampling time register n\ngroup regular sequencer ranks register 1\ngroup regular sequencer ranks register 2\ngroup regular sequencer ranks register 3\ngroup regular sequencer ranks register 4\ncalibration\ndifferential mode for calibration\nLinearity calibration\ndisable\nenable\nready flag\nready interrupt\ngroup regular conversion start\ngroup regular conversion stop\nvoltage regulator enable\nlow power auto wait\nanalog watchdog 1 flag\nanalog watchdog 1 monitored channel selection\nanalog watchdog 1 enable on scope group regular\nanalog watchdog 1 interrupt\nanalog watchdog 1 monitoring a single channel or all …\nanalog watchdog 2 flag\nanalog watchdog 2 monitored channel selection\nanalog watchdog 2 interrupt\nanalog watchdog 3 flag\nanalog watchdog 3 monitored channel selection\nanalog watchdog 3 interrupt\nBoost mode control\ncalibration factor in differential mode\ncalibration factor in single-ended mode\ngroup regular continuous conversion mode\ndeep power down enable\nchannel differential or single-ended mode for channel\ngroup regular sequencer discontinuous mode\ngroup regular sequencer discontinuous number of ranks\nDMA transfer enable\ngroup regular end of unitary conversion flag\ngroup regular end of unitary conversion interrupt\ngroup regular end of sequence conversions flag\ngroup regular end of sequence conversions interrupt\ngroup regular end of sampling flag\ngroup regular end of sampling interrupt\ngroup regular external trigger polarity\ngroup regular external trigger source\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nanalog watchdog 2 threshold low\nAnalog watchdog 2 higher threshold\nAnalog watchdog 3 higher threshold\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ngroup injected conversion start\ngroup injected conversion stop\ngroup injected automatic trigger mode\nanalog watchdog 1 enable on scope group injected\ngroup injected sequencer rank 1 conversion data\ngroup injected sequencer discontinuous mode\ngroup injected end of unitary conversion flag\ngroup injected end of unitary conversion interrupt\ngroup injected end of sequence conversions flag\ngroup injected end of sequence conversions interrupt\ngroup injected external trigger polarity\ngroup injected external trigger source\ngroup injected sequencer scan length\noversampler enable on scope group injected\ngroup injected contexts queue disable\ngroup injected contexts queue mode\ngroup injected contexts queue overflow flag\ngroup injected contexts queue overflow interrupt\ngroup injected sequencer rank 1-4\nL3\nADC LDO output voltage ready (not always available)\nLinearity Calibration Factor\nLinearity calibration ready Word 1\nLinearity calibration ready Word 2\nLinearity calibration ready Word 3\nLinearity calibration ready Word 4\nLinearity calibration ready Word 5\nLinearity calibration ready Word 6\nLeft shift factor\nanalog watchdog 1 threshold low\nAnalog watchdog 2 lower threshold\nAnalog watchdog 3 lower threshold\noffset number x offset level\noffset number x channel selection\nOversampling ratio\ngroup regular overrun flag\ngroup regular overrun interrupt\ngroup regular overrun configuration\noversampling shift\nChannel x (VINP[i]) pre selection\ngroup regular conversion data\ndata resolution\noversampler enable on scope group regular\nRegular Oversampling mode\nRight-shift data after Offset 1 correction\nRight-shift data after Offset 2 correction\nRight-shift data after Offset 3 correction\nRight-shift data after Offset 4 correction\ncalibration\ndifferential mode for calibration\nLinearity calibration\ndisable\nenable\nready flag\nready interrupt\ngroup regular conversion start\ngroup regular conversion stop\nvoltage regulator enable\nlow power auto wait\nanalog watchdog 1 flag\nanalog watchdog 1 monitored channel selection\nanalog watchdog 1 enable on scope group regular\nanalog watchdog 1 interrupt\nanalog watchdog 1 monitoring a single channel or all …\nanalog watchdog 2 flag\nanalog watchdog 2 monitored channel selection\nanalog watchdog 2 interrupt\nanalog watchdog 3 flag\nanalog watchdog 3 monitored channel selection\nanalog watchdog 3 interrupt\nBoost mode control\ncalibration factor in differential mode\ncalibration factor in single-ended mode\ngroup regular continuous conversion mode\ndeep power down enable\nchannel differential or single-ended mode for channel\ngroup regular sequencer discontinuous mode\ngroup regular sequencer discontinuous number of ranks\nDMA transfer enable\ngroup regular end of unitary conversion flag\ngroup regular end of unitary conversion interrupt\ngroup regular end of sequence conversions flag\ngroup regular end of sequence conversions interrupt\ngroup regular end of sampling flag\ngroup regular end of sampling interrupt\ngroup regular external trigger polarity\ngroup regular external trigger source\nanalog watchdog 2 threshold low\nAnalog watchdog 2 higher threshold\nAnalog watchdog 3 higher threshold\ngroup injected conversion start\ngroup injected conversion stop\ngroup injected automatic trigger mode\nanalog watchdog 1 enable on scope group injected\ngroup injected sequencer rank 1 conversion data\ngroup injected sequencer discontinuous mode\ngroup injected end of unitary conversion flag\ngroup injected end of unitary conversion interrupt\ngroup injected end of sequence conversions flag\ngroup injected end of sequence conversions interrupt\ngroup injected external trigger polarity\ngroup injected external trigger source\ngroup injected sequencer scan length\noversampler enable on scope group injected\ngroup injected contexts queue disable\ngroup injected contexts queue mode\ngroup injected contexts queue overflow flag\ngroup injected contexts queue overflow interrupt\ngroup injected sequencer rank 1-4\nL3\nADC LDO output voltage ready (not always available)\nLinearity Calibration Factor\nLinearity calibration ready Word 1\nLinearity calibration ready Word 2\nLinearity calibration ready Word 3\nLinearity calibration ready Word 4\nLinearity calibration ready Word 5\nLinearity calibration ready Word 6\nLeft shift factor\nanalog watchdog 1 threshold low\nAnalog watchdog 2 lower threshold\nAnalog watchdog 3 lower threshold\noffset number x offset level\noffset number x channel selection\nOversampling ratio\ngroup regular overrun flag\ngroup regular overrun interrupt\ngroup regular overrun configuration\noversampling shift\nChannel x (VINP[i]) pre selection\ngroup regular conversion data\ndata resolution\noversampler enable on scope group regular\nRegular Oversampling mode\nRight-shift data after Offset 1 correction\nRight-shift data after Offset 2 correction\nRight-shift data after Offset 3 correction\nRight-shift data after Offset 4 correction\nchannel n * 10 + x sampling time\ngroup regular sequencer rank 1-4\ngroup regular sequencer rank 5-9\ngroup regular sequencer rank 10-14\ngroup regular sequencer rank 15-16\nSigned saturation enable\noversampling discontinuous mode (triggered mode) for group …\nchannel n * 10 + x sampling time\ngroup regular sequencer rank 1-4\ngroup regular sequencer rank 5-9\ngroup regular sequencer rank 10-14\ngroup regular sequencer rank 15-16\nSigned saturation enable\noversampling discontinuous mode (triggered mode) for group …\nAnalog watchdog 1 enabled on all channels\nAll oversampled conversions for a channel are run …\n10-bit resolution\n12-bit resolution in legacy mode (not optimized power …\n12-bit resolution\n14-bit resolution in legacy mode (not optimized power …\n14-bit resolution\n16-bit resolution\n8-bit resolution\nTrigger detection on both the rising and falling edges\nTrigger detection on both the rising and falling edges\nOversampling is temporary stopped and continued after …\n16.5 clock cycles\n1.5 clock cycles\n2.5 clock cycles\n32.5 clock cycles\n387.5 clock cycles\n64.5 clock cycles\n810.5 clock cycles\n8.5 clock cycles\nDFSDM mode selected\nCalibration for differential mode\nInput channel is configured in differential mode\nTrigger detection disabled\nTrigger detection disabled\nDMA Circular Mode selected\nDMA One Shot Mode selected\nStore output data in DR only\nTrigger detection on the falling edge\nTrigger detection on the falling edge\nBoost mode used when 6.25 MHz &lt; clock ≤ 12.5 MHz\nBoost mode used when 12.5 MHz &lt; clock ≤ 25.0 MHz\nBoost mode used when 25.0 MHz &lt; clock ≤ 50.0 MHz\nBoost mode used when clock ≤ 6.25 MHz\nJSQR Mode 0: Queue maintains the last written …\nJSQR Mode 1: An empty queue disables software and hardware …\nInput channel x is not pre-selected\nOverwrite DR register when an overrun is detected\nPre-select input channel x\nPreserve DR register when an overrun is detected\nOversampling is aborted and resumed from start after …\nTrigger detection on the rising edge\nTrigger detection on the rising edge\nAnalog watchdog 1 enabled on single channel selected in …\nCalibration for single-ended mode\nInput channel is configured in single-ended mode\nStop conversion of channel\nEach oversampled conversion for a channel needs a new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnalog-to-Digital Converter\nADC common control register\nADC common regular data register for dual and triple modes\nADC x common regular data register for 32-bit dual mode\nADC Common status register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nADC common control register\nADC common regular data register for dual and triple modes\nADC x common regular data register for 32-bit dual mode\nADC Common status register\nMaster ADC ready\nSlave ADC ready\nAnalog watchdog flag of the master ADC\nAnalog watchdog flag of the slave ADC\nADC clock mode\nDual ADC Mode Data Format\nDelay between 2 sampling phases\nDual ADC mode selection\nEnd of regular conversion of the master ADC\nEnd of regular conversion of the slave ADC\nEnd of regular sequence flag of the master ADC\nEnd of regular sequence flag of the slave ADC\nEnd of Sampling phase flag of the master ADC\nEnd of Sampling phase flag of the slave ADC\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnd of injected conversion flag of the master ADC\nEnd of injected conversion flag of the slave ADC\nEnd of injected sequence flag of the master ADC\nEnd of injected sequence flag of the slave ADC\nInjected Context Queue Overflow flag of the master ADC\nInjected Context Queue Overflow flag of the slave ADC\nOverrun flag of the master ADC\nOverrun flag of the slave ADC\nADC prescaler\nRegular data of the master/slave alternated ADCs\nRegular data of the master ADC\nRegular data of the slave ADC\nMaster ADC ready\nSlave ADC ready\nAnalog watchdog flag of the master ADC\nAnalog watchdog flag of the slave ADC\nADC clock mode\nDual ADC Mode Data Format\nDelay between 2 sampling phases\nDual ADC mode selection\nEnd of regular conversion of the master ADC\nEnd of regular conversion of the slave ADC\nEnd of regular sequence flag of the master ADC\nEnd of regular sequence flag of the slave ADC\nEnd of Sampling phase flag of the master ADC\nEnd of Sampling phase flag of the slave ADC\nEnd of injected conversion flag of the master ADC\nEnd of injected conversion flag of the slave ADC\nEnd of injected sequence flag of the master ADC\nEnd of injected sequence flag of the slave ADC\nInjected Context Queue Overflow flag of the master ADC\nInjected Context Queue Overflow flag of the slave ADC\nOverrun flag of the master ADC\nOverrun flag of the slave ADC\nADC prescaler\nRegular data of the master/slave alternated ADCs\nRegular data of the master ADC\nRegular data of the slave ADC\nVBAT enable\nVREFINT enable\nTemperature sensor enable\nVBAT enable\nVREFINT enable\nTemperature sensor enable\nUse Kernel Clock adc_ker_ck_input divided by PRESC. …\nadc_ker_ck_input not divided\nadc_ker_ck_input divided by 10\nadc_ker_ck_input divided by 12\nadc_ker_ck_input divided by 128\nadc_ker_ck_input divided by 16\nadc_ker_ck_input divided by 2\nadc_ker_ck_input divided by 256\nadc_ker_ck_input divided by 32\nadc_ker_ck_input divided by 4\nadc_ker_ck_input divided by 6\nadc_ker_ck_input divided by 64\nadc_ker_ck_input divided by 8\nDual, alternate trigger mode only\nDual, interleaved mode only\nDual, combined interleaved mode + injected simultaneous …\nDual, injected simultaneous mode only\nDual, regular simultaneous mode only\nDual, combined regular simultaneous + alternate trigger …\nDual, combined regular simultaneous + injected …\nCDR formatted for 32-bit down to 10-bit resolution\nCDR formatted for 8-bit resolution\nIndependent mode\nWithout data packing, CDR/CDR2 not used\nUse AHB clock rcc_hclk3. In this case rcc_hclk must equal …\nUse AHB clock rcc_hclk3 divided by 2\nUse AHB clock rcc_hclk3 divided by 4\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChannel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers\nDMA controller\nChannel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers\nDMA channel configuration register (DMA_CCR)\nReturns the argument unchanged.\nReturns the argument unchanged.\nDMA interrupt flag clear register (DMA_IFCR)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDMA interrupt status register (DMA_ISR)\nDMA channel 1 memory address register\nDMA channel 1 number of data register\nDMA channel 1 peripheral address register\nDMA channel configuration register (DMA_CCR)\nDMA interrupt status register (DMA_ISR)\nDMA channel 1 number of data register\nCircular mode enabled\nData transfer direction\nChannel enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChannel 1 Global interrupt flag\nHalf Transfer interrupt enable\nChannel 1 Half Transfer Complete flag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory to memory mode enabled\nMemory increment mode enabled\nMemory size\nNumber of data to transfer\nPeripheral increment mode enabled\nChannel Priority level\nPeripheral size\nCircular mode enabled\nData transfer direction\nChannel enable\nChannel 1 Global interrupt flag\nHalf Transfer interrupt enable\nChannel 1 Half Transfer Complete flag\nMemory to memory mode enabled\nMemory increment mode enabled\nMemory size\nNumber of data to transfer\nPeripheral increment mode enabled\nChannel Priority level\nPeripheral size\nTransfer complete interrupt enable\nChannel 1 Transfer Complete flag\nTransfer error interrupt enable\nChannel 1 Transfer Error flag\nTransfer complete interrupt enable\nChannel 1 Transfer Complete flag\nTransfer error interrupt enable\nChannel 1 Transfer Error flag\n16-bit size\n32-bit size\n8-bit size\nRead from memory\nRead from peripheral\nHigh priority\nLow priority\nMedium priority\nVery high priority\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nController area network with flexible data rate (FD)\nFDCAN CC Control Register\nFDCAN Core Release Register\nFDCAN Data Bit Timing and Prescaler Register\nFDCAN Error Counter Register\nFDCAN Core Release Register\nReturns the argument unchanged.\nFDCAN Global Filter Configuration Register\nFDCAN High Priority Message Status Register\nFDCAN Interrupt Enable Register\nFDCAN Interrupt Line Enable Register\nFDCAN Interrupt Line Select Register\nCalls <code>U::from(self)</code>.\nFDCAN Interrupt Register\nFDCAN Nominal Bit Timing and Prescaler Register\nFDCAN New Data 1 Register\nFDCAN New Data 2 Register\nFDCAN Protocol Status Register\nFDCAN RAM Watchdog Register\nFDCAN Rx Buffer Configuration Register\nFDCAN Rx Buffer Element Size Configuration Register\nCAN Rx FIFO X Acknowledge Register\nFDCAN Rx FIFO X Configuration Register\nFDCAN Rx FIFO X Status Register\nFDCAN Standard ID Filter Configuration Register\nFDCAN Transmitter Delay Compensation Register\nFDCAN Test Register\nFDCAN Timeout Counter Configuration Register\nFDCAN Timeout Counter Value Register\nFDCAN Timestamp Counter Configuration Register\nFDCAN Timestamp Counter Value Register\nFDCAN TT Capture Time Register\nFDCAN TT Cycle Sync Mark Register\nFDCAN TT Cycle Time and Count Register\nFDCAN TT Global Time Preset Register\nFDCAN TT Interrupt Enable Register\nFDCAN TT Interrupt Line Select Register\nFDCAN TT Interrupt Register\nFDCAN TT Local and Global Time Register\nFDCAN TT Matrix Limits Register\nFDCAN TT Operation Configuration Register\nFDCAN TT Operation Control Register\nFDCAN TT Operation Status Register\nFDCAN TT Reference Message Configuration Register\nFDCAN TT Trigger Memory Configuration Register\nFDCAN TT Time Mark Register\nFDCAN TT Trigger Select Register\nFDCAN TUR Configuration Register\nFDCAN TUR Numerator Actual Register\nFDCAN Tx Buffer Add Request Register\nFDCAN Tx Buffer Configuration Register\nFDCAN Tx Buffer Cancellation Finished Register\nFDCAN Tx Buffer Cancellation Finished Interrupt Enable …\nFDCAN Tx Buffer Cancellation Request Register\nFDCAN Tx Buffer Request Pending Register\nFDCAN Tx Buffer Transmission Interrupt Enable Register\nFDCAN Tx Buffer Transmission Occurred Register\nFDCAN Tx Event FIFO Acknowledge Register\nFDCAN Tx Event FIFO Configuration Register\nFDCAN Tx Event FIFO Status Register\nFDCAN Tx Buffer Element Size Configuration Register\nFDCAN Tx FIFO/Queue Status Register\nFDCAN Extended ID and Mask Register\nFDCAN Extended ID Filter Configuration Register\nFDCAN CC Control Register\nFDCAN Core Release Register\nFDCAN Data Bit Timing and Prescaler Register\nFDCAN Error Counter Register\nFDCAN Core Release Register\nFDCAN Global Filter Configuration Register\nFDCAN High Priority Message Status Register\nFDCAN Interrupt Enable Register\nFDCAN Interrupt Line Enable Register\nFDCAN Interrupt Line Select Register\nFDCAN Interrupt Register\nFDCAN Nominal Bit Timing and Prescaler Register\nFDCAN New Data 1 Register\nFDCAN New Data 2 Register\nFDCAN Protocol Status Register\nFDCAN RAM Watchdog Register\nFDCAN Rx Buffer Configuration Register\nFDCAN Rx Buffer Element Size Configuration Register\nCAN Rx FIFO X Acknowledge Register\nFDCAN Rx FIFO X Configuration Register\nFDCAN Rx FIFO X Status Register\nFDCAN Standard ID Filter Configuration Register\nFDCAN Transmitter Delay Compensation Register\nFDCAN Test Register\nFDCAN Timeout Counter Configuration Register\nFDCAN Timeout Counter Value Register\nFDCAN Timestamp Counter Configuration Register\nFDCAN Timestamp Counter Value Register\nFDCAN TT Capture Time Register\nFDCAN TT Cycle Sync Mark Register\nFDCAN TT Cycle Time and Count Register\nFDCAN TT Global Time Preset Register\nFDCAN TT Interrupt Enable Register\nFDCAN TT Interrupt Line Select Register\nFDCAN TT Interrupt Register\nFDCAN TT Local and Global Time Register\nFDCAN TT Matrix Limits Register\nFDCAN TT Operation Configuration Register\nFDCAN TT Operation Control Register\nFDCAN TT Operation Status Register\nFDCAN TT Reference Message Configuration Register\nFDCAN TT Trigger Memory Configuration Register\nFDCAN TT Time Mark Register\nFDCAN TT Trigger Select Register\nFDCAN TUR Configuration Register\nFDCAN TUR Numerator Actual Register\nFDCAN Tx Buffer Add Request Register\nFDCAN Tx Buffer Configuration Register\nFDCAN Tx Buffer Cancellation Finished Register\nFDCAN Tx Buffer Cancellation Finished Interrupt Enable …\nFDCAN Tx Buffer Cancellation Request Register\nFDCAN Tx Buffer Request Pending Register\nFDCAN Tx Buffer Transmission Interrupt Enable Register\nFDCAN Tx Buffer Transmission Occurred Register\nFDCAN Tx Event FIFO Acknowledge Register\nFDCAN Tx Event FIFO Configuration Register\nFDCAN Tx Event FIFO Status Register\nFDCAN Tx Buffer Element Size Configuration Register\nFDCAN Tx FIFO/Queue Status Register\nFDCAN Extended ID and Mask Register\nFDCAN Extended ID Filter Configuration Register\nActivity\nAccept Non-matching Frames Extended\nAccept Non-matching Frames Standard\nAdd Request\nAccess to Reserved Address\nAccess to Reserved Address Enable\nAccess to Reserved Address Line\nASM Restricted Operation Mode\nApplication Watchdog\nApplication Watchdog Interrupt Enable\nApplication Watchdog Event\nApplication Watchdog Interrupt Line\nApplication Watchdog Limit\nBit Error Corrected Interrupt Enable\nBit Error Corrected Interrupt Line\nBit Error Uncorrected Interrupt Enable\nBit Error Uncorrected Interrupt Line\nBuffer Index\nBus_Off Status\nBus_Off Status\nBus_Off Status Enable\nBus_Off Status\nFDCAN Bit Rate Switching\nCycle Count\nConfiguration Change Enable\nCycle Count Max\nCycle Count Value\nAN Error Logging\nConfiguration Error\nConfiguration Error Interrupt Enable\nConfiguration Error Interrupt Line\nCancellation Finished\nCancellation Finished Interrupt Enable\nCancellation Request\nClock Stop Acknowledge\nCycle Sync Mark\nChange of Synchronization Mode\nChange of Synchronization Mode Interrupt Enable\nChange of Synchronization Mode Interrupt Line\nClock Stop Request\nCycle Start Synchronization\nCycle Time\nCycle Time Target Phase\nDisable Automatic Retransmission\nTimestamp Day\nData BIt Rate Prescaler\nDenominator Configuration\nData Last Error Code\nMessage stored to Dedicated Rx Buffer\nMessage stored to Dedicated Rx Buffer Enable\nMessage stored to Dedicated Rx Buffer Interrupt Line\nSynchronization Jump Width\nData time segment after sample point\nData time segment after sample point\nEnable Clock Calibration\nExternal Clock Synchronization\nEnable External Clock Synchronization\nEvent FIFO Acknowledge Index\nEdge Filtering during Bus Integration\nEvent FIFO Full\nEvent FIFO Fill Level\nEvent FIFO Get Index\nEvent FIFO put index\nEvent FIFO Size\nEvent FIFO Start Address\nEvent FIFO Watermark\nEnable Global Time Filtering\nExtended ID Mask\nEnable Interrupt Line 0\nEnable Interrupt Line 1\nError Level\nError Level Changed\nChange Error Level Interrupt Enable\nChange Error Level Interrupt Line\nError Logging Overflow\nError Logging Overflow Enable\nError Logging Overflow Interrupt Line\nEnable Local Time\nExpected Number of Tx Triggers\nError Passive\nError Passive\nError Passive Enable\nError Passive Interrupt Line\nExternal Synchronization Control\nEnable Timeout Counter\nEndiannes Test Value\nEvent Trigger Polarity\nEvent trigger input selection\nWarning Status\nWarning Status\nWarning Status Enable\nWarning Status Interrupt Line\nRx FIFO X Acknowledge Index\nFD Operation Enable\nRx FIFO X Data Field Size\nRx FIFO X Full\nRx FIFO X Fill Level\nRx FIFO X Get Index\nFinish Gap\nFilter Index\nFilter List Standard Start Address\nFilter List Standard Start Address\nFilter List\nFIFO X operation mode\nRx FIFO X Put Index\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRx FIFO X Size\nRx FIFO X Start Address\nFIFO X Watermark\nGap Control Select\nGap Enable\nGap Finished Indicator\nGap Started Indicator\nGlobal Time\nGlobal Time Discontinuity\nGlobal Time Discontinuity Interrupt Enable\nGlobal Time Discontinuity Interrupt Line\nGlobal Time Error\nGlobal Time Error Interrupt Enable\nGlobal Time Error Interrupt Line\nGlobal Time Wrap\nGlobal Time Wrap Interrupt Enable\nGlobal Time Wrap Interrupt Line\nHigh Priority Message\nHigh Priority Message Enable\nHigh Priority Message Interrupt Line\nInitialization\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitial Reference Trigger Offset\nInitialization Watch Trigger\nInitialization Watch Trigger Interrupt Enable\nInitialization Watch Trigger Interrupt Line\nLoop Back mode\nTT Operation Control Register Locked\nTT Time Mark Register Locked\nLD of Synchronization Deviation Limit\nLast Error Code\nList Size Extended\nList Size Standard\nLocal Time\nBus Monitoring Mode\nTimestamp Month\nMessage RAM Access Failure\nMessage RAM Access Failure Enable\nMessage RAM Access Failure Interrupt Line\nMaster State\nMessage Storage Indicator\nNumerator Actual Value\nBit Rate Prescaler\nTime Preset\nNumerator Configuration Low\nNew data (buffers 0 - 31)\nNew data (buffers 32 - 63)\nNumber of Dedicated Transmit Buffers\nNext is Gap\nNon ISO Operation\nNSJW: Nominal (Re)Synchronization Jump Width.\nNominal Time segment before sample point\nNominal Time segment after sample point\nOperation Mode\nProtocol Error in Arbitration Phase (Nominal Bit Time is …\nProtocol Error in Arbitration Phase Enable\nProtocol Error in Arbitration Phase Line\nProtocol Error in Data Phase (Data Bit Time is used)\nProtocol Error in Data Phase Enable\nProtocol Error in Data Phase Line\nProtocol Exception Event\nProtocol Exception Handling Disable\nQuality of Clock Speed\nQuality of Global Time Phase\nRx Buffer Data Field Size\nBRS flag of last received FDCAN Message\nRx Buffer Start Address\nReceive Error Counter\nReceived FDCAN Message\nCore release\nESI flag of last received FDCAN Message\nRx FIFO X Full\nRx FIFO X Full Enable\nRx FIFO X Full Interrupt Line\nRx FIFO X Message Lost\nRx FIFO X Message Lost\nRx FIFO X Message Lost Enable\nRx FIFO X Message Lost Interrupt Line\nRx FIFO X New Message\nRx FIFO X New Message Enable\nRx FIFO X New Message Interrupt Line\nRx FIFO X Watermark Reached\nRx FIFO X Watermark Reached Enable\nRx FIFO X Watermark Reached Interrupt Line\nReference Identifier\nReference Message Payload Select\nReceive Error Passive\nReject Remote Frames Extended\nReject Remote Frames Standard\nRegister Time Mark Interrupt Pulse Enable\nRegister Time Mark Interrupt\nRegister Time Mark Interrupt Enable\nRegister Time Mark Interrupt Line\nReference Trigger Offset\nControl of Transmit Pin\nStart of Basic Cycle\nStart of Basic Cycle Interrupt Enable\nStart of Basic Cycle Interrupt Line\nScheduling Error 1\nScheduling Error 1 Interrupt Enable\nScheduling Error 1 Interrupt Line\nScheduling Error 2\nScheduling Error 2 Interrupt Enable\nScheduling Error 2 Interrupt Line\nActivity\nAccept Non-matching Frames Extended\nAccept Non-matching Frames Standard\nAdd Request\nAccess to Reserved Address\nAccess to Reserved Address Enable\nAccess to Reserved Address Line\nASM Restricted Operation Mode\nApplication Watchdog\nApplication Watchdog Interrupt Enable\nApplication Watchdog Event\nApplication Watchdog Interrupt Line\nApplication Watchdog Limit\nBit Error Corrected Interrupt Enable\nBit Error Corrected Interrupt Line\nBit Error Uncorrected Interrupt Enable\nBit Error Uncorrected Interrupt Line\nBuffer Index\nBus_Off Status\nBus_Off Status\nBus_Off Status Enable\nBus_Off Status\nFDCAN Bit Rate Switching\nCycle Count\nConfiguration Change Enable\nCycle Count Max\nCycle Count Value\nAN Error Logging\nConfiguration Error\nConfiguration Error Interrupt Enable\nConfiguration Error Interrupt Line\nCancellation Finished\nCancellation Finished Interrupt Enable\nCancellation Request\nClock Stop Acknowledge\nCycle Sync Mark\nChange of Synchronization Mode\nChange of Synchronization Mode Interrupt Enable\nChange of Synchronization Mode Interrupt Line\nClock Stop Request\nCycle Start Synchronization\nCycle Time\nCycle Time Target Phase\nDisable Automatic Retransmission\nTimestamp Day\nData BIt Rate Prescaler\nDenominator Configuration\nData Last Error Code\nMessage stored to Dedicated Rx Buffer\nMessage stored to Dedicated Rx Buffer Enable\nMessage stored to Dedicated Rx Buffer Interrupt Line\nSynchronization Jump Width\nData time segment after sample point\nData time segment after sample point\nEnable Clock Calibration\nExternal Clock Synchronization\nEnable External Clock Synchronization\nEvent FIFO Acknowledge Index\nEdge Filtering during Bus Integration\nEvent FIFO Full\nEvent FIFO Fill Level\nEvent FIFO Get Index\nEvent FIFO put index\nEvent FIFO Size\nEvent FIFO Start Address\nEvent FIFO Watermark\nEnable Global Time Filtering\nExtended ID Mask\nEnable Interrupt Line 0\nEnable Interrupt Line 1\nError Level\nError Level Changed\nChange Error Level Interrupt Enable\nChange Error Level Interrupt Line\nError Logging Overflow\nError Logging Overflow Enable\nError Logging Overflow Interrupt Line\nEnable Local Time\nExpected Number of Tx Triggers\nError Passive\nError Passive\nError Passive Enable\nError Passive Interrupt Line\nExternal Synchronization Control\nEnable Timeout Counter\nEndiannes Test Value\nEvent Trigger Polarity\nEvent trigger input selection\nWarning Status\nWarning Status\nWarning Status Enable\nWarning Status Interrupt Line\nRx FIFO X Acknowledge Index\nFD Operation Enable\nRx FIFO X Data Field Size\nRx FIFO X Full\nRx FIFO X Fill Level\nRx FIFO X Get Index\nFinish Gap\nFilter Index\nFilter List Standard Start Address\nFilter List Standard Start Address\nFilter List\nFIFO X operation mode\nRx FIFO X Put Index\nRx FIFO X Size\nRx FIFO X Start Address\nFIFO X Watermark\nGap Control Select\nGap Enable\nGap Finished Indicator\nGap Started Indicator\nGlobal Time\nGlobal Time Discontinuity\nGlobal Time Discontinuity Interrupt Enable\nGlobal Time Discontinuity Interrupt Line\nGlobal Time Error\nGlobal Time Error Interrupt Enable\nGlobal Time Error Interrupt Line\nGlobal Time Wrap\nGlobal Time Wrap Interrupt Enable\nGlobal Time Wrap Interrupt Line\nHigh Priority Message\nHigh Priority Message Enable\nHigh Priority Message Interrupt Line\nInitialization\nInitial Reference Trigger Offset\nInitialization Watch Trigger\nInitialization Watch Trigger Interrupt Enable\nInitialization Watch Trigger Interrupt Line\nLoop Back mode\nTT Operation Control Register Locked\nTT Time Mark Register Locked\nLD of Synchronization Deviation Limit\nLast Error Code\nList Size Extended\nList Size Standard\nLocal Time\nBus Monitoring Mode\nTimestamp Month\nMessage RAM Access Failure\nMessage RAM Access Failure Enable\nMessage RAM Access Failure Interrupt Line\nMaster State\nMessage Storage Indicator\nNumerator Actual Value\nBit Rate Prescaler\nTime Preset\nNumerator Configuration Low\nNew data (buffers 0 - 31)\nNew data (buffers 32 - 63)\nNumber of Dedicated Transmit Buffers\nNext is Gap\nNon ISO Operation\nNSJW: Nominal (Re)Synchronization Jump Width.\nNominal Time segment before sample point\nNominal Time segment after sample point\nOperation Mode\nProtocol Error in Arbitration Phase (Nominal Bit Time is …\nProtocol Error in Arbitration Phase Enable\nProtocol Error in Arbitration Phase Line\nProtocol Error in Data Phase (Data Bit Time is used)\nProtocol Error in Data Phase Enable\nProtocol Error in Data Phase Line\nProtocol Exception Event\nProtocol Exception Handling Disable\nQuality of Clock Speed\nQuality of Global Time Phase\nRx Buffer Data Field Size\nBRS flag of last received FDCAN Message\nRx Buffer Start Address\nReceive Error Counter\nReceived FDCAN Message\nCore release\nESI flag of last received FDCAN Message\nRx FIFO X Full\nRx FIFO X Full Enable\nRx FIFO X Full Interrupt Line\nRx FIFO X Message Lost\nRx FIFO X Message Lost\nRx FIFO X Message Lost Enable\nRx FIFO X Message Lost Interrupt Line\nRx FIFO X New Message\nRx FIFO X New Message Enable\nRx FIFO X New Message Interrupt Line\nRx FIFO X Watermark Reached\nRx FIFO X Watermark Reached Enable\nRx FIFO X Watermark Reached Interrupt Line\nReference Identifier\nReference Message Payload Select\nReceive Error Passive\nReject Remote Frames Extended\nReject Remote Frames Standard\nRegister Time Mark Interrupt Pulse Enable\nRegister Time Mark Interrupt\nRegister Time Mark Interrupt Enable\nRegister Time Mark Interrupt Line\nReference Trigger Offset\nControl of Transmit Pin\nStart of Basic Cycle\nStart of Basic Cycle Interrupt Enable\nStart of Basic Cycle Interrupt Line\nScheduling Error 1\nScheduling Error 1 Interrupt Enable\nScheduling Error 1 Interrupt Line\nScheduling Error 2\nScheduling Error 2 Interrupt Enable\nScheduling Error 2 Interrupt Line\nSet Global time\nStart of Matrix Cycle\nStart of Matrix Cycle Interrupt Enable\nStart of Matrix Cycle Interrupt Line\nStart of Gap\nStart of Gap Interrupt Enable\nStart of Gap Interrupt Line\nSchedule Phase Lock\nStep of Core release\nSub-step of Core release\nStop Watch Event\nStop Watch Event Interrupt Enable\nStop Watch Event Interrupt Line\nStop Watch Polarity\nStop Watch Source\nStop watch trigger input selection\nStop Watch Value\nSynchronization State\nTx Buffer Data Field Size\nTx Buffers Start Address\nTransmission Completed\nTransmission Completed Enable\nTransmission Cancellation Finished\nTransmission Cancellation Finished Enable\nTransmission Cancellation Finished Interrupt Line\nTransmission Completed Interrupt Line\nTimestamp Counter Prescaler\nTransceiver Delay Compensation\nTransmitter Delay Compensation Filter Window Length\nTransmitter Delay Compensation Offset\nTransmitter Delay Compensation Value\nTransmit Error Counter\nTx FIFO Empty\nTx FIFO Empty Enable\nTx Event FIFO Full\nTx Event FIFO Full Enable\nTx Event FIFO Full Interrupt Line\nTx FIFO Empty Interrupt Line\nTx Event FIFO Element Lost\nTx Event FIFO Element Lost\nTx Event FIFO Element Lost Enable\nTx Event FIFO Element Lost Interrupt Line\nTx Event FIFO New Entry\nTx Event FIFO New Entry Enable\nTx Event FIFO New Entry Interrupt Line\nTx Event FIFO Watermark Reached\nTx Event FIFO Watermark Reached Enable\nTx Event FIFO Watermark Reached Interrupt Line\nTest Mode Enable\nTx FIFO Free Level\nTFGI\nTx FIFO/Queue Full\nTx FIFO/Queue Mode\nTx FIFO/Queue Put Index\nTransmit FIFO/Queue Size\nTime Mark Cycle Code\nTransmission Interrupt Enable\nTime Master\nTime Mark\nRegister Time Mark Compare\nTrigger Memory Elements\nTime Mark Gap\nTime Master Priority\nTrigger Memory Start Address\nTransmission Occurred\nTimeout Counter\nTimeout Occurred\nTimeout Occurred Enable\nTimeout Occurred Interrupt Line\nTimeout Period\nTimeout Select\nTransmission Request Pending\nTimestamp Counter\nTimestamp Select\nTimestamp Wraparound\nTimestamp Wraparound Enable\nTimestamp Wraparound Interrupt Line\nTrigger Time Mark Interrupt Pulse Enable\nTrigger Time Mark Event Internal\nTrigger Time Mark Event Internal Interrupt Enable\nTrigger Time Mark Event Internal Interrupt Line\nLoop Back mode\nTx Enable Window\nTx Count Overflow\nTx Count Overflow Interrupt Enable\nTx Count Overflow Interrupt Line\nTXP\nTx Count Underflow\nTx Count Underflow Interrupt Enable\nTx Count Underflow Interrupt Line\nWatchdog configuration\nWatchdog Interrupt\nWatchdog Interrupt Enable\nWatchdog Interrupt Line\nWatchdog value\nWait for External Clock Synchronization\nWait for Event\nWait for Global Time Discontinuity\nWatch Trigger\nWatch Trigger Interrupt Enable\nWatch Trigger Interrupt Line\nExtended Identifier\nTimestamp Year\nSet Global time\nStart of Matrix Cycle\nStart of Matrix Cycle Interrupt Enable\nStart of Matrix Cycle Interrupt Line\nStart of Gap\nStart of Gap Interrupt Enable\nStart of Gap Interrupt Line\nSchedule Phase Lock\nStep of Core release\nSub-step of Core release\nStop Watch Event\nStop Watch Event Interrupt Enable\nStop Watch Event Interrupt Line\nStop Watch Polarity\nStop Watch Source\nStop watch trigger input selection\nStop Watch Value\nSynchronization State\nTx Buffer Data Field Size\nTx Buffers Start Address\nTransmission Completed\nTransmission Completed Enable\nTransmission Cancellation Finished\nTransmission Cancellation Finished Enable\nTransmission Cancellation Finished Interrupt Line\nTransmission Completed Interrupt Line\nTimestamp Counter Prescaler\nTransceiver Delay Compensation\nTransmitter Delay Compensation Filter Window Length\nTransmitter Delay Compensation Offset\nTransmitter Delay Compensation Value\nTransmit Error Counter\nTx FIFO Empty\nTx FIFO Empty Enable\nTx Event FIFO Full\nTx Event FIFO Full Enable\nTx Event FIFO Full Interrupt Line\nTx FIFO Empty Interrupt Line\nTx Event FIFO Element Lost\nTx Event FIFO Element Lost\nTx Event FIFO Element Lost Enable\nTx Event FIFO Element Lost Interrupt Line\nTx Event FIFO New Entry\nTx Event FIFO New Entry Enable\nTx Event FIFO New Entry Interrupt Line\nTx Event FIFO Watermark Reached\nTx Event FIFO Watermark Reached Enable\nTx Event FIFO Watermark Reached Interrupt Line\nTest Mode Enable\nTx FIFO Free Level\nTFGI\nTx FIFO/Queue Full\nTx FIFO/Queue Mode\nTx FIFO/Queue Put Index\nTransmit FIFO/Queue Size\nTime Mark Cycle Code\nTransmission Interrupt Enable\nTime Master\nTime Mark\nRegister Time Mark Compare\nTrigger Memory Elements\nTime Mark Gap\nTime Master Priority\nTrigger Memory Start Address\nTransmission Occurred\nTimeout Counter\nTimeout Occurred\nTimeout Occurred Enable\nTimeout Occurred Interrupt Line\nTimeout Period\nTimeout Select\nTransmission Request Pending\nTimestamp Counter\nTimestamp Select\nTimestamp Wraparound\nTimestamp Wraparound Enable\nTimestamp Wraparound Interrupt Line\nTrigger Time Mark Interrupt Pulse Enable\nTrigger Time Mark Event Internal\nTrigger Time Mark Event Internal Interrupt Enable\nTrigger Time Mark Event Internal Interrupt Line\nLoop Back mode\nTx Enable Window\nTx Count Overflow\nTx Count Overflow Interrupt Enable\nTx Count Overflow Interrupt Line\nTXP\nTx Count Underflow\nTx Count Underflow Interrupt Enable\nTx Count Underflow Interrupt Line\nWatchdog configuration\nWatchdog Interrupt\nWatchdog Interrupt Enable\nWatchdog Interrupt Line\nWatchdog value\nWait for External Clock Synchronization\nWait for Event\nWait for Global Time Discontinuity\nWatch Trigger\nWatch Trigger Interrupt Enable\nWatch Trigger Interrupt Line\nExtended Identifier\nTimestamp Year\nTx FIFO operation\nTx queue operation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCEC.\nThis register is used to configure the HDMI-CEC …\nCEC control register.\nReturns the argument unchanged.\nCEC interrupt enable register.\nCalls <code>U::from(self)</code>.\nCEC Interrupt and Status Register.\nCEC Rx Data Register.\nCEC Tx data register.\nThis register is used to configure the HDMI-CEC …\nCEC control register.\nCEC interrupt enable register.\nCEC Interrupt and Status Register.\nCEC Rx Data Register.\nCEC Tx data register.\nArbitration Lost ARBLST is set by hardware to inform …\nArbitration Lost Interrupt Enable The ARBLSTIE bit is set …\nAvoid Error-Bit Generation in Broadcast The BRDNOGEN bit …\nRx-Bit Rising Error BRE is set by hardware in case a …\nGenerate Error-Bit on Bit Rising Error The BREGEN bit is …\nBit Rising Error Interrupt Enable The BREIE bit is set and …\nRx-Stop on Bit Rising Error The BRESTP bit is set and …\nCEC Enable The CECEN bit is set and cleared by software. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRx-Long Bit Period Error LBPE is set by hardware in case a …\nGenerate Error-Bit on Long Bit Period Error The LBPEGEN …\nLong Bit Period Error Interrupt Enable The LBPEIE bit is …\nListen mode LSTN bit is set and cleared by software.\nOwn addresses configuration The OAR bits are set by …\nRx-Missing Acknowledge In receive mode, RXACKE is set by …\nRx-Missing Acknowledge Error Interrupt Enable The RXACKIE …\nRx-Byte Received The RXBR bit is set by hardware to inform …\nRx-Byte Received Interrupt Enable The RXBRIE bit is set …\nRx Data register. RXD is read-only and contains the last …\nEnd Of Reception RXEND is set by hardware to inform …\nEnd Of Reception Interrupt Enable The RXENDIE bit is set …\nRx-Overrun RXOVR is set by hardware if RXBR is not yet …\nRx-Buffer Overrun Interrupt Enable The RXOVRIE bit is set …\nRx-Tolerance The RXTOL bit is set and cleared by software. …\nRx-Short Bit Period Error SBPE is set by hardware in case …\nShort Bit Period Error Interrupt Enable The SBPEIE bit is …\nArbitration Lost ARBLST is set by hardware to inform …\nArbitration Lost Interrupt Enable The ARBLSTIE bit is set …\nAvoid Error-Bit Generation in Broadcast The BRDNOGEN bit …\nRx-Bit Rising Error BRE is set by hardware in case a …\nGenerate Error-Bit on Bit Rising Error The BREGEN bit is …\nBit Rising Error Interrupt Enable The BREIE bit is set and …\nRx-Stop on Bit Rising Error The BRESTP bit is set and …\nCEC Enable The CECEN bit is set and cleared by software. …\nRx-Long Bit Period Error LBPE is set by hardware in case a …\nGenerate Error-Bit on Long Bit Period Error The LBPEGEN …\nLong Bit Period Error Interrupt Enable The LBPEIE bit is …\nListen mode LSTN bit is set and cleared by software.\nOwn addresses configuration The OAR bits are set by …\nRx-Missing Acknowledge In receive mode, RXACKE is set by …\nRx-Missing Acknowledge Error Interrupt Enable The RXACKIE …\nRx-Byte Received The RXBR bit is set by hardware to inform …\nRx-Byte Received Interrupt Enable The RXBRIE bit is set …\nRx Data register. RXD is read-only and contains the last …\nEnd Of Reception RXEND is set by hardware to inform …\nEnd Of Reception Interrupt Enable The RXENDIE bit is set …\nRx-Overrun RXOVR is set by hardware if RXBR is not yet …\nRx-Buffer Overrun Interrupt Enable The RXOVRIE bit is set …\nRx-Tolerance The RXTOL bit is set and cleared by software. …\nRx-Short Bit Period Error SBPE is set by hardware in case …\nShort Bit Period Error Interrupt Enable The SBPEIE bit is …\nSignal Free Time SFT bits are set by software. In the …\nSFT Option Bit The SFTOPT bit is set and cleared by …\nTx-Missing Acknowledge Error In transmission mode, TXACKE …\nTx-Missing Acknowledge Error Interrupt Enable The TXACKEIE …\nTx-Byte Request TXBR is set by hardware to inform …\nTx-Byte Request Interrupt Enable The TXBRIE bit is set and …\nTx Data register. TXD is a write-only register containing …\nEnd of Transmission TXEND is set by hardware to inform …\nTx-End Of Message Interrupt Enable The TXENDIE bit is set …\nTx End Of Message The TXEOM bit is set by software to …\nTx-Error In transmission mode, TXERR is set by hardware if …\nTx-Error Interrupt Enable The TXERRIE bit is set and …\nTx Start Of Message TXSOM is set by software to command …\nTx-Buffer Underrun In transmission mode, TXUDR is set by …\nTx-Underrun Interrupt Enable The TXUDRIE bit is set and …\nSignal Free Time SFT bits are set by software. In the …\nSFT Option Bit The SFTOPT bit is set and cleared by …\nTx-Missing Acknowledge Error In transmission mode, TXACKE …\nTx-Missing Acknowledge Error Interrupt Enable The TXACKEIE …\nTx-Byte Request TXBR is set by hardware to inform …\nTx-Byte Request Interrupt Enable The TXBRIE bit is set and …\nTx Data register. TXD is a write-only register containing …\nEnd of Transmission TXEND is set by hardware to inform …\nTx-End Of Message Interrupt Enable The TXENDIE bit is set …\nTx End Of Message The TXEOM bit is set by software to …\nTx-Error In transmission mode, TXERR is set by hardware if …\nTx-Error Interrupt Enable The TXERRIE bit is set and …\nTx Start Of Message TXSOM is set by software to command …\nTx-Buffer Underrun In transmission mode, TXUDR is set by …\nTx-Underrun Interrupt Enable The TXUDRIE bit is set and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCOMP1.\nComparator configuration register 1.\nComparator configuration register 2.\nReturns the argument unchanged.\nComparator interrupt clear flag register.\nCalls <code>U::from(self)</code>.\nComparator option register.\nComparator status register.\nComparator configuration register 1.\nComparator configuration register 2.\nComparator interrupt clear flag register.\nComparator option register.\nComparator status register.\nSelection of source for alternate function of output ports.\nCOMP channel 1 blanking source selection bits.\nCOMP channel 1 blanking source selection bits.\nScaler bridge enable.\nScaler bridge enable.\nClear COMP channel 1 Interrupt Flag.\nCOMP channel 1 Interrupt Flag.\nCOMP channel 1 output status bit.\nCOMP channel 1 enable bit.\nCOMP channel 1 enable bit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCOMP channel 1 hysteresis selection bits.\nCOMP channel 1 hysteresis selection bits.\nCOMP channel 1 inverting input selection field.\nCOMP channel 1 inverting input selection field.\nCOMP channel 1 non-inverting input selection bit.\nCOMP channel 1 non-inverting input selection bit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCOMP channel 1 interrupt enable.\nCOMP channel 1 interrupt enable.\nLock bit.\nLock bit.\nCOMP channel 1 polarity selection bit.\nCOMP channel 1 polarity selection bit.\nPower Mode of the COMP channel 1.\nPower Mode of the COMP channel 1.\nVoltage scaler enable bit.\nVoltage scaler enable bit.\nSelection of source for alternate function of output ports.\nCOMP channel 1 blanking source selection bits.\nCOMP channel 1 blanking source selection bits.\nScaler bridge enable.\nScaler bridge enable.\nClear COMP channel 1 Interrupt Flag.\nCOMP channel 1 Interrupt Flag.\nCOMP channel 1 output status bit.\nCOMP channel 1 enable bit.\nCOMP channel 1 enable bit.\nCOMP channel 1 hysteresis selection bits.\nCOMP channel 1 hysteresis selection bits.\nCOMP channel 1 inverting input selection field.\nCOMP channel 1 inverting input selection field.\nCOMP channel 1 non-inverting input selection bit.\nCOMP channel 1 non-inverting input selection bit.\nCOMP channel 1 interrupt enable.\nCOMP channel 1 interrupt enable.\nLock bit.\nLock bit.\nCOMP channel 1 polarity selection bit.\nCOMP channel 1 polarity selection bit.\nPower Mode of the COMP channel 1.\nPower Mode of the COMP channel 1.\nVoltage scaler enable bit.\nVoltage scaler enable bit.\nWindow comparator mode selection bit.\nWindow comparator mode selection bit.\nHigh speed / full power\nUltra low power / ultra-low-power\nMedium speed / medium power\nMedium speed / medium power\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCyclic Redundancy Check calculation unit\nControl register\nData register - half-word sized\nData register\nData register - byte sized\nReturns the argument unchanged.\nIndependent Data register\nInitial CRC value\nCalls <code>U::from(self)</code>.\nCRC polynomial\nControl register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPolynomial size\nRESET bit\nReverse input data\nReverse output data\nPolynomial size\nRESET bit\nReverse input data\nReverse output data\nBit reversal done by byte\nBit reversal done by half-word\nBit order not affected\nBit order not affected\n16-bit polynomial\n32-bit polynomial\n7-bit polynomial\n8-bit polynomial\nBit reversed output\nBit reversal done by word\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClock recovery system\nconfiguration register\ncontrol register\nReturns the argument unchanged.\ninterrupt flag clear register\nCalls <code>U::from(self)</code>.\ninterrupt and status register\nconfiguration register\ncontrol register\ninterrupt flag clear register\ninterrupt and status register\nAutomatic trimming enable\nFrequency error counter enable\nError clear flag\nError flag\nSynchronization or trimming error interrupt enable\nExpected SYNC clear flag\nExpected SYNC flag\nExpected SYNC interrupt enable\nFrequency error capture\nFrequency error direction\nFrequency error limit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCounter reload value\nAutomatic trimming enable\nFrequency error counter enable\nError clear flag\nError flag\nSynchronization or trimming error interrupt enable\nExpected SYNC clear flag\nExpected SYNC flag\nExpected SYNC interrupt enable\nFrequency error capture\nFrequency error direction\nFrequency error limit\nCounter reload value\nGenerate software SYNC event\nSYNC divider\nSYNC error\nSYNC missed\nSYNC event OK clear flag\nSYNC event OK flag\nSYNC event OK interrupt enable\nSYNC polarity selection\nSYNC signal source selection\nSYNC warning clear flag\nSYNC warning flag\nSYNC warning interrupt enable\nHSI48 oscillator smooth trimming\nTrimming overflow or underflow\nGenerate software SYNC event\nSYNC divider\nSYNC error\nSYNC missed\nSYNC event OK clear flag\nSYNC event OK flag\nSYNC event OK interrupt enable\nSYNC polarity selection\nSYNC signal source selection\nSYNC warning clear flag\nSYNC warning flag\nSYNC warning interrupt enable\nHSI48 oscillator smooth trimming\nTrimming overflow or underflow\nGPIO selected as SYNC signal source\nLSE selected as SYNC signal source\nUSB SOF selected as SYNC signal source\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDigital-to-analog converter\ncalibration control register\ncontrol register\nchannel 12-bit left-aligned data holding register\ndual 12-bit left aligned data holding register\nchannel 12-bit right-aligned data holding register\ndual 12-bit right-aligned data holding register\nchannel 8-bit right-aligned data holding register\ndual 8-bit right aligned data holding register\nchannel data output register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmode control register\nsample and hold hold time register\nsample and hold refresh time register\nsample and hold sample time register\nstatus register\nsoftware trigger register\ncalibration control register\ncontrol register\nchannel 12-bit left-aligned data holding register\ndual 12-bit left aligned data holding register\nchannel 12-bit right-aligned data holding register\ndual 12-bit right-aligned data holding register\nchannel 8-bit right-aligned data holding register\ndual 8-bit right aligned data holding register\nchannel data output register\nmode control register\nsample and hold hold time register\nsample and hold refresh time register\nsample and hold sample time register\nstatus register\nsoftware trigger register\nchannel busy writing sample time flag\nchannel calibration offset status\nDAC channel calibration enable\nchannel 12-bit left-aligned data\nchannel 12-bit left-aligned data\nchannel 12-bit right-aligned data\nchannel 12-bit right-aligned data\nchannel 8-bit right-aligned data\nchannel 8-bit right-aligned data\nchannel DMA enable\nchannel DMA underrun flag\nchannel DMA Underrun Interrupt enable\nchannel data output\nchannel enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nchannel mask/amplitude selector\nDAC channel mode\nchannel offset trimming value\nchannel busy writing sample time flag\nchannel calibration offset status\nDAC channel calibration enable\nchannel 12-bit left-aligned data\nchannel 12-bit left-aligned data\nchannel 12-bit right-aligned data\nchannel 12-bit right-aligned data\nchannel 8-bit right-aligned data\nchannel 8-bit right-aligned data\nchannel DMA enable\nchannel DMA underrun flag\nchannel DMA Underrun Interrupt enable\nchannel data output\nchannel enable\nchannel mask/amplitude selector\nDAC channel mode\nchannel offset trimming value\nchannel software trigger\nchannel trigger enable\nchannel hold time\nchannel refresh time\nchannel sample time\nchannel trigger selection\nchannel noise/triangle wave generation enable\nchannel software trigger\nchannel trigger enable\nchannel hold time\nchannel refresh time\nchannel sample time\nchannel trigger selection\nchannel noise/triangle wave generation enable\nWave generation disabled\nNoise wave generation enabled\nNormal mode, external pin only, buffer disabled\nNormal mode, external pin only, buffer enabled\nNormal mode, external pin and internal peripherals, buffer …\nNormal mode, internal peripherals only, buffer disabled\nSample and hold mode, external pin only, buffer enabled\nSample and hold mode, external pin and internal …\nSample and hold mode, external pin and internal …\nSample and hold mode, internal peripherals only, buffer …\nTriangle wave generation enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug support\nAPB1L peripheral freeze register\nAPB2 peripheral freeze register\nAPB3 peripheral freeze register\nAPB4 peripheral freeze register\nConfiguration register\nReturns the argument unchanged.\nIdentity code\nCalls <code>U::from(self)</code>.\nAPB1L peripheral freeze register\nAPB2 peripheral freeze register\nAPB3 peripheral freeze register\nAPB4 peripheral freeze register\nConfiguration register\nIdentity code\nD1 debug clock enable enable\nD3 debug clock enable enable\nAllow debug in D1 Sleep mode\nAllow debug in D1 Standby mode\nAllow debug in D1 Stop mode\nDevice ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHRTIM stop in debug mode\nI2C1 SMBUS timeout stop in debug mode\nI2C2 SMBUS timeout stop in debug mode\nI2C3 SMBUS timeout stop in debug mode\nI2C4 SMBUS timeout stop in debug mode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndependent watchdog for D1 stop in debug mode\nLPTIM1 stop in debug mode\nLPTIM2 stop in debug mode\nLPTIM3 stop in debug mode\nLPTIM4 stop in debug mode\nLPTIM5 stop in debug mode\nRevision ID\nRTC stop in debug mode\nD1 debug clock enable enable\nD3 debug clock enable enable\nAllow debug in D1 Sleep mode\nAllow debug in D1 Standby mode\nAllow debug in D1 Stop mode\nDevice ID\nHRTIM stop in debug mode\nI2C1 SMBUS timeout stop in debug mode\nI2C2 SMBUS timeout stop in debug mode\nI2C3 SMBUS timeout stop in debug mode\nI2C4 SMBUS timeout stop in debug mode\nIndependent watchdog for D1 stop in debug mode\nLPTIM1 stop in debug mode\nLPTIM2 stop in debug mode\nLPTIM3 stop in debug mode\nLPTIM4 stop in debug mode\nLPTIM5 stop in debug mode\nRevision ID\nRTC stop in debug mode\nTIM1 stop in debug mode\nTIM12 stop in debug mode\nTIM13 stop in debug mode\nTIM14 stop in debug mode\nTIM15 stop in debug mode\nTIM16 stop in debug mode\nTIM17 stop in debug mode\nTIM2 stop in debug mode\nTIM3 stop in debug mode\nTIM4 stop in debug mode\nTIM5 stop in debug mode\nTIM6 stop in debug mode\nTIM7 stop in debug mode\nTIM8 stop in debug mode\nTrace clock enable enable\nExternal trigger output enable\nWWDG1 stop in debug mode\nTIM1 stop in debug mode\nTIM12 stop in debug mode\nTIM13 stop in debug mode\nTIM14 stop in debug mode\nTIM15 stop in debug mode\nTIM16 stop in debug mode\nTIM17 stop in debug mode\nTIM2 stop in debug mode\nTIM3 stop in debug mode\nTIM4 stop in debug mode\nTIM5 stop in debug mode\nTIM6 stop in debug mode\nTIM7 stop in debug mode\nTIM8 stop in debug mode\nTrace clock enable enable\nExternal trigger output enable\nWWDG1 stop in debug mode\nDigital camera interface\ncontrol register 1\ncrop window size\ncrop window start\ndata register\nembedded synchronization code register\nembedded synchronization unmask register\nReturns the argument unchanged.\ninterrupt clear register\ninterrupt enable register\nCalls <code>U::from(self)</code>.\nmasked interrupt status register\nraw interrupt status register\nstatus register\ncontrol register 1\ncrop window size\ncrop window start\ndata register\nembedded synchronization code register\nembedded synchronization unmask register\ninterrupt clear register\ninterrupt enable register\nmasked interrupt status register\nraw interrupt status register\nstatus register\nData byte 0\nData byte 1\nData byte 2\nData byte 3\nCapture count\nCapture enable\nCapture mode\nCrop feature\nExtended data mode\nDCMI enable\nSynchronization error interrupt enable\nSynchronization error interrupt status clear\nSynchronization error masked interrupt status\nSynchronization error raw interrupt status\nEmbedded synchronization select\nFrame capture rate control\nFrame end delimiter code\nFrame end delimiter unmask\nFIFO not empty\nCapture complete interrupt enable\nCapture complete interrupt status clear\nCapture complete masked interrupt status\nCapture complete raw interrupt status\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrame start delimiter code\nFrame start delimiter unmask\nHorizontal offset count\nHorizontal synchronization polarity\nHSYNC\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJPEG format\nLine end delimiter code\nLine end delimiter unmask\nLine interrupt enable\nline interrupt status clear\nLine masked interrupt status\nLine raw interrupt status\nLine start delimiter code\nLine start delimiter unmask\nOverrun interrupt enable\nOverrun interrupt status clear\nOverrun masked interrupt status\nOverrun raw interrupt status\nPixel clock polarity\nData byte 0\nData byte 1\nData byte 2\nData byte 3\nCapture count\nCapture enable\nCapture mode\nCrop feature\nExtended data mode\nDCMI enable\nSynchronization error interrupt enable\nSynchronization error interrupt status clear\nSynchronization error masked interrupt status\nSynchronization error raw interrupt status\nEmbedded synchronization select\nFrame capture rate control\nFrame end delimiter code\nFrame end delimiter unmask\nFIFO not empty\nCapture complete interrupt enable\nCapture complete interrupt status clear\nCapture complete masked interrupt status\nCapture complete raw interrupt status\nFrame start delimiter code\nFrame start delimiter unmask\nHorizontal offset count\nHorizontal synchronization polarity\nHSYNC\nJPEG format\nLine end delimiter code\nLine end delimiter unmask\nLine interrupt enable\nline interrupt status clear\nLine masked interrupt status\nLine raw interrupt status\nLine start delimiter code\nLine start delimiter unmask\nOverrun interrupt enable\nOverrun interrupt status clear\nOverrun masked interrupt status\nOverrun raw interrupt status\nPixel clock polarity\nVertical line count\nVertical synchronization polarity\nVertical start line count\nVSYNC\nVSYNC interrupt enable\nVertical synch interrupt status clear\nVSYNC masked interrupt status\nVSYNC raw interrupt status\nVertical line count\nVertical synchronization polarity\nVertical start line count\nVSYNC\nVSYNC interrupt enable\nVertical synch interrupt status clear\nVSYNC masked interrupt status\nVSYNC raw interrupt status\nDMA controller\nStream cluster: S?CR, S?NDTR, S?M0AR, S?M1AR and S?FCR …\nstream x configuration register\nstream x FIFO control register\nReturns the argument unchanged.\nReturns the argument unchanged.\nlow interrupt flag clear register\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nlow interrupt status register\nstream x memory 0 address register\nstream x memory 1 address register\nstream x number of data register\nstream x peripheral address register\nStream cluster: S?CR, S?NDTR, S?M0AR, S?M1AR and S?FCR …\nDMA2D\nDMA2D AXI master timer configuration register\nDMA2D background CLUT memory address register\nDMA2D background color register\nDMA2D background memory address register\nDMA2D background offset register\nDMA2D background PFC control register\nDMA2D control register\nDMA2D foreground CLUT memory address register\nDMA2D foreground color register\nDMA2D foreground memory address register\nDMA2D foreground offset register\nDMA2D foreground PFC control register\nReturns the argument unchanged.\nDMA2D interrupt flag clear register\nCalls <code>U::from(self)</code>.\nDMA2D Interrupt Status Register\nDMA2D line watermark register\nDMA2D number of line register\nDMA2D output color register\nDMA2D output memory address register\nDMA2D output offset register\nDMA2D output PFC control register\nDMA2D AXI master timer configuration register\nDMA2D background CLUT memory address register\nDMA2D background color register\nDMA2D background memory address register\nDMA2D background offset register\nDMA2D background PFC control register\nDMA2D control register\nDMA2D foreground CLUT memory address register\nDMA2D foreground color register\nDMA2D foreground memory address register\nDMA2D foreground offset register\nDMA2D foreground PFC control register\nDMA2D interrupt flag clear register\nDMA2D Interrupt Status Register\nDMA2D line watermark register\nDMA2D number of line register\nDMA2D output color register\nDMA2D output memory address register\nDMA2D output offset register\nDMA2D output PFC control register\nAbort This bit can be used to abort the current transfer. …\nAlpha Inverted This bit inverts the alpha value. Once the …\nAlpha Inverted This bit inverts the alpha value. Once the …\nAlpha Inverted This bit inverts the alpha value. Once the …\nAlpha value These bits define a fixed alpha channel value …\nAlpha value These bits define a fixed alpha channel value …\nAlpha Channel Value These bits define the alpha channel of …\nAlpha mode These bits define which alpha channel value to …\nAlpha mode These bits select the alpha channel value to be …\nBlue Value These bits define the blue value for the A4 or …\nBlue Value These bits defines the blue value for the A4 or …\nBlue Value These bits define the blue value of the output …\nClear CLUT access error interrupt flag Programming this …\nCLUT access error interrupt enable This bit is set and …\nCLUT access error interrupt flag This bit is set when the …\nClear configuration error interrupt flag Programming this …\nCLUT Color mode These bits define the color format of the …\nCLUT color mode This bit defines the color format of the …\nClear CLUT transfer complete interrupt flag Programming …\nConfiguration Error Interrupt Enable This bit is set and …\nConfiguration error interrupt flag This bit is set when …\nColor mode These bits define the color format of the …\nColor mode These bits defines the color format of the …\nColor mode These bits define the color format of the …\nCLUT size These bits define the size of the CLUT used for …\nCLUT size These bits define the size of the CLUT used for …\nChroma Sub-Sampling These bits define the chroma …\nCLUT transfer complete interrupt enable This bit is set …\nClear transfer complete interrupt flag Programming this …\nCLUT transfer complete interrupt flag This bit is set when …\nClear Transfer error interrupt flag Programming this bit …\nClear transfer watermark interrupt flag Programming this …\nDead Time Dead time value in the AXI clock cycle inserted …\nEnable Enables the dead time functionality.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGreen Value These bits define the green value for the A4 …\nGreen Value These bits defines the green value for the A4 …\nGreen Value These bits define the green value of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine offset Line offset used for the background image …\nLine offset Line offset used for the foreground expressed …\nLine Offset Line offset used for the output (expressed in …\nLine watermark These bits allow to configure the line …\nMemory address Address of the data used for the CLUT …\nMemory address Address of the data used for the background …\nMemory Address Address of the data used for the CLUT …\nMemory address Address of the data used for the foreground …\nMemory Address Address of the data used for the output …\nDMA2D mode This bit is set and cleared by software. It …\nNumber of lines Number of lines of the area to be …\nPixel per lines Number of pixels per lines of the area to …\nRed Blue Swap This bit allows to swap the R &amp; B to support …\nRed Blue Swap This bit allows to swap the R &amp; B to support …\nRed Blue Swap This bit allows to swap the R &amp; B to support …\nRed Value These bits define the red value for the A4 or A8 …\nRed Value These bits defines the red value for the A4 or …\nRed Value These bits define the red value of the output …\nSwap Bytes\nAbort This bit can be used to abort the current transfer. …\nAlpha Inverted This bit inverts the alpha value. Once the …\nAlpha Inverted This bit inverts the alpha value. Once the …\nAlpha Inverted This bit inverts the alpha value. Once the …\nAlpha value These bits define a fixed alpha channel value …\nAlpha value These bits define a fixed alpha channel value …\nAlpha Channel Value These bits define the alpha channel of …\nAlpha mode These bits define which alpha channel value to …\nAlpha mode These bits select the alpha channel value to be …\nBlue Value These bits define the blue value for the A4 or …\nBlue Value These bits defines the blue value for the A4 or …\nBlue Value These bits define the blue value of the output …\nClear CLUT access error interrupt flag Programming this …\nCLUT access error interrupt enable This bit is set and …\nCLUT access error interrupt flag This bit is set when the …\nClear configuration error interrupt flag Programming this …\nCLUT Color mode These bits define the color format of the …\nCLUT color mode This bit defines the color format of the …\nClear CLUT transfer complete interrupt flag Programming …\nConfiguration Error Interrupt Enable This bit is set and …\nConfiguration error interrupt flag This bit is set when …\nColor mode These bits define the color format of the …\nColor mode These bits defines the color format of the …\nColor mode These bits define the color format of the …\nCLUT size These bits define the size of the CLUT used for …\nCLUT size These bits define the size of the CLUT used for …\nChroma Sub-Sampling These bits define the chroma …\nCLUT transfer complete interrupt enable This bit is set …\nClear transfer complete interrupt flag Programming this …\nCLUT transfer complete interrupt flag This bit is set when …\nClear Transfer error interrupt flag Programming this bit …\nClear transfer watermark interrupt flag Programming this …\nDead Time Dead time value in the AXI clock cycle inserted …\nEnable Enables the dead time functionality.\nGreen Value These bits define the green value for the A4 …\nGreen Value These bits defines the green value for the A4 …\nGreen Value These bits define the green value of the …\nLine offset Line offset used for the background image …\nLine offset Line offset used for the foreground expressed …\nLine Offset Line offset used for the output (expressed in …\nLine watermark These bits allow to configure the line …\nMemory address Address of the data used for the CLUT …\nMemory address Address of the data used for the background …\nMemory Address Address of the data used for the CLUT …\nMemory address Address of the data used for the foreground …\nMemory Address Address of the data used for the output …\nDMA2D mode This bit is set and cleared by software. It …\nNumber of lines Number of lines of the area to be …\nPixel per lines Number of pixels per lines of the area to …\nRed Blue Swap This bit allows to swap the R &amp; B to support …\nRed Blue Swap This bit allows to swap the R &amp; B to support …\nRed Blue Swap This bit allows to swap the R &amp; B to support …\nRed Value These bits define the red value for the A4 or A8 …\nRed Value These bits defines the red value for the A4 or …\nRed Value These bits define the red value of the output …\nSwap Bytes\nStart This bit is set to start the automatic loading of …\nStart This bit can be used to launch the DMA2D according …\nStart This bit can be set to start the automatic loading …\nSuspend This bit can be used to suspend the current …\nTransfer complete interrupt enable This bit is set and …\nTransfer complete interrupt flag This bit is set when a …\nTransfer error interrupt enable This bit is set and …\nTransfer error interrupt flag This bit is set when an …\nTransfer watermark interrupt enable This bit is set and …\nTransfer watermark interrupt flag This bit is set when the …\nStart This bit is set to start the automatic loading of …\nStart This bit can be used to launch the DMA2D according …\nStart This bit can be set to start the automatic loading …\nSuspend This bit can be used to suspend the current …\nTransfer complete interrupt enable This bit is set and …\nTransfer complete interrupt flag This bit is set when a …\nTransfer error interrupt enable This bit is set and …\nTransfer error interrupt flag This bit is set when an …\nTransfer watermark interrupt enable This bit is set and …\nTransfer watermark interrupt flag This bit is set when the …\nColor mode A4\nColor mode A4\nColor mode A8\nColor mode A8\nTransfer abort requested\nColor mode AL44\nColor mode AL44\nColor mode AL88\nColor mode AL88\nColor mode ARGB1555\nColor mode ARGB1555\nARGB1555\nColor mode ARGB4444\nColor mode ARGB4444\nARGB4444\nCLUT color format ARGB8888\nColor mode ARGB8888\nCLUT color format ARGB8888\nColor mode ARGB8888\nARGB8888\nClear the CAEIF flag in the ISR register\nClear the CEIF flag in the ISR register\nClear the CTCIF flag in the ISR register\nClear the TCIF flag in the ISR register\nClear the TEIF flag in the ISR register\nClear the TWIF flag in the ISR register\nInverted alpha\nInverted alpha\nInverted alpha\nColor mode L4\nColor mode L4\nColor mode L8\nColor mode L8\nMemory-to-memory (FG fetch only)\nMemory-to-memory with PFC (FG fetch only with FG PFC …\nMemory-to-memory with blending (FG and BG fetch with PFC …\nMultiply with value in ALPHA[7:0]\nMultiply with value in ALPHA[7:0]\nNo modification of alpha channel\nNo modification of alpha channel\nRegister-to-memory\nNo Red Blue Swap (RGB or ARGB)\nNo Red Blue Swap (RGB or ARGB)\nNo Red Blue Swap (RGB or ARGB)\nRegular byte order\nRegular alpha\nRegular alpha\nRegular alpha\nReplace with value in ALPHA[7:0]\nReplace with value in ALPHA[7:0]\nColor mode RGB565\nColor mode RGB565\nRGB565\nCLUT color format RGB888\nColor mode RGB888\nCLUT color format RGB888\nColor mode RGB888\nRGB888\nStart the automatic loading of the CLUT\nLaunch the DMA2D\nStart the automatic loading of the CLUT\nRed Blue Swap (BGR or ABGR)\nRed Blue Swap (BGR or ABGR)\nRed Blue Swap (BGR or ABGR)\nBytes are swapped two by two\nColor mode YCbCr\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstream x configuration register\nstream x FIFO control register\ninterrupt register\nstream x number of data register\nCircular mode enabled\nCurrent target (only in double buffer mode)\nDouble buffer mode enabled\nData transfer direction\nDirect mode disable\nDirect mode error interrupt enable\nStream x direct mode error interrupt flag (x=3..0)\nStream enable / flag stream ready when read low\nFIFO error interrupt enable\nStream x FIFO error interrupt flag (x=3..0)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFIFO status\nFIFO threshold selection\nHalf transfer interrupt enable\nStream x half transfer interrupt flag (x=3..0)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory burst transfer configuration\nMemory increment mode enabled\nMemory data size\nNumber of data items to transfer\nPeripheral burst transfer configuration\nPeripheral flow controller\nPeripheral increment mode enabled\nPeripheral increment offset size\nPriority level\nPeripheral data size\nCircular mode enabled\nCurrent target (only in double buffer mode)\nDouble buffer mode enabled\nData transfer direction\nDirect mode disable\nDirect mode error interrupt enable\nStream x direct mode error interrupt flag (x=3..0)\nStream enable / flag stream ready when read low\nFIFO error interrupt enable\nStream x FIFO error interrupt flag (x=3..0)\nFIFO status\nFIFO threshold selection\nHalf transfer interrupt enable\nStream x half transfer interrupt flag (x=3..0)\nMemory burst transfer configuration\nMemory increment mode enabled\nMemory data size\nNumber of data items to transfer\nPeripheral burst transfer configuration\nPeripheral flow controller\nPeripheral increment mode enabled\nPeripheral increment offset size\nPriority level\nPeripheral data size\nTransfer complete interrupt enable\nStream x transfer complete interrupt flag (x = 3..0)\nTransfer error interrupt enable\nStream x transfer error interrupt flag (x=3..0)\nEnable bufferable transfers\nTransfer complete interrupt enable\nStream x transfer complete interrupt flag (x = 3..0)\nTransfer error interrupt enable\nStream x transfer error interrupt flag (x=3..0)\nEnable bufferable transfers\nHalf-word (16-bit)\nWord (32-bit)\nByte (8-bit)\nDirect mode is disabled\nThe DMA is the flow controller\nFIFO is empty\nDirect mode is enabled\nThe offset size for the peripheral address calculation is …\nFIFO is full\nFull FIFO\n1/2 full FIFO\nHigh\nIncremental burst of 16 beats\nIncremental burst of 4 beats\nIncremental burst of 8 beats\nLow\nMedium\nThe current target memory is Memory 0\nThe current target memory is Memory 1\nMemory-to-memory\nMemory-to-peripheral\nThe peripheral is the flow controller\nPeripheral-to-memory\nThe offset size for the peripheral address calculation is …\n1/4 full FIFO\n0 &lt; fifo_level &lt; 1/4\n1/4 &lt;= fifo_level &lt; 1/2\n1/2 &lt;= fifo_level &lt; 3/4\n3/4 &lt;= fifo_level &lt; full\nSingle transfer\n3/4 full FIFO\nVery high\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDMAMUX\nDMAMux - DMA request line multiplexer channel x control …\nDMAMUX request line multiplexer interrupt clear flag …\nDMAMUX request line multiplexer interrupt channel status …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDMAMux - DMA request generator clear flag register\nDMAMux - DMA request generator channel x control register\nDMAMux - DMA request generator status register\nDMAMux - DMA request line multiplexer channel x control …\nDMAMUX request line multiplexer interrupt channel status …\nDMAMux - DMA request generator channel x control register\nDMAMux - DMA request generator status register\nInput DMA request line selected\nEvent generation enable/disable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDMA request generator channel enable/disable\nNumber of DMA requests to generate Defines the number of …\nDMA request generator trigger event type selection Defines …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of DMA requests to forward Defines the number of …\nTrigger event overrun flag The flag is set when a trigger …\nInterrupt enable at trigger event overrun\nSynchronous operating mode enable/disable\nInput DMA request line selected\nEvent generation enable/disable\nDMA request generator channel enable/disable\nNumber of DMA requests to generate Defines the number of …\nDMA request generator trigger event type selection Defines …\nNumber of DMA requests to forward Defines the number of …\nTrigger event overrun flag The flag is set when a trigger …\nInterrupt enable at trigger event overrun\nSynchronous operating mode enable/disable\nDMA request trigger input selected\nSynchronization overrun event flag\nInterrupt enable at synchronization event overrun\nSynchronization event type selector Defines the …\nSynchronization input selected\nDMA request trigger input selected\nSynchronization overrun event flag\nInterrupt enable at synchronization event overrun\nSynchronization event type selector Defines the …\nSynchronization input selected\nRising and falling edges\nFalling edge\nNo event, i.e. no synchronization nor detection\nRising edge\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDigital temperature sensor.\nTemperature sensor configuration register 1.\nTemperature sensor data register.\nReturns the argument unchanged.\nTemperature sensor clear interrupt flag register.\nCalls <code>U::from(self)</code>.\nTemperature sensor interrupt enable register.\nTemperature sensor interrupt threshold register 1.\nTemperature sensor option register.\nTemperature sensor ramp value register.\nTemperature sensor status register.\nTemperature sensor T0 value register 1.\nTemperature sensor configuration register 1.\nTemperature sensor data register.\nTemperature sensor clear interrupt flag register.\nTemperature sensor interrupt enable register.\nTemperature sensor interrupt threshold register 1.\nTemperature sensor option register.\nTemperature sensor ramp value register.\nTemperature sensor status register.\nTemperature sensor T0 value register 1.\nAsynchronous interrupt enable flag for end of measurement …\nAsynchronous interrupt flag for end of measure on …\nAsynchronous interrupt enable flag on high threshold for …\nAsynchronous interrupt flag for high threshold on …\nAsynchronous interrupt enable flag for low threshold on …\nAsynchronous interrupt flag for low threshold on …\nWrite once bit. Clear the asynchronous IT flag for End Of …\nAsynchronous interrupt clear flag for high threshold on …\nAsynchronous interrupt clear flag for low threshold on …\nInterrupt clear flag for end of measurement on temperature …\nInterrupt clear flag for high threshold on temperature …\nInterrupt clear flag for low threshold on temperature …\nTemperature sensor 1 enable bit This bit is set and …\nEngineering value of the frequency measured at T0 for. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHigh interrupt threshold for temperature sensor 1 These …\nHigh speed clock division ratio These bits are set and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInput trigger selection bit for temperature sensor 1 These …\nInterrupt enable flag for end of measurement on …\nInterrupt flag for end of measurement on temperature …\nInterrupt enable flag for high threshold on temperature …\nInterrupt flag for high threshold on temperature sensor 1, …\nInterrupt enable flag for low threshold on temperature …\nInterrupt flag for low threshold on temperature sensor 1, …\nLow interrupt threshold for temperature sensor 1 These …\nValue of the counter output value for temperature sensor 1.\ngeneral purpose option bits.\nQuick measurement option bit This bit is set and cleared …\nEngineering value of the ramp coefficient for the …\nTemperature sensor 1 ready flag This bit is set and reset …\nReference clock selection bit This bit is set and cleared …\nAsynchronous interrupt enable flag for end of measurement …\nAsynchronous interrupt flag for end of measure on …\nAsynchronous interrupt enable flag on high threshold for …\nAsynchronous interrupt flag for high threshold on …\nAsynchronous interrupt enable flag for low threshold on …\nAsynchronous interrupt flag for low threshold on …\nWrite once bit. Clear the asynchronous IT flag for End Of …\nAsynchronous interrupt clear flag for high threshold on …\nAsynchronous interrupt clear flag for low threshold on …\nInterrupt clear flag for end of measurement on temperature …\nInterrupt clear flag for high threshold on temperature …\nInterrupt clear flag for low threshold on temperature …\nTemperature sensor 1 enable bit This bit is set and …\nEngineering value of the frequency measured at T0 for. …\nHigh interrupt threshold for temperature sensor 1 These …\nHigh speed clock division ratio These bits are set and …\nInput trigger selection bit for temperature sensor 1 These …\nInterrupt enable flag for end of measurement on …\nInterrupt flag for end of measurement on temperature …\nInterrupt enable flag for high threshold on temperature …\nInterrupt flag for high threshold on temperature sensor 1, …\nInterrupt enable flag for low threshold on temperature …\nInterrupt flag for low threshold on temperature sensor 1, …\nLow interrupt threshold for temperature sensor 1 These …\nValue of the counter output value for temperature sensor 1.\ngeneral purpose option bits.\nQuick measurement option bit This bit is set and cleared …\nEngineering value of the ramp coefficient for the …\nTemperature sensor 1 ready flag This bit is set and reset …\nReference clock selection bit This bit is set and cleared …\nSampling time for temperature sensor 1 These bits allow …\nStart frequency measurement on temperature sensor 1 This …\nEngineering value of the T0 temperature for temperature …\nSampling time for temperature sensor 1 These bits allow …\nStart frequency measurement on temperature sensor 1 This …\nEngineering value of the T0 temperature for temperature …\nExternal interrupt/event controller\nEvent mask register\nReturns the argument unchanged.\nFalling Trigger selection register\nInterrupt mask register\nCalls <code>U::from(self)</code>.\nPending register\nRising Trigger selection register\nSoftware interrupt event register\nEXTI lines register, 1 bit per line\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEXTI line\nEXTI line\nFDCAN Message RAM\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFDCAN Message RAM\nCluster BANK%s, containing KEYR?, CR?, SR?, CCR?, …\nFlash\nAccess control register\nCluster BANK%s, containing KEYR?, CR?, SR?, CCR?, …\nFLASH register with boot address\nFLASH register with boot address\nFLASH clear control register for bank 1\nFLASH control register for bank 1\nFLASH CRC control register for bank 1\nFLASH CRC data register\nFLASH CRC end address register for bank 1\nFLASH CRC start address register for bank 1\nFLASH ECC fail address for bank 1\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFLASH key register for bank 1\nFLASH option clear control register\nFLASH option control register\nFLASH option key register\nFLASH option status register\nFLASH option status register\nFLASH protection address for bank 1\nFLASH protection address for bank 1\nFLASH secure address for bank 1\nFLASH secure address for bank 1\nFLASH status register for bank 1\nFLASH write sector protection for bank 1\nFLASH write sector protection for bank 1\nAccess control register\nFLASH register with boot address\nFLASH register with boot address\nFLASH clear control register for bank 1\nFLASH control register for bank 1\nFLASH CRC control register for bank 1\nFLASH CRC data register\nFLASH CRC end address register for bank 1\nFLASH CRC start address register for bank 1\nFLASH ECC fail address for bank 1\nFLASH option clear control register\nFLASH option control register\nFLASH option status register\nFLASH option status register\nFLASH protection address for bank 1\nFLASH protection address for bank 1\nFLASH secure address for bank 1\nFLASH secure address for bank 1\nFLASH status register for bank 1\nFLASH write sector protection for bank 1\nFLASH write sector protection for bank 1\nBank 1 CRC sector select bit\nBank 1 CRC select bit\nBank 1 erase request\nBoot address 0\nBoot address 0\nBoot address 1\nBoot address 1\nBrownout level option status bit\nBOR reset level option configuration bits\nBank 1 ongoing program flag\nBank 1 CRC clear bit\nBank 1 CRC sector list clear bit\nBank 1 CRCEND1 flag clear bit\nBank 1 CRC read error clear bit\nBank 1 DBECCERR1 flag clear bit\nBank 1 EOP1 flag clear bit\nBank 1 INCERR1 flag clear bit\nBank 1 OPERR1 flag clear bit\nOPTCHANGEERR reset bit\nBank 1 PGSERR1 flag clear bi\nBank 1 RDPERR1 flag clear bit\nBank 1 RDSERR1 flag clear bit\nBank 1 SNECCERR1 flag clear bit\nBank 1 STRBERR1 flag clear bit\nBank 1 WRPERR1 flag clear bit\nBank 1 CRC burst size\nBank 1 CRC busy flag\nBank 1 CRC sector mode select bit\nCRC result\nBank 1 CRC control bit\nCRC end address on bank 1\nBank 1 CRC sector number\nCRC start address on bank 1\nBank 1 CRC-complete flag\nBank 1 end of CRC calculation interrupt enable bit\nBank 1 CRC read error flag\nBank 1 CRC read error interrupt enable bit\nBank 1 ECC double detection error flag\nBank 1 ECC double detection error interrupt enable bit\nBank 1 PCROP protected erase enable option status bit\nBank 1 PCROP protected erase enable option configuration …\nBank 1 secure protected erase enable option status bit\nBank 1 secure protected erase enable option configuration …\nBank 1 end-of-program flag\nBank 1 end-of-program interrupt control bit\nBank 1 ECC error address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBank 1 write forcing control bit\nIWDG Standby mode freeze option status bit\nIWDG Standby mode freeze option configuration bit\nIWDG Stop mode freeze option status bit\nIWDG Stop mode freeze option configuration bit\nBank 1 inconsistency error flag\nBank 1 inconsistency error interrupt enable bit\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O high-speed at low-voltage status bit …\nI/O high-speed at low-voltage (PRODUCT_BELOW_25V)\nIWDG1 control option status bit\nIWDG1 option configuration bit\nRead latency\nBank 1 configuration lock bit\nFlash mass erase enable bit\nD1 DStandby entry reset option status bit\nOption byte erase after D1 DStandby option configuration …\nD1 DStop entry reset option status bit\nOption byte erase after D1 DStop option configuration bit\nBank 1 write/erase error flag\nBank 1 write/erase error interrupt enable bit\nOption byte change ongoing flag\nOption byte change error flag\nOption byte change error interrupt enable bit\nFLASH_OPTCR lock option configuration bit\nOption byte start change option configuration bit\nDevice personalization status bit\nBank 1 program enable bit\nOTP program control bit\nBank 1 programming sequence error flag\nBank 1 programming sequence error interrupt enable bit\nBank 1 highest PCROP protected address\nBank 1 highest PCROP protected address configuration\nBank 1 lowest PCROP protected address\nBank 1 lowest PCROP protected address configuration\nBank 1 wait queue flag\nReadout protection level option status byte\nReadout protection level option configuration byte\nBank 1 read protection error flag\nBank 1 read protection error interrupt enable bit\nBank 1 secure error flag\nBank 1 secure error interrupt enable bit\nUser option bit 1\nUser option configuration bit 1\nUser option configuration bit 2\nBank 1 highest secure protected address\nBank 1 highest secure protected address configuration\nBank 1 lowest secure protected address\nBank 1 lowest secure protected address configuration\nSecurity enable option status bit\nSecurity option configuration bit\nBank 1 sector erase request\nBank 1 CRC sector select bit\nBank 1 CRC select bit\nBank 1 erase request\nBoot address 0\nBoot address 0\nBoot address 1\nBoot address 1\nBrownout level option status bit\nBOR reset level option configuration bits\nBank 1 ongoing program flag\nBank 1 CRC clear bit\nBank 1 CRC sector list clear bit\nBank 1 CRCEND1 flag clear bit\nBank 1 CRC read error clear bit\nBank 1 DBECCERR1 flag clear bit\nBank 1 EOP1 flag clear bit\nBank 1 INCERR1 flag clear bit\nBank 1 OPERR1 flag clear bit\nOPTCHANGEERR reset bit\nBank 1 PGSERR1 flag clear bi\nBank 1 RDPERR1 flag clear bit\nBank 1 RDSERR1 flag clear bit\nBank 1 SNECCERR1 flag clear bit\nBank 1 STRBERR1 flag clear bit\nBank 1 WRPERR1 flag clear bit\nBank 1 CRC burst size\nBank 1 CRC busy flag\nBank 1 CRC sector mode select bit\nCRC result\nBank 1 CRC control bit\nCRC end address on bank 1\nBank 1 CRC sector number\nCRC start address on bank 1\nBank 1 CRC-complete flag\nBank 1 end of CRC calculation interrupt enable bit\nBank 1 CRC read error flag\nBank 1 CRC read error interrupt enable bit\nBank 1 ECC double detection error flag\nBank 1 ECC double detection error interrupt enable bit\nBank 1 PCROP protected erase enable option status bit\nBank 1 PCROP protected erase enable option configuration …\nBank 1 secure protected erase enable option status bit\nBank 1 secure protected erase enable option configuration …\nBank 1 end-of-program flag\nBank 1 end-of-program interrupt control bit\nBank 1 ECC error address\nBank 1 write forcing control bit\nIWDG Standby mode freeze option status bit\nIWDG Standby mode freeze option configuration bit\nIWDG Stop mode freeze option status bit\nIWDG Stop mode freeze option configuration bit\nBank 1 inconsistency error flag\nBank 1 inconsistency error interrupt enable bit\nI/O high-speed at low-voltage status bit …\nI/O high-speed at low-voltage (PRODUCT_BELOW_25V)\nIWDG1 control option status bit\nIWDG1 option configuration bit\nRead latency\nBank 1 configuration lock bit\nFlash mass erase enable bit\nD1 DStandby entry reset option status bit\nOption byte erase after D1 DStandby option configuration …\nD1 DStop entry reset option status bit\nOption byte erase after D1 DStop option configuration bit\nBank 1 write/erase error flag\nBank 1 write/erase error interrupt enable bit\nOption byte change ongoing flag\nOption byte change error flag\nOption byte change error interrupt enable bit\nFLASH_OPTCR lock option configuration bit\nOption byte start change option configuration bit\nDevice personalization status bit\nBank 1 program enable bit\nOTP program control bit\nBank 1 programming sequence error flag\nBank 1 programming sequence error interrupt enable bit\nBank 1 highest PCROP protected address\nBank 1 highest PCROP protected address configuration\nBank 1 lowest PCROP protected address\nBank 1 lowest PCROP protected address configuration\nBank 1 wait queue flag\nReadout protection level option status byte\nReadout protection level option configuration byte\nBank 1 read protection error flag\nBank 1 read protection error interrupt enable bit\nBank 1 secure error flag\nBank 1 secure error interrupt enable bit\nUser option bit 1\nUser option configuration bit 1\nUser option configuration bit 2\nBank 1 highest secure protected address\nBank 1 highest secure protected address configuration\nBank 1 lowest secure protected address\nBank 1 lowest secure protected address configuration\nSecurity enable option status bit\nSecurity option configuration bit\nBank 1 sector erase request\nBank 1 single correction error flag\nBank 1 ECC single correction error interrupt enable bit\nBank 1 sector erase selection number\nDTCM RAM size option status\nDTCM size select option configuration bits\nBank 1 bank or sector erase start control bit\nBank 1 CRC start bit\nBank 1 strobe error flag\nBank 1 strobe error interrupt enable bit\nBank swapping configuration bit\nBank swapping option status bit\nBank swapping option configuration bit\nBank 1 write buffer not empty flag\nFlash signal delay\nBank 1 write protection error flag\nBank 1 write protection error interrupt enable bit\nBank 1 sector write protection option status byte\nBank 1 sector write protection configuration byte\nBank 1 single correction error flag\nBank 1 ECC single correction error interrupt enable bit\nBank 1 sector erase selection number\nDTCM RAM size option status\nDTCM size select option configuration bits\nBank 1 bank or sector erase start control bit\nBank 1 CRC start bit\nBank 1 strobe error flag\nBank 1 strobe error interrupt enable bit\nBank swapping configuration bit\nBank swapping option status bit\nBank swapping option configuration bit\nBank 1 write buffer not empty flag\nFlash signal delay\nBank 1 write protection error flag\nBank 1 write protection error interrupt enable bit\nBank 1 sector write protection option status byte\nBank 1 sector write protection configuration byte\nFlexible memory controller\nSRAM/NOR-Flash chip-select control register 2-4\nSRAM/NOR-Flash chip-select control register 1\nSRAM/NOR-Flash chip-select timing register 1-4\nSRAM/NOR-Flash write timing registers 1-4\nECC result register\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttribute memory space timing register\nPC Card/NAND Flash control register\nCommon memory space timing register\nSDRAM Command Mode register\nSDRAM Control Register 1-2\nSDRAM Refresh Timer register\nSDRAM Status register\nSDRAM Timing register 1-2\nFIFO status and interrupt register\nSRAM/NOR-Flash chip-select control register 2-4\nSRAM/NOR-Flash chip-select control register 1\nSRAM/NOR-Flash chip-select timing register\nSRAM/NOR-Flash write timing registers\nECC result register\nAttribute memory space timing register\nPC Card/NAND Flash control register\nCommon memory space timing register\nSDRAM Command Mode register\nSDRAM Control Register\nSDRAM Refresh Timer register\nSDRAM Status register\nSDRAM Timing register\nFIFO status and interrupt register\nAccess mode\nAccess mode\nAddress-hold phase duration\nAddress-hold phase duration\nAddress setup phase duration\nAddress setup phase duration\nWait signal during asynchronous transfers\nWait signal during asynchronous transfers\nAttribute memory data bus Hi-Z time\nAttribute memory hold time\nAttribute memory setup time\nAttribute memory wait time\nFMC bank mapping These bits allows different to remap …\nBurst enable bit\nBurst enable bit\nBus turnaround phase duration\nBus turnaround phase duration\nCAS latency\nWrite burst enable\nWrite burst enable\nContinuous clock enable\nClock divide ratio (for FMC_CLK signal)\nRefresh Timer Count\nCRAM page size\nCRAM page size\nClear Refresh error flag\nCommand target bank 1\nCommand target bank 2\nData-phase duration\nData-phase duration\nData latency for synchronous memory\nECC computation result value\nECC computation logic enable bit\nECC page size\nExtended mode enable\nExtended mode enable\nFlash access enable\nFlash access enable\nFIFO empty status\nFMC controller enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterrupt falling edge detection enable bit\nInterrupt falling edge status\nInterrupt high-level detection enable bit\nInterrupt high-level status\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterrupt rising edge detection enable bit\nInterrupt rising edge status\nMemory bank enable bit\nMemory bank enable bit\nCommon memory x data bus Hi-Z time\nCommon memory hold time\nCommon memory x setup time\nCommon memory wait time\nCommand mode\nStatus Mode for Bank 1\nStatus Mode for Bank 2\nMode Register definition\nMemory type\nMemory type\nAddress/data multiplexing enable bit\nAddress/data multiplexing enable bit\nMemory data bus width\nMemory data bus width\nMemory data bus width\nNumber of internal banks\nNumber of column address bits\nNumber of row address bits\nNumber of Auto-refresh\nNAND Flash memory bank enable bit\nWait feature enable bit\nData bus width\nBurst read\nRefresh error flag\nRES Interrupt Enable\nRead pipe\nSDRAM clock configuration\nAccess mode\nAccess mode\nAddress-hold phase duration\nAddress-hold phase duration\nAddress setup phase duration\nAddress setup phase duration\nWait signal during asynchronous transfers\nWait signal during asynchronous transfers\nAttribute memory data bus Hi-Z time\nAttribute memory hold time\nAttribute memory setup time\nAttribute memory wait time\nFMC bank mapping These bits allows different to remap …\nBurst enable bit\nBurst enable bit\nBus turnaround phase duration\nBus turnaround phase duration\nCAS latency\nWrite burst enable\nWrite burst enable\nContinuous clock enable\nClock divide ratio (for FMC_CLK signal)\nRefresh Timer Count\nCRAM page size\nCRAM page size\nClear Refresh error flag\nCommand target bank 1\nCommand target bank 2\nData-phase duration\nData-phase duration\nData latency for synchronous memory\nECC computation result value\nECC computation logic enable bit\nECC page size\nExtended mode enable\nExtended mode enable\nFlash access enable\nFlash access enable\nFIFO empty status\nFMC controller enable\nInterrupt falling edge detection enable bit\nInterrupt falling edge status\nInterrupt high-level detection enable bit\nInterrupt high-level status\nInterrupt rising edge detection enable bit\nInterrupt rising edge status\nMemory bank enable bit\nMemory bank enable bit\nCommon memory x data bus Hi-Z time\nCommon memory hold time\nCommon memory x setup time\nCommon memory wait time\nCommand mode\nStatus Mode for Bank 1\nStatus Mode for Bank 2\nMode Register definition\nMemory type\nMemory type\nAddress/data multiplexing enable bit\nAddress/data multiplexing enable bit\nMemory data bus width\nMemory data bus width\nMemory data bus width\nNumber of internal banks\nNumber of column address bits\nNumber of row address bits\nNumber of Auto-refresh\nNAND Flash memory bank enable bit\nWait feature enable bit\nData bus width\nBurst read\nRefresh error flag\nRES Interrupt Enable\nRead pipe\nSDRAM clock configuration\nALE to RE delay\nCLE to RE delay\nLoad Mode Register to Active\nSelf refresh time\nRow cycle delay\nRow to column delay\nRow precharge delay\nRecovery delay\nExit self-refresh delay\nWait timing configuration\nWait timing configuration\nWait enable bit\nWait enable bit\nWait signal polarity bit\nWait signal polarity bit\nWrite FIFO disable\nWrite protection\nWrite enable bit\nWrite enable bit\nALE to RE delay\nCLE to RE delay\nLoad Mode Register to Active\nSelf refresh time\nRow cycle delay\nRow to column delay\nRow precharge delay\nRecovery delay\nExit self-refresh delay\nWait timing configuration\nWait timing configuration\nWait enable bit\nWait enable bit\nWait signal polarity bit\nWait signal polarity bit\nWrite FIFO disable\nWrite protection\nWrite enable bit\nWrite enable bit\nAccess mode A\nNWAIT active high\nNWAIT active low\nAuto-refresh command\nAccess mode B\nNWAIT signal is active one data cycle before wait state\n10 bits\n11 bits\n11 bits\n12 bits\n13 bits\nMemory data bus width 16 bits\nExternal memory device width 16 bits\nMemory data bus width 32 bits\nMemory data bus width 8 bits\n8 bits\nExternal memory device width 8 bits\n9 bits\n1024 bytes CRAM page size\nECC page size 1024 bytes\n128 bytes CRAM page size\nECC page size 2048 bytes\n256 bytes CRAM page size\nECC page size 256 bytes\nECC page size 4096 bytes\n512 bytes CRAM page size\nECC page size 512 bytes\nECC page size 8192 bytes\nAccess mode C\nClock Configuration Enable\n1 cycle\nOne clock cycle delay\n2 cycles\nTwo clock cycles delay\n3 cycles\nAccess mode D\nSDCLK clock disabled\nSDCLK period = 2 x HCLK period\nSDCLK period = 3 x HCLK period\nNWAIT signal is active during wait state\nNOR Flash/OneNAND Flash\nLoad Mode Resgier\nTwo internal Banks\nFour internal Banks\nNo burst split when crossing page boundary\nNo clock cycle delay\nNormal Mode\nNormal Mode\nPALL (All Bank Precharge) command\nPower-down mode\nPower-down command\nPSRAM (CRAM) memory type\nSelf-refresh mode\nSelf-refresh command\nSRAM memory type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneral-purpose I/Os\nGPIO alternate function registers. The register described …\nGPIO port bit set/reset register\nReturns the argument unchanged.\nGPIO port input data register\nCalls <code>U::from(self)</code>.\nGPIO port configuration lock register\nGPIO port mode register\nGPIO port output data register\nGPIO port output speed register\nGPIO port output type register\nGPIO port pull-up/pull-down register\nGPIO alternate function register. This contains an array …\nGPIO port bit set/reset register\nGPIO port input data register\nGPIO port configuration lock register\nGPIO port mode register\nGPIO port output data register\nGPIO port output speed register\nGPIO port output type register\nGPIO port pull-up/pull-down register\nAlternate function selection for one of the pins …\nPort x set bit y (y= 0..15)\nPort x set bit y (y= 0..15)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPort input data (y = 0..15)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPort configuration locked\nPort configuration lock key active\nPort x configuration bits (y = 0..15)\nPort output data (y = 0..15)\nPort x configuration bits (y = 0..15)\nPort x configuration bits (y = 0..15)\nPort x configuration bits (y = 0..15)\nAlternate function selection for one of the pins …\nPort x set bit y (y= 0..15)\nPort x set bit y (y= 0..15)\nPort input data (y = 0..15)\nPort configuration locked\nPort configuration lock key active\nPort x configuration bits (y = 0..15)\nPort output data (y = 0..15)\nPort x configuration bits (y = 0..15)\nPort x configuration bits (y = 0..15)\nPort x configuration bits (y = 0..15)\nAlternate function mode\nAnalog mode\nNo pull-up, pull-down\nInput is logic high\nSet output to logic high\nHigh speed\nInput mode (reset state)\nInput is logic low\nSet output to logic low\nLow speed\nMedium speed\nOutput open-drain\nGeneral purpose output mode\nPull-down\nPull-up\nOutput push-pull (reset state)\nVery high speed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInter-integrated circuit\nControl register 1\nControl register 2\nReturns the argument unchanged.\nInterrupt clear register\nCalls <code>U::from(self)</code>.\nInterrupt and Status register\nOwn address register 1\nOwn address register 2\nPEC register\nReceive data register\nTimeout register\nTiming register\nTransmit data register\nControl register 1\nControl register 2\nInterrupt clear register\nInterrupt and Status register\nOwn address register 1\nOwn address register 2\nPEC register\nReceive data register\nTimeout register\nTiming register\nTransmit data register\n10-bit addressing mode (master mode)\nAddress match code (Slave mode)\nAddress matched (slave mode)\nAddress Matched flag clear\nAddress match interrupt enable (slave only)\nSMBus alert\nAlert flag clear\nSMBUS alert enable\nAnalog noise filter OFF\nArbitration lost\nArbitration lost flag clear\nAutomatic end mode (master mode)\nBus error\nBus error flag clear\nBus busy\nTransfer direction (master mode)\nTransfer direction (Slave mode)\nDigital noise filter\nError interrupts enable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneral call enable\n10-bit address header only read direction (master receiver …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNACK generation (slave mode)\nNot Acknowledge flag clear\nNot acknowledge received flag\nNot acknowledge received interrupt enable\nNumber of bytes\nClock stretching disable\nInterface address\nOwn Address 1 enable\nOwn Address 1 10-bit mode\nInterface address\nOwn Address 2 enable\nOwn Address 2 masks\nOverrun/Underrun (slave mode)\nOverrun/Underrun flag clear\nPeripheral enable\nPacket error checking register\nPacket error checking byte\nPEC Error flag clear\nPEC enable\nPEC Error in reception\nTiming prescaler\nNBYTES reload mode\n8-bit receive data\nDMA reception requests enable\nRX Interrupt enable\nReceive data register not empty (receivers)\nSlave address bit (master mode)\nSlave byte control\nData setup time\nSCL high period (master mode)\nSCL low period (master mode)\nData hold time\n10-bit addressing mode (master mode)\nAddress match code (Slave mode)\nAddress matched (slave mode)\nAddress Matched flag clear\nAddress match interrupt enable (slave only)\nSMBus alert\nAlert flag clear\nSMBUS alert enable\nAnalog noise filter OFF\nArbitration lost\nArbitration lost flag clear\nAutomatic end mode (master mode)\nBus error\nBus error flag clear\nBus busy\nTransfer direction (master mode)\nTransfer direction (Slave mode)\nDigital noise filter\nError interrupts enable\nGeneral call enable\n10-bit address header only read direction (master receiver …\nNACK generation (slave mode)\nNot Acknowledge flag clear\nNot acknowledge received flag\nNot acknowledge received interrupt enable\nNumber of bytes\nClock stretching disable\nInterface address\nOwn Address 1 enable\nOwn Address 1 10-bit mode\nInterface address\nOwn Address 2 enable\nOwn Address 2 masks\nOverrun/Underrun (slave mode)\nOverrun/Underrun flag clear\nPeripheral enable\nPacket error checking register\nPacket error checking byte\nPEC Error flag clear\nPEC enable\nPEC Error in reception\nTiming prescaler\nNBYTES reload mode\n8-bit receive data\nDMA reception requests enable\nRX Interrupt enable\nReceive data register not empty (receivers)\nSlave address bit (master mode)\nSlave byte control\nData setup time\nSCL high period (master mode)\nSCL low period (master mode)\nData hold time\nSMBus Device Default address enable\nSMBus Host address enable\nStart generation\nStop generation (master mode)\nStop detection flag clear\nStop detection flag\nSTOP detection Interrupt enable\nTransfer Complete (master mode)\nTransfer Complete interrupt enable\nTransfer Complete Reload\nExtended clock timeout enable\nIdle clock timeout detection\nTimeout or t_low detection flag\nBus timeout A\nBus timeout B\nTimeout detection flag clear\nClock timeout enable\n8-bit transmit data\nDMA transmission requests enable\nTransmit data register empty (transmitters)\nTX Interrupt enable\nTransmit interrupt status (transmitters)\nSMBus Device Default address enable\nSMBus Host address enable\nStart generation\nStop generation (master mode)\nStop detection flag clear\nStop detection flag\nSTOP detection Interrupt enable\nTransfer Complete (master mode)\nTransfer Complete interrupt enable\nTransfer Complete Reload\nExtended clock timeout enable\nIdle clock timeout detection\nTimeout or t_low detection flag\nBus timeout A\nBus timeout B\nTimeout detection flag clear\nClock timeout enable\n8-bit transmit data\nDMA transmission requests enable\nTransmit data register empty (transmitters)\nTX Interrupt enable\nTransmit interrupt status (transmitters)\nAutomatic end mode: a STOP condition is automatically sent …\n10-bit addressing mode\n7-bit addressing mode\nThe master sends the complete 10 bit slave address read …\nThe transfer is completed after the NBYTES data transfer …\nDigital filter enabled and filtering capability up to 1 …\nDigital filter enabled and filtering capability up to 10 …\nDigital filter enabled and filtering capability up to 11 …\nDigital filter enabled and filtering capability up to 12 …\nDigital filter enabled and filtering capability up to 13 …\nDigital filter enabled and filtering capability up to 14 …\nDigital filter enabled and filtering capability up to 15 …\nDigital filter enabled and filtering capability up to 2 …\nDigital filter enabled and filtering capability up to 3 …\nDigital filter enabled and filtering capability up to 4 …\nDigital filter enabled and filtering capability up to 5 …\nDigital filter enabled and filtering capability up to 6 …\nDigital filter enabled and filtering capability up to 7 …\nDigital filter enabled and filtering capability up to 8 …\nDigital filter enabled and filtering capability up to 9 …\nOA2[1] is masked and don’t care. Only OA2[7:2] are …\nOA2[2:1] are masked and don’t care. Only OA2[7:3] are …\nOA2[3:1] are masked and don’t care. Only OA2[7:4] are …\nOA2[4:1] are masked and don’t care. Only OA2[7:5] are …\nOA2[5:1] are masked and don’t care. Only OA2[7:6] are …\nOA2[6:1] are masked and don’t care. Only OA2[7] is …\nOA2[7:1] are masked and don’t care. No comparison is …\nDigital filter disabled\nNo mask\nThe transfer is not completed after the NBYTES data …\nThe master only sends the 1st 7 bits of the 10 bit …\nRead transfer, slave enters transmitter mode\nSoftware end mode: TC flag is set when NBYTES data are …\nWrite transfer, slave enters receiver mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndependent watchdog\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey register\nPrescaler register\nReload register\nStatus register\nWindow register\nKey register\nPrescaler register\nReload register\nStatus register\nWindow register\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey value (write only, read 0000h)\nPrescaler divider\nWatchdog prescaler value update\nWatchdog counter reload value\nWatchdog counter reload value update\nKey value (write only, read 0000h)\nPrescaler divider\nWatchdog prescaler value update\nWatchdog counter reload value\nWatchdog counter reload value update\nWatchdog counter window value\nWatchdog counter window value update\nWatchdog counter window value\nWatchdog counter window value update\nDivider /128\nDivider /16\nDivider /256\nDivider /256\nDivider /32\nDivider /4\nDivider /64\nDivider /8\nEnable access to PR, RLR and WINR registers (0x5555)\nReset the watchdog value (0xAAAA)\nStart the watchdog (0xCCCC)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJPEG codec\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nJPEG DHTMem tables\nReturns the argument unchanged.\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG HuffSymb tables\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0\nJPEG encoder, AC Huffman table 0")