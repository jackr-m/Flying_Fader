searchState.loadedDescShard("usbd_hid", 0, "HID report descriptor generation &amp; USB HID class …\nA buffer too short for the data to read was passed, or …\nClasses attempted to allocate more packet buffer memory …\nClasses attempted to allocate more endpoints than the …\nContains the error value\nThe endpoint address is invalid or already used.\nOperation is not valid in the current state of the object.\nContains the success value\nParsing failed due to invalid input.\nResult for USB operations.\nOperation is not supported by device or configuration.\nA USB stack error.\nAn operation would block because the device is currently …\nImplements generation of HID report descriptors as well as …\nReturns the argument unchanged.\nImplements HID functionality for a usb-device device.\nCalls <code>U::from(self)</code>.\nReport types which serialize into input reports, ready for …\nCurrency Sub-unit (Footnote 32)\nCurrency Unit (Footnote 32)\nDecimal Separator (Footnote 31)\nKeyboard 0 and ) (Footnote 2)\nKeyboard 1 and ! (Footnote 2)\nKeyboard 2 and @ (Footnote 2)\nKeyboard 3 and # (Footnote 2)\nKeyboard 4 and $ (Footnote 2)\nKeyboard 5 and % (Footnote 2)\nKeyboard 6 and ^ (Footnote 2)\nKeyboard 7 and &amp; (Footnote 2)\nKeyboard 8 and * (Footnote 2)\nKeyboard 9 and ( (Footnote 2)\nKeyboard a and A (Footnote 2)\nKeyboard Again\nKeyboard Alternate Erase (Footnote 30)\nKeyboard Application (Footnote 11)\nKeyboard \\ and |\nKeyboard DELETE (Backspace) (Footnote 4)\nKeyboard ` and ~ (Footnote 2)\nKeyboard b and B\nKeyboard Cancel\nKeyboard Caps Lock (Footnote 6)\nKeyboard c and C (Footnote 2)\nKeyboard Clear\nKeyboard Clear/Again\nKeyboard ] and } (Footnote 2)\nKeyboard , and &lt; (Footnote 2)\nKeyboard Copy\nKeyboard CrSel/Props\nKeyboard Cut\nKeyboard - and _ (Footnote 2)\nKeyboard d and D\nKeyboard Delete Forward (Footnote 7) (Footnote 8)\nKeyboard DownArrow (Footnote 7)\nKeyboard e and E\nKeyboard End (Footnote 7)\nKeyboard Return (ENTER) (Footnote 3)\nKeyboard = and + (Footnote 2)\nKeyboard ErrorRollOver (Footnote 1)\nKeyboard ErrorUndefined (Footnote 1)\nKeyboard ESCAPE\nKeyboard ExSel\nKeyboard Execute\nKeyboard F1\nKeyboard F10\nKeyboard F11\nKeyboard F12\nKeyboard F13\nKeyboard F14\nKeyboard F15\nKeyboard F16\nKeyboard F17\nKeyboard F18\nKeyboard F19\nKeyboard F2\nKeyboard F20\nKeyboard F21\nKeyboard F22\nKeyboard F23\nKeyboard F24\nKeyboard F3\nKeyboard F4\nKeyboard F5\nKeyboard F6\nKeyboard F7\nKeyboard F8\nKeyboard F9\nKeyboard f and F\nKeyboard Find\nKeyboard g and G\nKeyboard Help\nKeyboard h and H\nKeyboard Home (Footnote 7)\nKeyboard i and I\nKeyboard Insert (Footnote 7)\nKeyboard International1 (Footnote 15) (Footnote 16)\nKeyboard International2 (Footnote 17)\nKeyboard International3 (Footnote 18)\nKeyboard International4 (Footnote 19)\nKeyboard International5 (Footnote 20)\nKeyboard International6 (Footnote 21)\nKeyboard International7 (Footnote 22)\nKeyboard International8 (Footnote 23)\nKeyboard International9 (Footnote 23)\nKeyboard j and J\nKeyboard k and K\nKeyboard LANG1 (Footnote 24)\nKeyboard LANG2 (Footnote 25)\nKeyboard LANG3 (Footnote 26)\nKeyboard LANG4 (Footnote 27)\nKeyboard LANG5 (Footnote 28)\nKeyboard LANG6 (Footnote 29)\nKeyboard LANG7 (Footnote 29)\nKeyboard LANG8 (Footnote 29)\nKeyboard LANG9 (Footnote 29)\nKeyboard LeftAlt\nKeyboard LeftArrow (Footnote 7)\nKeyboard LeftControl\nKeyboard LeftGUI (Footnote 11) (Footnote 33)\nKeyboard LeftShift\nKeyboard l and L\nKeyboad Locking Caps Lock (Footnote 12)\nKeyboad Locking Num Lock (Footnote 12)\nKeyboad Locking Scroll Lock (Footnote 12)\nKeyboard Menu\nKeyboard m and M (Footnote 2)\nKeyboard Mute\nKeyboard n and N\nKeyboard Non-US # and (Footnote 5)\nKeyboard Non-US \\ and | (Footnote 9) (Footnote 10)\nKeyboard o and O (Footnote 2)\nKeyboard [ and { (Footnote 2)\nKeyboard Oper\nKeyboard Out\nKeyboard POSTFail (Footnote 1)\nKeyboard PageDown (Footnote 7)\nKeyboard PageUp (Footnote 7)\nKeyboard Paste\nKeyboard Pause (Footnote 7)\nKeyboard . and &gt; (Footnote 2)\nKeyboard Power (Footnote 1)\nKeyboard p and P (Footnote 2)\nKeyboard PrintScreen (Footnote 7)\nKeyboard Prior\nKeyboard q and Q (Footnote 2)\nKeyboardReport describes a report and its companion …\nKeyboard Return\nKeyboard RightAlt\nKeyboard RightArrow (Footnote 7)\nKeyboard RightControl\nKeyboard RightGUI (Footnote 11) (Footnote 34)\nKeyboard RightShift\nKeyboard r and R\nKeyboard ScrollLock (Footnote 6)\nKeyboard Select\nKeyboard ; and : (Footnote 2)\nKeyboard Separator\nKeyboard ’ and “ (Footnote 2)\nKeyboard / and ? (Footnote 2)\nKeyboard Spacebar\nKeyboard s and S\nKeyboard Stop\nKeyboard SysReq/Attention (Footnote 7)\nKeyboard Tab\nKeyboard t and T\nKeyboard Undo\nKeyboard UpArrow (Footnote 7)\nKeyboardUsage describes the key codes to be used in …\nKeyboard u and U\nKeyboard Volume Down\nKeyboard Volume Up\nKeyboard v and V\nKeyboard w and W (Footnote 2)\nKeyboard x and X (Footnote 2)\nKeyboard y and Y (Footnote 2)\nKeyboard z and Z (Footnote 2)\nKeypad 00\nKeypad 000\nKeypad 0 and Insert\nKeypad 1 and End\nKeypad 2 and DownArrow\nKeypad 3 and PageDown\nKeypad 4 and LeftArrow\nKeypad 5\nKeypad 6 and RightArrow\nKeypad 7 and Home\nKeypad 8 and UpArrow\nKeypad 9 and PageUp\nKeypad A\nKeypad @\nKeypad B\nKeypad Backspace\nKeypad Binary\nKeypad &amp;\nKeypad |\nKeypad XOR\nKeypad C\nKeypad Clear\nKeypad Clear Entry\nKeypad }\nKeypad )\nKeypad :\nKeypad Comma (Footnote 13)\nKeypad D\nKeypad Decimal\nKeypad / (Footnote 7)\nKeypad E\nKeypad ENTER (Footnote 3)\nKeypad =\nKeypad Equal Sign (Footnote 14)\nKeypad !\nKeypad F\nKeypad #\nKeypad Hexadecimal\nKeypad &lt;\nKeypad &amp;&amp;\nKeypad ||\nKeypad ^\nKeypad Memory Add\nKeypad Memory Clear\nKeypad Memory Divice\nKeypad Memory Multiply\nKeypad Memory Recall\nKeypad Memory Store\nKeypad Memory Subtract\nKeypad -\nKeypad %\nKeypad *\nKeypad Num Lock and Clear (Footnote 6)\nKeypad Octal\nKeypad {\nKeypad (\nKeypad . and Delete\nKeypad +\nKeypad +/-\nKeypad &gt;\nKeypad Space\nKeypad Tab\nMedia player usage ids that can be used in …\nMediaKeyboardReport describes a report and descriptor that …\nMouseReport describes a report and its companion …\nReserved keyboard values (used for all reserved / invalid …\nReport types where serialized HID report descriptors are …\nSystem control usage ids to use with SystemControlReport\nSystemControlReport describes a report and descriptor that …\nThousands Separator (Footnote 31)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttribute to generate a HID descriptor &amp; serialization code\nPrelude for modules which use the <code>gen_hid_descriptor</code> macro.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nA <strong>data structure</strong> that can be serialized into any data …\nType returned from <code>serialize_map</code> for serializing the …\nType returned from <code>serialize_seq</code> for serializing the …\nType returned from <code>serialize_struct</code> for serializing the …\nType returned from <code>serialize_struct_variant</code> for …\nReturned from <code>Serializer::serialize_tuple</code>.\nType returned from <code>serialize_tuple</code> for serializing the …\nType returned from <code>serialize_tuple_struct</code> for serializing …\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nFinish serializing a tuple.\nAttribute to generate a HID descriptor &amp; serialization code\nDetermine whether <code>Serialize</code> implementations should …\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize a tuple element.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nAllows the host to define boot or report mode. Defaults to …\nForces protocol mode to boot mode\nForces protocol mode to report mode\nHIDClass provides an interface to declare, read &amp; write …\nUsed to define specialized HID device settings Most …\nList of official USB HID country codes See (6.2.1): …\nDefines fixed packet format Only used if …\nGet/Set Protocol mapping See (7.2.5 and 7.2.6): …\nUsed to enable Boot mode descriptors for Mouse and …\nIt is often necessary to override OS behavior in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the currently set device protocol This is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new HIDClass with the provided UsbBus &amp; HID …\nCreates a new HIDClass with the provided UsbBus &amp; HID …\nSame as new_ep_in() but includes a settings field. The …\nCreates a new HIDClass with the provided UsbBus &amp; HID …\nSame as new_ep_out() but includes a settings field. This …\nSame as new() but includes a settings field. The settings …\nTries to read an output (host-to-device) report as raw …\nTries to read an incoming SET_REPORT report as raw bytes. …\nTries to write an input report by serializing the given …\nTries to write an input (device-to-host) report from the …\nForcibly sets the device protocol This is equivalent to …")