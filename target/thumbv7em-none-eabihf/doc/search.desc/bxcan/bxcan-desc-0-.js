searchState.loadedDescShard("bxcan", 0, "Driver for the STM32 bxCAN peripheral.\nInterface to a bxCAN peripheral.\nBuilder returned by <code>Can::builder</code>.\nConfiguration proxy returned by <code>Can::modify_config</code>.\nPayload of a CAN data frame.\nExtended 29-bit Identifier (<code>0..=0x1FFF_FFFF</code>).\nExtended 29-bit CAN Identifier (<code>0..=1FFF_FFFF</code>).\nIdentifies one of the two receive FIFOs.\nFires the <strong>RX FIFO 0</strong> interrupt when FIFO 0 holds 3 incoming …\nFires the <strong>RX FIFO 0</strong> interrupt when FIFO 0 holds a message.\nFires the <strong>RX FIFO 0</strong> interrupt when FIFO 0 drops an …\nFires the <strong>RX FIFO 1</strong> interrupt when FIFO 1 holds 3 incoming …\nFires the <strong>RX FIFO 1</strong> interrupt when FIFO 1 holds a message.\nFires the <strong>RX FIFO 1</strong> interrupt when FIFO 1 drops an …\nA bxCAN instance that owns filter banks.\nA CAN data or remote frame.\nPriority of a CAN frame.\nA CAN Identifier (standard or extended).\nA bxCAN peripheral instance.\nbxCAN interrupt sources.\nA set of bxCAN interrupts.\nCAN ID <code>0x7FF</code>, the lowest priority.\nCAN ID <code>0x1FFFFFFF</code>, the lowest priority.\nIdentifies one of the three transmit mailboxes.\nTransmit mailbox 0\nTransmit mailbox 1\nTransmit mailbox 2\nA bxCAN master instance that shares filter banks with a …\nThe total number of filter banks available to the instance.\nError that indicates that an incoming message has been …\nPointer to the instance’s register block.\nRegister block of bxCAN peripherals.\nInterface to receiver FIFO 0.\nInterface to receiver FIFO 1.\nFires the <strong>SCE</strong> interrupt when the peripheral enters sleep …\nStandard 11-bit Identifier (<code>0..=0x7FF</code>).\nStandard 11-bit CAN Identifier (<code>0..=0x7FF</code>).\nFires the <strong>TX</strong> interrupt when one of the transmit mailboxes …\nContains information about a frame enqueued for …\nInterface to the CAN transmitter part.\nFires the <strong>SCE</strong> interrupt when an incoming CAN frame is …\nCAN ID <code>0</code>, the highest priority.\nCAN ID <code>0</code>, the highest priority.\nAttempts to abort the sending of a frame that is pending …\nAttempts to abort the sending of a frame that is pending …\nReturns the set containing all flags.\nReturns this CAN Identifier as a raw 16-bit integer.\nReturns this CAN Identifier as a raw 32-bit integer.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nCreates a <code>CanBuilder</code> for constructing a CAN interface.\nClears the request complete flag for all mailboxes.\nClears the “Request Completed” (RQCP) flag of a …\nClears the pending flag of <code>Interrupt::Sleep</code>.\nClears a pending TX interrupt (…\nClears the pending flag of <code>Interrupt::Wakeup</code>.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the frame data (0..8 bytes in length) if this is a …\nReturns the lower-priority frame that was dequeued to make …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nStops listening for a CAN interrupt.\nStops listening for a set of CAN interrupts.\nReturns the data length code (DLC) which is in the range …\nCreates an empty data payload containing 0 bytes.\nReturns an empty set of flags.\nLeaves initialization mode and enables the peripheral.\nLeaves initialization mode and enables the peripheral.\nStarts listening for a CAN interrupt.\nStarts listening for a set of CAN interrupts.\nLeaves initialization mode and enables the peripheral …\nFilter bank API.\nDisables the CAN interface and returns back the raw …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nReturns the frame identifier.\nInserts the specified flags in-place.\nReturns a reference to the peripheral instance.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns true if this frame is a data frame.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if this frame is an extended frame.\nReturns <code>true</code> if no frame is pending for transmission.\nReturns true if this frame is a remote frame.\nReturns true if this frame is a standard frame.\nReturns <code>true</code> if no frame is pending for transmission.\nLeaves initialization mode, but keeps the peripheral in …\nReturns the <code>Can</code> interface without enabling it.\nReturns the <code>Mailbox</code> the frame was enqueued in.\nConfigure bit timings and silent/loop-back mode.\nAccesses the filter banks owned by this CAN peripheral.\nCreates a data payload from a raw byte slice.\nTries to create a <code>StandardId</code> from a raw 16-bit integer.\nTries to create a <code>ExtendedId</code> from a raw 32-bit integer.\nCreates a new data frame.\nCreates a new remote frame with configurable data length …\nCreates a new <code>StandardId</code> without checking if it is inside …\nCreates a new <code>ExtendedId</code> without checking if it is inside …\nReturns the complement of this set of flags.\nReturns the priority of this frame.\nReturns a received frame if available.\nReturns a received frame if available.\nReturns a received frame if available.\nRemoves the specified flags in-place.\nReturns a reference to the RX FIFO 0.\nReturns a reference to the RX FIFO 1.\nInserts or removes the specified flags depending on the …\nEnables or disables automatic retransmission of messages.\nEnables or disables automatic retransmission of messages.\nConfigures the automatic wake-up feature.\nConfigures the bit timings.\nConfigures the bit timings.\nEnables or disables loopback mode: Internally connects the …\nEnables or disables loopback mode: Internally connects the …\nEnables or disables silent mode: Disconnects the TX signal …\nEnables or disables silent mode: Disconnects the TX signal …\nPuts the peripheral in a sleep mode to save power.\nConsumes this <code>Can</code> instance and splits it into transmitting …\nSplits this <code>Can</code> instance into transmitting and receiving …\nReturns the Base ID part of this extended identifier.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nPuts a CAN frame in a free transmit mailbox for …\nPuts a CAN frame in a transmit mailbox for transmission on …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nWakes up from sleep mode.\nThe configuration of a filter bank.\nA 16-bit filter list entry.\nA 32-bit filter list entry.\nA 16-bit identifier mask.\nA 32-bit identifier mask.\nInterface to the filter banks of a CAN peripheral.\nInterface to the filter banks assigned to a slave …\nCreates a 16-bit identifier mask that accepts all frames.\nCreates a 32-bit identifier mask that accepts all frames.\nDisables all enabled filter banks.\nDisables all enabled filter banks.\nMake the filter accept data frames only.\nMake the filter accept data frames only.\nCreates a filter list entry that accepts data frames with …\nCreates a filter list entry that accepts data frames with …\nDisables a filter bank.\nDisables a filter bank.\nConfigures a filter bank according to <code>config</code> and enables …\nConfigures a filter bank according to <code>config</code> and enables …\nCreates a 32-bit identifier mask that accepts all frames …\nCreates a 16-bit identifier mask that accepts all frames …\nCreates a 32-bit identifier mask that accepts all frames …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of filter banks currently assigned to …\nReturns the number of filter banks currently assigned to …\nMake the filter accept remote frames only.\nMake the filter accept remote frames only.\nCreates a filter list entry that accepts remote frames …\nCreates a filter list entry that accepts remote frames …\nSets the index at which the filter banks owned by the …\nAccesses the filters assigned to the slave peripheral.")