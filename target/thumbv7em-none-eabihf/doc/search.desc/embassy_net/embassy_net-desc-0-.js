searchState.loadedDescShard("embassy_net", 0, "embassy-net\nThe broadcast address.\nThe broadcast address.\nNetwork stack configuration.\nNetwork stack IPv4 configuration.\nNetwork stack IPv6 configuration.\nUse DHCP to obtain an IP address configuration.\nDHCP configuration.\nA six-octet Ethernet II address.\nRepresentation of an hardware address, such as an Ethernet …\nThe prefix used in IPv4-mapped addresses.\nAn internetworking address.\nA specification of a CIDR block, containing an address and …\nAn internet endpoint address.\nAn internet endpoint address for listening.\nAn IPv4 address.\nA four-octet IPv4 address.\nA specification of an IPv4 CIDR block, containing an …\nAn IPv6 address.\nA sixteen-octet IPv6 address.\nA specification of an IPv6 CIDR block, containing an …\nThe link-local all nodes multicast address.\nThe link-local all routers multicast address.\nThe link-local all RPL nodes multicast address.\nThe loopback address.\nAll multicast-capable routers\nAll multicast-capable nodes\nDo not configure IPv4.\nDo not configure IPv6.\nThe solicited node prefix.\nA network stack.\nMemory resources needed for a network stack.\nUse a static IPv4 address configuration.\nUse a static IPv6 address configuration.\nStatic IP address configuration.\nStatic IPv6 address configuration\nAn unspecified address.\nThe unspecified address.\nReturn the IP address of this CIDR block.\nReturn the address of this IPv4 CIDR block.\nReturn the address of this IPv6 CIDR block.\nIP address and subnet mask.\nIP address and subnet mask.\nReturn an Ethernet address as a sequence of octets, in …\nReturn an address as a sequence of octets, in big-endian.\nReturn an IPv4 address as a sequence of octets, in …\nReturn an IPv6 address as a sequence of octets, in …\nConvert an IPv4 mapped IPv6 address to an IPv4 address.\nReturn the broadcast address of this IPv4 CIDR.\nClient port. This is almost always 68. Do not change …\nGet the current IPv4 configuration.\nGet the current IPv6 configuration.\nQuery whether the subnetwork described by this CIDR block …\nQuery whether the subnetwork described by this IPv4 CIDR …\nQuery whether the subnetwork described by this IPv6 CIDR …\nQuery whether the subnetwork described by this CIDR block …\nQuery whether the subnetwork described by this IPv4 CIDR …\nQuery whether the subnetwork described by this IPV6 CIDR …\nIPv4 configuration with dynamic addressing.\nDNS client compatible with the <code>embedded-nal-async</code> traits.\nMake a query for a given name and return the corresponding …\nDNS servers.\nDNS servers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an Ethernet address from a sequence of octets, …\nConstruct an IPv4 address from a sequence of octets, in …\nConstruct an IPv6 address from a sequence of octets, in …\nCreate an IPv4 CIDR block from the given address and …\nConstruct an IPv6 address from a sequence of words, in …\nParse a string representation of an Ethernet address.\nParse a string representation of an IP address.\nParse a string representation of an IP CIDR.\nParse a string representation of an IPv4 address.\nParse a string representation of an IPv4 CIDR.\nParse a string representation of an IPv6 address.\nParse a string representation of an IPv6 CIDR.\nDefault gateway.\nDefault gateway.\nGet the hardware address of the network interface.\nIgnore NAKs from DHCP servers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to an <code>IpAddress</code>.\nConvert to an <code>IpAddress</code>.\nIPv4 configuration\nIPv4 configuration with static addressing.\nIPv6 configuration\nIPv6 configuration with static addressing.\nQuery whether this address is the broadcast address.\nQuery whether the address is the broadcast address.\nQuery whether the address is the broadcast address.\nQuery whether the address is a broadcast address.\nGet whether the network stack has a valid IP configuration.\nQuery whether the IPv6 address is a global unicast address.\nQuery whether the IPv6 address is an IPv4 mapped IPv6 …\nQuery whether the address falls into the “link-local” …\nQuery whether the IPv6 address is in the link-local scope.\nGet whether the link is up.\nQuery whether the “locally administered” bit in the …\nQuery whether the address falls into the “loopback” …\nQuery whether the IPv6 address is the loopback address.\nQuery whether the “multicast” bit in the OUI is set.\nQuery whether the address is a valid multicast address.\nQuery whether the address is a multicast address.\nQuery whether the IPv6 address is a multicast address.\nQuery whether the endpoint has a specified address and …\nQuery whether the address is an unicast address.\nQuery whether the address is a valid unicast address.\nQuery whether the address is an unicast address.\nQuery whether the IPv6 address is an unicast address.\nQuery whether the address is an unicast address.\nQuery whether the IPv6 address is a Unique Local Address …\nQuery whether the address falls into the “unspecified” …\nQuery whether the address falls into the “unspecified” …\nQuery whether the IPv6 address is the unspecified address.\nMaximum lease duration.\nReturn the network mask of this IPv4 CIDR.\nReturn the network block of this IPv4 CIDR.\nCreate a new set of stack resources.\nCreate a new network stack.\nCreate a CIDR block from the given address and prefix …\nCreate an endpoint address from given address and port.\nConstruct an IPv4 address from parts.\nCreate an IPv4 CIDR block from the given address and …\nConstruct an IPv6 address from parts.\nCreate an IPv6 CIDR block from the given address and …\nIf <code>self</code> is a CIDR-compatible subnet mask, return …\nReturn the prefix length of this CIDR block.\nReturn the prefix length of this IPv4 CIDR block.\nReturn the prefix length of this IPv6 CIDR block.\nRetry configuration.\nRun the network stack.\nServer port. This is almost always 67. Do not change …\nSet the IPv4 configuration.\nSet the IPv6 configuration.\nThe solicited node for the given unicast address.\nTCP sockets.\nCreate an address wrapping an IPv4 address with the given …\nCreate an address wrapping an IPv6 address with the given …\nReturn the protocol version.\nWait for the network stack to obtain a valid IP …\nWrite a IPv6 address to the given slice.\nState for an in-progress DNS query.\nDNS record types\nDNS client compatible with the <code>embedded-nal-async</code> traits.\nErrors returned by DnsSocket.\nName lookup failed\nInvalid name\nAn internetworking address.\nAn IPv4 address.\nAn IPv6 address.\nName too long\nA Domain Name System socket.\nCancels a query, freeing the slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the result of a query.\nReturn the time-to-live (IPv4) or hop limit (IPv6) value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new DNS socket using the provided stack.\nCreate a DNS socket.\nMake a query for a given name and return the corresponding …\nAssign a waker to a query slot\nSet the time-to-live (IPv4) or hop limit (IPv6) value used …\nStart a query.\nStart a query with a raw (wire-format) DNS name. …\nUpdate the list of DNS servers, will replace all existing …\nError returned by <code>TcpSocket::accept</code>.\nError returned by <code>TcpSocket::connect</code>.\nThe connection was reset.\nThe remote host rejected the connection with a RST packet.\nThe remote host rejected the connection with a RST packet.\nError returned by TcpSocket read/write functions.\nInvalid listen port\nThe socket is already connected or listening.\nThe socket is already connected or listening.\nNo route to host.\nThe state of a TCP socket, according to RFC 793.\nThe reader half of a TCP socket.\nA TCP socket.\nThe writer half of a TCP socket.\nConnect timed out.\nForcibly close the socket.\nAccept a connection from a remote host.\nGet whether the socket is ready to receive data, i.e. …\nTCP client compatible with <code>embedded-nal-async</code> traits.\nClose the write half of the socket.\nConnect to a remote host.\nFlushes the written data to the socket.\nFlushes the written data to the socket.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the local endpoint of the socket.\nreturn whether the recieve half of the full-duplex …\nGet whether the socket is ready to send data, i.e. whether …\nCreate a new TCP socket on the given stack, with the given …\nRead data from the socket.\nRead data from the socket.\nCall <code>f</code> with the largest contiguous slice of octets in the …\nCall <code>f</code> with the largest contiguous slice of octets in the …\nReturn the maximum number of bytes inside the recv buffer.\nReturn the maximum number of bytes inside the transmit …\nGet the remote endpoint of the socket.\nReturn the maximum number of bytes inside the transmit …\nReturn the maximum number of bytes inside the transmit …\nSet the hop limit field in the IP header of sent packets.\nSet the keep-alive interval for the socket.\nSet the timeout for the socket.\nSplit the socket into reader and a writer halves.\nGet the state of the socket.\nWrite data to the socket.\nWrite data to the socket.\nCall <code>f</code> with the largest contiguous slice of octets in the …\nCall <code>f</code> with the largest contiguous slice of octets in the …\nTCP client connection pool compatible with …\nState for TcpClient\nOpened TCP connection in a <code>TcpClient</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TcpClient</code>.\nCreate a new <code>TcpClientState</code>.")