(function() {var implementors = {
"embassy_embedded_hal":[["impl&lt;'a, M, BUS, CS&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/asynch/spi/struct.SpiDeviceWithConfig.html\" title=\"struct embassy_embedded_hal::shared_bus::asynch::spi::SpiDeviceWithConfig\">SpiDeviceWithConfig</a>&lt;'a, M, BUS, CS&gt;<div class=\"where\">where\n    BUS: <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> + <a class=\"trait\" href=\"embassy_embedded_hal/trait.SetConfig.html\" title=\"trait embassy_embedded_hal::SetConfig\">SetConfig</a>,\n    CS: <a class=\"trait\" href=\"embedded_hal/digital/trait.OutputPin.html\" title=\"trait embedded_hal::digital::OutputPin\">OutputPin</a>,\n    M: RawMutex,</div>"],["impl&lt;'a, M, BUS, CS&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/blocking/spi/struct.SpiDeviceWithConfig.html\" title=\"struct embassy_embedded_hal::shared_bus::blocking::spi::SpiDeviceWithConfig\">SpiDeviceWithConfig</a>&lt;'a, M, BUS, CS&gt;<div class=\"where\">where\n    M: RawMutex,\n    BUS: <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> + <a class=\"trait\" href=\"embassy_embedded_hal/trait.SetConfig.html\" title=\"trait embassy_embedded_hal::SetConfig\">SetConfig</a>,\n    CS: <a class=\"trait\" href=\"embedded_hal/digital/trait.OutputPin.html\" title=\"trait embedded_hal::digital::OutputPin\">OutputPin</a>,</div>"],["impl&lt;'a, M: RawMutex, BUS, CS&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/asynch/spi/struct.SpiDevice.html\" title=\"struct embassy_embedded_hal::shared_bus::asynch::spi::SpiDevice\">SpiDevice</a>&lt;'a, M, BUS, CS&gt;<div class=\"where\">where\n    BUS: <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>,\n    CS: <a class=\"trait\" href=\"embedded_hal/digital/trait.OutputPin.html\" title=\"trait embedded_hal::digital::OutputPin\">OutputPin</a>,</div>"],["impl&lt;'a, M: RawMutex, BUS, CS&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/blocking/spi/struct.SpiDevice.html\" title=\"struct embassy_embedded_hal::shared_bus::blocking::spi::SpiDevice\">SpiDevice</a>&lt;'a, M, BUS, CS&gt;<div class=\"where\">where\n    BUS: <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>,\n    CS: <a class=\"trait\" href=\"embedded_hal/digital/trait.OutputPin.html\" title=\"trait embedded_hal::digital::OutputPin\">OutputPin</a>,</div>"],["impl&lt;T&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/adapter/struct.YieldingAsync.html\" title=\"struct embassy_embedded_hal::adapter::YieldingAsync\">YieldingAsync</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>,</div>"],["impl&lt;T, E&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/adapter/struct.BlockingAsync.html\" title=\"struct embassy_embedded_hal::adapter::BlockingAsync\">BlockingAsync</a>&lt;T&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"embedded_hal/spi/trait.Error.html\" title=\"trait embedded_hal::spi::Error\">Error</a>,\n    T: <a class=\"trait\" href=\"embedded_hal/blocking/spi/trait.Transfer.html\" title=\"trait embedded_hal::blocking::spi::Transfer\">Transfer</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, Error = E&gt; + <a class=\"trait\" href=\"embedded_hal/blocking/spi/trait.Write.html\" title=\"trait embedded_hal::blocking::spi::Write\">Write</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, Error = E&gt;,</div>"]],
"embassy_stm32":[["impl&lt;'d, T: <a class=\"trait\" href=\"embassy_stm32/spi/trait.Instance.html\" title=\"trait embassy_stm32::spi::Instance\">Instance</a>, Tx, Rx&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_stm32/spi/struct.Spi.html\" title=\"struct embassy_stm32::spi::Spi\">Spi</a>&lt;'d, T, Tx, Rx&gt;"]],
"embedded_hal":[],
"embedded_hal_async":[],
"embedded_hal_nb":[]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()